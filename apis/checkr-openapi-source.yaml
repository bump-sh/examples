openapi: 3.0.0
info:
  version: v1
  title: Checkr.com API Docs
  license:
    name: Proprietary
    url: 'https://www.checkr.com'
  contact:
    name: Checkr
    email: clients@checkr.com
    url: 'https://checkr.com'
  description: >2
     # Introduction

    Checkr is a modern,
    [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer)
    API-driven background screening service. The Checkr API uses
    resource-oriented URLs, supports HTTPS authentication and HTTPS verbs, and
    leverages [JSON](http://www.json.org/) in all responses passed back to
    customers.


    Checkr is used by over 10,000 customers in a wide variety of industries, and
    supports a range of screening products and candidate workflows. For a full
    list of our screenings, please see the Checkr [Screenings
    section](#tag/SSN-Trace) below or read the Checkr Help Center articles on
    [Screening
    Types](https://help.checkr.com/hc/en-us/sections/203637147-Screening-Types).


    This Programming Guide is designed to help customers get up-and-running with
    Checkr's background screening services, both by providing the necessary
    context to understand the background screening industry and its regulations,
    and by giving technical guidance on how to work with the Checkr API.


    **Note:** The cURL command is used for all examples in the Checkr API
    documentation.


    ### Other resources


    For a complete set of [User Guides for the Checkr
    Dashboard](https://help.checkr.com/hc/en-us/sections/360002119753-Checkr-Dashboard-User-Guide),
    and more information on the
    [compliance](https://help.checkr.com/hc/en-us/sections/203637107-Compliance)
    and regulatory aspects of background screenings, please see the [Checkr Help
    Center](https://help.checkr.com).


    For a more targeted set of Checkr Dashboard learning paths for talent
    sourcing roles like Recruiters, Adjudicators, or Program Administrators,
    please see the [Checkr Learning Center](https://learn.checkr.com).


    ## Understand the screening process


    Checkr follows a standardized screening process:


    1. Customer requests a background check.

    2. Candidate is presented with and signs the necessary disclosures and
    authorizations, and submits the requested Personally Identifiable
    Information (PII).
      -   With the Checkr-Hosted Apply Flow, the candidate signs disclosures and authorizations and enters their own PII.
      -   With a custom self-hosted flow, the Checkr customer collects the required authorizations, and passes Checkr candidate PII using the Checkr API.
    3. Checkr conducts an SSN Trace, and collects associated addresses.

    4. Checkr runs searches or verifications based on the screening Packages
    requested.

    5. Checkr applies appropriate compliance filters based on the customer’s
    settings and candidate’s provided residence to determine which records to
    show, and returns a finalized report to the customer.

    6. If there is a record on the report, the customer Engages or Adverse
    Actions the Candidate, based on an individualized assessment of the
    candidate's report.


    ### 1. Request a background check


    To initiate a background check, a customer provides Checkr their candidate's
    email address (for a Checkr-Hosted Apply Flow) or the candidate's PII (for a
    self-hosted flow). For more information on ways to achieve this, please see
    [Designing your workflow](#section/Introduction/Designing-your-workflow).


    ### 2. Candidate signs disclosures and authorizations


    Under the U.S. Fair Credit Reporting Act (FCRA), customers are obligated to
    collect consent from their candidates when running background checks through
    Checkr or any other Consumer Reporting Agency (CRA).


    The Checkr-Hosted Apply Flow presents candidates with fields in which the
    requested PII may be entered, and collects candidate information on behalf
    of the customer. Checkr will also present disclosures and authorizations to
    the candidate, and enable eSignature to capture consent, on behalf of
    customers using this flow with the Checkr Dashboard or email invitation
    flow.


    Custom self-hosted flows collect candidate PII, and pass the information to
    Checkr using the Checkr API. Customers creating a self-hosted flow will
    receive guidance from the Checkr team on setting up a similar process as
    required.


    ### 3. Checkr runs an SSN Trace


    Checkr runs an SSN Trace to match the candidate’s provided PII with existing
    credit header data mapped to the SSN. This process yields a list of names
    and addresses associated with the entered SSN, which can be used to
    supplement the background check process.


    At this point Checkr also conducts some initial data comparisons to check
    that critical pieces of information, like a candidate's submitted Date of
    Birth (DOB) and SSN, align with information held on file by the credit
    bureaus. If there is information that looks out of place, Checkr may reach
    out directly to the candidate, through their email address, to gain further
    confirmation or data from the individual.


    Once the candidate's information has been confirmed and an address history
    developed, the background check screening process begins.


    ### 4. Checkr runs the requested Screenings


    Checkr then runs the customer's requested Screenings. Based on the results
    of the SSN Trace, Checkr may expand the search for the requested Screenings
    to include counties where the candidate may have lived in the past.


    ### 5. Completed Report is returned


    Once a report has been completed, customers receive a report assessment
    update of **Clear** or **Consider** through their selected method of API
    webhooks, email, or Checkr Dashboard notifications.


    **Clear** and **Consider** are the default assessments. A Clear assessment
    can be interpreted as that report having no items listed on the candidate’s
    record that require consideration. A report with an assessment of Consider
    indicates that there are items on the candidate’s report that require your
    review. With both Clear and Consider reports, customers must decide whether
    or not to engage a candidate. Checkr does not make this determination on the
    customer’s behalf.


    ### 6. Customer evaluates the Report


    After the Report is completed and returned, the customer must evaluate the
    report, and make a final hiring determination. In maintaining a process
    compliant with per FCRA legislation and EEOC guidelines, Checkr does not
    make this determination on the customer's behalf.


    ## Get credentialed


    Before gaining a Checkr test or production account, you must first work with
    a Checkr Account Executive or Customer Success representative to create and
    credential your account.


    ### Credentialing and authorizing your account


    The background screening industry in the United States is heavily regulated
    by federal, state, and local levels of government, and primarily by the
    [Fair Credit Reporting Act
    (FCRA)](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/fair-credit-reporting-act).
    Checkr complies with these laws, and helps its customers comply, through
    multiple Checkr product features.


    Two key processes in the account authorization process also enable
    compliance: establishing permissible purpose, and confirming a compliant
    user interface workflow.


    ### Establishing permissible purpose


    One of the main provisions of FCRA is the requirement to establish a
    legitimate "permissible purpose" for running a background screen on an
    individual. These permissible purposes include running background screens
    for employment purposes (that is, making hiring decisions), making a
    decision to extend credit to an individual, or for what the law calls a
    "legitimate business purpose".


    Checkr establishes a customer's permissible purpose by collecting and
    confirming a number of key details about the business entity running a
    background screen, including:


    - Legal business name (associated with Employer Identification Number)

    - State of incorporation

    - Articles of incorporation

    - Employer Identification Number


    Some permissible purposes may impose additional legal requirements on the
    business entity running a background screen. For example, purposes involving
    checking a candidate's credit history require [an onsite inspection of the
    entity's business
    premises](https://www.transunion.com/data-reporting/getting-started).


    ### Confirming a compliant user interface (UI) workflow


    When building a candidate user experience that includes the capture of
    information necessary to run a background check, there are a number of
    essential components that must be included to send a compliant request to
    Checkr. For more information on these requirements and best practices,
    please see [Building your candidate
    experience](#section/Introduction/Designing-your-workflow/Building-your-candidate-experience).


    Before a Checkr account is credentialed and authorized for production API
    access, the Checkr Customer Success team confirms that your UI/UX flow meets
    our requirements and that all necessary information is being appropriately
    captured. More details about these requirements are included below and
    throughout the Checkr customer account onboarding process.


    ## API keys


    Checkr authenticates your API requests using your account's API keys. If you
    do not include your key when making an API request, Checkr will return an
    authentication error.


    Go to <b>Account Settings > Developer Settings </b>in the Checkr Dashboard
    to create both Secret and Publishable keys for your account. Use the Secret
    Key within your staging and production environments.


    Resources like Candidates, Reports, and Packages will not transfer from your
    Staging environment to your Live environment. For more information, please
    see [Staging Account](#section/Staging-Account) below.


    There are two types of API keys: secret and publishable.


    - **Secret API keys** should be kept confidential and stored only on your
    own servers. Your account's secret API key can perform any API request to
    Checkr without restriction.

    - **Publishable API keys** are for use only with [Checkr's JS
    API](https://github.com/checkr/checkr-js), and are meant solely to identify
    your account with Checkr. They aren't secret, and can therefore safely be
    published in your site's JavaScript code, or in an Android or iPhone app.


    ### Using your API keys


    Once your Checkr account has been created, your API keys will be available
    in the Checkr Dashboard, in the Account Settings > [Developer
    Settings](https://help.checkr.com/hc/en-us/articles/360010450474-Account-Settings#developer)
    page.


    <b>Note: </b>To prevent unexpected charges for production background checks,
    do not use your production Publishable API key for testing or development.


    **Keeping your keys safe**


    Access to your API keys should be granted only to those that need them. Your
    secret API key can be used to make any API call on behalf of your account,
    such as creating Candidates, requesting and upgrading Screenings, and
    creating Geos. Your publishable API key can only create Candidates in the
    Checkr system, and may be used to publish app or site builds.


    To further protect your keys, ensure that they are not included in any
    version control system that you may be using.


    **Expiring keys**


    If an API key is compromised, expire the key in the [Checkr
    Dashboard](https://help.checkr.com/hc/en-us/articles/360010450474-Account-Settings#developer)
    to block it. Click **Expire key** to set an expiration date for the selected
    key, and **Create new key** to create a new one to replace it.


    ![](images/AccountSettingsDevsKeys.png)


    ## Designing your workflow


    Checkr's API is flexible enough to support a range of workflows for
    integrating background screening into your candidate onboarding process. At
    a high-level there are three options, each with unique benefits and
    disadvantages.


    | Option | Benefits | Disadvantages |

    |:--|:--|:--|

    | Checkr Dashboard experience | <ul><li>No developer investment needed to
    get up-and-running</li></ul> | <ul><li>Least control over user
    experience</li><li>Least amount of flexibility around automated
    workflows</li></ul>  |

    | Checkr-hosted candidate experience | <ul><li>Easy to implement and get
    up-and-running</li><li>Checkr hosts and maintains compliance
    language</li></ul> | <ul><li>Less control over user experience</li><li>Less
    flexibility around API-specific automated workflows</li></ul> |

    | Self-hosted candidate experience | <ul><li>Seamless, customizable user
    experience</li><li>Potential for higher candidate conversion
    rates</li><li>Ability to measure conversion at each stage</li></ul> |
    <ul><li>Requires greater engineering resources</li><li>Customer must host
    and maintain compliance language in their product</li></ul> |



    ### Checkr Dashboard experience


    The Checkr Dashboard allows customers to initiate a background check through
    either the Checkr-Hosted Apply Flow or through a Manual flow.


    * Selecting Invite Candidates allows customers to enter an email address for
    their candidates. Checkr will then issue an invitation to the selected
    candidate which includes a Checkr-provided link. Clicking the link launches
    the Checkr-Hosted Apply Flow, which will walk them through the next steps in
    the process.


    * Selecting Manual Order requires customers to enter their candidate's PII,
    and confirm that they have collected the necessary authorizations on their
    candidate's behalf.


    For more information, see [Order a
    Report](https://help.checkr.com/hc/en-us/articles/217084017-Order-a-Report)
    in the Checkr Help Center.


    ### Checkr-hosted candidate experience


    The Checkr-hosted candidate experience enables Checkr customers to easily
    set up a modern, compliant candidate background screening process in their
    onboarding flow with limited development effort. The Checkr-hosted candidate
    experience has the full set of features and functionality of the Checkr
    product, and is built on top of the Checkr API, making it an easy and
    powerful option for customers looking to begin using Checkr as quickly as
    possible.


    The Checkr-Hosted Apply Flow, by which invitations are issued to candidates
    to participate in their background check, forms the basis of the
    Checkr-hosted candidate experience. Use the [Invitations](#tag/Invitations)
    resource to build this automated process into your application.


    The Checkr-hosted experience can be initiated in two ways:


    **Candidate invitations triggered by API:** Customers can choose to build a
    programmatic trigger into their site or product to order reports and send
    candidates invitations to participate in the background check process. In
    this case, a customer passes Checkr a candidate email address through the
    API, which triggers an email to that address to collect the candidate's
    information and present the necessary compliance forms and disclosures. This
    option requires developer time to build a Checkr backend integration into
    the customer's product, but does present benefits for automation and
    programmatic ordering.


    **Candidate invitations triggered through the Checkr Dashboard:** Customers
    can log into the Checkr Dashboard and issue an invitation to participate in
    the background check process to a candidate's email address. This option
    requires no developer time to build any Checkr integration, but lacks any
    automation or programmatic ordering, making it difficult to scale for high
    volume environments.


    Customers may also use the Checkr Dashboard to submit a Manual Order.
    Selecting this option requires them to collect the candidate’s authorization
    and consent to a background screening “offline”. This means that the
    customer will collect the candidate’s Personally Identifiable Information
    (PII), present the necessary authorizations and disclosures, and collect and
    store necessary signatures through separate means. Customers must then
    submit their candidate's PII to Checkr through the Checkr Dashboard, and
    certify that proper consent was obtained from their candidate.


    **Note:** When using candidate invitations and the Checkr-Hosted Apply Flow,
    understand that Checkr is facilitating your obligations with regard to
    applicable consumer reporting laws. Before using either method of candidate
    invitations, you should fully review the template copies of disclosure(s)
    and authorization language to ensure your business needs are met.


    <!--#### What it looks like


    ![](images/CheckrHostedFlowEmail.gif)


    ![](images/MobileCheckrInvite.gif)-->



    ### Self-hosted candidate experience


    The self-hosted candidate experience enables Checkr customers to completely
    control the user onboarding experience, from the look and feel of the
    candidate's UX, to the specific API calls made during the process, to the
    flexibility in timing and ordering of those calls. Some unique Checkr
    functionality, like programmatic report upgrades, are also available only to
    those customers hosting their own candidate experience.


    While hosting your own candidate onboarding experience takes more developer
    time, it might not be as much time as you think. We've seen teams
    successfully deploy a new background check and onboarding flow in a single
    2-week development sprint.


    **Building your candidate experience**


    To help customers meet the regulatory demands of the background screening
    industry, Checkr has defined the following UX requirements for customers
    building their own candidate onboarding experience:


    - **Collect candidate PII:** Collect candidate Personally Identifiable
    Information (PII), with additional requirements around the data captured and
    its formatting. This screen may be presented and the information collected
    at any point in the signup flow

    - **Present consumer rights summary, and collect acknowledgement:** Present
    a summary of consumer rights under the Fair Credit Reporting Act (FCRA) and
    candidate’s acknowledgement of receipt. This screen may be presented on the
    same page as the collection of PII.

    - **Present disclosures and collect acknowledgement:** Present a disclosure
    form and candidate’s acknowledgement of receipt. This disclosure form MUST
    be on its own page with no extraneous information.

    - **Present state-specific disclosures and collect acknowledgement** (if
    necessary): Present any state-specific disclosure forms and candidate’s
    acknowledgement of receipt. For example: California requires its own
    disclosure separate from the general background check disclosure. Washington
    State DMV requires a release of liability for accessing Motor Vehicle
    Records for employment.

    - **Present authorization form and collect consent:** Present an
    authorization form and collection of consent to a background screening.
    Present a signature of authorization form, compliant with the [ESIGN
    Act](https://en.wikipedia.org/wiki/Electronic_Signatures_in_Global_and_National_Commerce_Act).


    Checkr can provide you with copy templates for each of these documents.
    Checkr routinely has these documents reviewed for general compliance and
    best practice in the industry, but you should always consult your own legal
    counsel when using templates and ensure they work for your business. Please
    work with your Checkr Account Executive or Customer Success Manager to
    receive Checkr’s set of templates. These templates, the documents they
    include, and other requirements will be explained throughout the Checkr
    customer account onboarding process.


    **Note:** Requirements differ for customers running background screening
    programs limited to running a Motor Vehicle Record (MVR) on candidates for a
    non-employment or contractor purpose. The requirements for running an MVR in
    order to provide a service such as a car or scooter rental are far less
    onerous than the requirements for other uses of the MVR, and require only
    one or two screens of necessary consent and disclosure. Please contact your
    Checkr Account Executive or Customer Success Manager if you'd like to learn
    more about these streamlined requirements.


    **Compliance and eSignature**


    Collecting proof of authorization from your candidates is one of your most
    important responsibilities before performing a background screen through
    Checkr or any other Consumer Reporting Agency. Under the FCRA, Checkr cannot
    provide you with a report unless you certify that you have obtained proper
    authorization. Maintaining proof of this process is essential in the event
    that either you or Checkr is audited, or a candidate threatens you with
    litigation.


    Checkr recommends two means of collecting and storing this eSignature during
    the consent and authorization flow:


    - Store generated PDFs
        -   Identify the candidate by username and password
        -   Have the candidate type their name in a signature box
        -   Upon submission of authorization, generate a PDF of the authorization form, including the date, time, and IP address
    - Store data to generate PDF on demand
        -   Enable on-demand generation of PDFs
        -   Identify the candidate by username and password
        -   Have the candidate type their name in signature box
        -   Upon submission of authorization, store the date, timestamp, IP address, and signed name
        -   Have the ability to reproduce a PDF copy of the authorization form on demand, including the date and timestamp, IP address, and signed name

    ## The Checkr Dashboard


    The Checkr Dashboard allows Checkr customers to begin using the Checkr
    platform immediately and with no developer effort. The Checkr Dashboard
    includes the full feature and functionality set as the Checkr API interface,
    with a few key limitations.


    For more information, please see the [Checkr Dashboard User
    Guide](https://help.checkr.com/hc/en-us/sections/360002119753-Checkr-Dashboard-User-Guide)
    in the Checkr Help Center.


    # Getting Started


    The following sections will walk you through the steps necessary to get
    started

    running background checks with the Checkr API:


    - [Get credentialed](#section/Getting-Started/Get-credentialed)

    - [Get your API key](#section/Getting-Started/Get-your-API-key)

    - [Authenticate with
    Checkr](#section/Getting-Started/Authenticate-with-Checkr)

    - [Create a Candidate](#section/Getting-Started/Create-a-Candidate)

    - [Create an Invitation](#section/Getting-Started/Create-an-Invitation)

    - [Retrieve the Report](#section/Getting-Started/Retrieve-the-Report)

    - [Parse the results](#section/Getting-Started/Parse-the-results)


    <div class="alert alert-info">
      <b>Note: </b>Please reach out to <a href="mailto:clients@checkr.com">clients@checkr.com</a> before you start integrating with our API to learn about our approval process for production.
    </div>


    ## Get credentialed


    Before gaining access to the Checkr APIs and Dashboard, you must be properly
    credentialed to request background checks. Work with your Customer Support
    Representative to provide the required documentation, and complete the
    credentialing process.


    For more information, see [Getting
    credentialed](#section/Introduction/Get-credentialed) above.


    ## Get your API key


    Once you have access set up to log into Checkr, go to [Developer
    Settings](https://dashboard.checkr.com/account/developer_settings) in the
    Checkr Dashboard. Click <b>Create Key > Secret </b>to generate a new Secret
    Key for your staging environment.


    <div class="alert alert-info">

    <b>Note: </b>The Checkr Dashboard also lists access to our legacy Test
    Secret and Test Publishable Keys. Be certain to use the (live) Secret  key,
    and not the Test Secret key in your staging enviroment.

    </div>


    Your production API key is also available from this [Developer
    Settings](https://dashboard.checkr.com/account/developer_settings) page.
    Note that your production key will not be enabled for Reports until you
    contact clients@checkr.com and request that your account be enabled for live
    requests.


    For more information on using Checkr's Staging environment, see the [Staging
    Accounts](#section/Staging-Accounts) section below.


    ## Set up a local API client


    Checkr provides support for several API clients, allowing you to explore the
    Checkr APIs. Download and install
    [Postman](https://www.postman.com/downloads/) or
    [Insomnia](https://docs.insomnia.rest/), then click the buttons below to
    install the Checkr APIs. Or use our [OAS3 API
    spec](https://api.redocly.com/registry/bundle/checkr/Checkr%20Public%20API/v1/openapi.yaml)
    to work with the tooling of your choice.


    [![Run in
    Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/17709267-82bc3552-fc3c-4cf0-a11a-071ba6beb5bd?action=collection%2Ffork&collection-url=entityId%3D17709267-82bc3552-fc3c-4cf0-a11a-071ba6beb5bd%26entityType%3Dcollection%26workspaceId%3D46c6cc7f-9630-4414-bd15-0b2cfc79b7b9)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![Run
    in
    Insomnia}](https://insomnia.rest/images/run.svg)](https://insomnia.rest/run/?label=Checkr&uri=https%3A%2F%2Fapi.redocly.com%2Fregistry%2Fbundle%2Fcheckr%2FCheckr%2520Public%2520API%2Fv1%2Fopenapi.yaml)


    ### Configure your API client


    Configure your API client using the API key from the [Developer
    Settings](https://dashboard.checkr.com/account/developer_settings) page in
    your Checkr Dashboard. Then use your local client to execute any Checkr API
    requests. We provide sample parameters and payloads throughout these
    developer guides to help you in your journey.


    <b>Note: </b>Checkr APIs are updated frequently. Use your selected method to
    reimport our APIs to evaluate our most recent versions.


    Checkr API host URLs:
      * Production: https://api.checkr.com/v1
      * Staging (if you have been given access): https://api.checkr-staging.com/v1

    ## Authenticate with Checkr


    <PullRight>


    ##### Example authentication


    ```sh

    $ curl https://api.checkr.com \
        -u YOUR_SECRET_API_KEY:
    ```

    </PullRight>


    Use HTTP Basic authentication to authenticate with Checkr, with your API key
    as the username and an empty password. When using `curl`, use the `-u`
    option to specify your API key. (Note the colon following the API key in the
    examples. It tells cURL to send an empty password.)


    Note that staging environment requests are free and return fake data. Once
    you are production-ready, please email clients@checkr.com and we will enable
    live requests.


    ## Create a Candidate


    <PullRight>


    ##### Create a Test Candidate


    ```sh

    $ curl -X POST https://api.checkr.com/v1/candidates \
        -u [YOUR_API_KEY]: \
        -d first_name=Michael \
        -d middle_name=Gary \
        -d last_name=Scott \
        -d email=michael.scott@dundermifflin.com \
        -d phone=2035408926 \
        -d zipcode=06831 \
        -d dob=1964-03-15 \
        -d ssn=111-11-2001 \
        -d driver_license_number=981736076 \
        -d driver_license_state=CT \
        -d copy_requested=true \
        -d 'work_locations[][country]=US'
    ```

    </PullRight>


    Create a Candidate by passing the required PII to Checkr.


    Remember to replace `"YOUR_SECRET_API_KEY"` with <b>your </b> Secret API key
    in the cURL example on the right.

    See [Candidates](#tag/Candidates) for more details on creating Candidates.


    **Notes:**


    - The Candidate object represents the candidate to be screened.

    - The `copy_requested` boolean captures whether or not the candidate has
    requested a copy of their background check upon completion. If `true`,
    Checkr will automatically send a copy of the background check to the passed
    email address on your behalf.

    - If using a [Checkr-hosted candidate
    experience](#section/Introduction/Checkr-hosted-candidate-experience), the
    only strictly required parameter for creating a Candidate in Checkr is
    `email`. We recommend that the candidate's phone number also be provided
    when creating the Candidate object, as it will be required to authenticate
    the candidate when they log into the Candidate Portal.

    - If using a [custom self-hosted
    flow](#section/Introduction/Self-hosted-candidate-experience), the required
    attributes include `first_name`, `middle_name` or `no_middle_name`,
    `last_name`, and `dob`.

    - If the Report's package includes any criminal check, `ssn` and `zipcode`
    are required attributes.

    - If requesting a Motor Vehicle Report, Checkr requires
    `driver_license_number` and `driver_license_state`.

    - Other Candidate-specific parameters are defined in the [Candidate
    resource](#operation/createCandidate) below.


    ### Candidate creation response


    <PullRight>


    ##### Test Candidate creation response


    ```json

    {
      "id":"551564b7865af96a28b13f36",
      "object":"candidate",
      "uri":"/v1/candidates/551564b7865af96a28b13f36",
      "created_at":"2018-08-17T01:08:18Z",
      "first_name":"Michael",
      "last_name":"Scott",
      "middle_name":"Gary",
      "mother_maiden_name":null,
      "dob":"1964-03-15",
      "ssn":"XXX-XX-2001",
      "email":"michael.scott@dundermifflin.com",
      "zipcode":"06831",
      "phone":"2035408926",
      "driver_license_state":"CT",
      "driver_license_number":"981736076",
      "copy_requested":true,
      "previous_driver_license_state":null,
      "previous_driver_license_number":null,
      "adjudication":null,
      "custom_id":null,
      "no_middle_name":false,
      "report_ids":[],
      "geo_ids":[]
    }

    ```

    </PullRight>


    Checkr responds immediately with the resulting Candidate object, which
    includes the ID of the Candidate and a URI that points to the new Candidate
    object. Store the ID for this new Candidate object, which you'll need when
    creating a Report in the next step.


    <!--<RedocResponse pointer={"#/components/responses/CandidateCreated"} />-->


    ## Create an Invitation


    <PullRight>


    ##### Create a Test Invitation


    ```sh

    $ curl -X POST https://api.checkr.com/v1/invitations \
          -u [YOUR_API_KEY]: \
          -d candidate_id=551564b7865af96a28b13f36 \
          -d package=dunder_mifflin_executive \
          -d node=CHLD_e7c3ab7bf4ad \   // only if nodes exist on the account
          -d work_locations[][state]=CA \   // state required, city optional
          -d work_locations[][city]=San+Francisco
    ```


    </PullRight>


    Use the [Invitations](#tag/Invitations) resource to order a background check
    using the Checkr-Hosted Apply Flow. Checkr will send an email to the
    candidate, inviting them to provide their information and consent. Once the
    invitation is completed a Report is automatically created. The invitation is
    valid for 7 days, during which Checkr will send a follow-up notice every 24
    hours, reminding the candidate to complete their invitation. If 7 days pass
    and the candidate has not yet completed the invitation, the invitation will
    expire and you must create a new invitation to proceed with the candidate.


    Parameters required to [Create an invitation](#operation/createInvitation):


    *   `candidate_id`: the ID of the candidate for whom the Invitation is
    created.

    *   `package`: the Package to use for the background check.

    *   `work_locations`: the candidate's work location, described using
    country, state, and city. (ISO-3166 alpha-2 format country code, two letter
    state code, and the name of the city)

    *   `node` (optional): the `custom_id` of the node associated with the
    background check. Required if any nodes exist on the account.


    The `work_location` parameter is used by Checkr to determine compliance
    requirements for background check reports ordered through the Checkr Hosted
    Apply Flow. Checkr uses the candidate work location to apply the appropriate
    state- and city-based fair hiring laws, disclosures, and adverse action
    procedures. If a city is not provided, Checkr uses the state-based
    regulation.


    ### Invitation creation response


    <PullRight>


    ##### Test Invitation creation response


    ```json

    {
        "id": "551564b7865af96a28b13f36",
        "object": "invitation",
        "uri": "/v1/invitations/551564b7865af96a28b13f36",
        "invitation_url":
    "https://apply.checkr.com/invite/try-checkr/290f9d6d6e46/test",
        "status": "pending",
        "created_at": "2015-05-14T17:45:34Z",
        "expires_at": "2015-05-21T17:45:34Z",
        "completed_at": null,
        "deleted_at": null,
        "package": "dunder_mifflin_executive",
        "candidate_id": "551564b7865af96a28b13f36",
        "report_id": null
        "tags": []
    }

    ```


    </PullRight>


    Use the Checkr Candidate ID you have retrieved from [Create a
    Candidate](#section/Getting-Started/Create-a-Candidate), the Package “slug”
    (as selected in step [Selecting Packages](#tag/Working-with-Packages)), and
    the candidate’s work location to create an Invitation.


    <b>Note: </b>Checkr requires Candidates to provide only information that is
    required for the screenings contained in the Package (such as SSN for
    criminal screenings, driver license number and state for MVR).



    Store the resulting Report ID and any of the requested Screening IDs. The ID
    for this new Report object is required to retrieve the Report. (Checkr will
    return IDs for all Screenings included in the requested Package. All other
    Screening IDs will be returned `null`.)


    ## Listen for webhooks


    <PullRight>


    ##### Test webhook response


    ```json

    {
      "id": "507f1f77bcf86cd799439011",
      "object": "event",
      "type": "report.completed",
      "created_at": "2014-01-18T12:34:00Z",
      "data": {
        "object": {
          "id": "4722c07dd9a10c3985ae432a",
          "object": "report",
          "uri": "/v1/reports/532e71cfe88a1d4e8d00000d",
          "created_at": "2014-01-18T12:34:00Z",
          "received_at": "2014-01-18T12:34:00Z",
          "status": "complete",
          "result": "clear",
          "package": "driver_pro",
          "source": "api",
          "candidate_id": "e44aa283528e6fde7d542194",
          "ssn_trace_id": "539fd88c101897f7cd000001",
          "sex_offender_search_id": "539fd88c101897f7cd000008",
          "national_criminal_search_id": "539fd88c101897f7cd000006",
          "county_criminal_search_ids": [
            "539fdcf335644a0ef4000001",
            "532e71cfe88a1d4e8d00000c"
          ],
          "state_criminal_search_ids": [
            "539fdcf335644a0ef4000003",
            "532e71cfe88a1d4e8d000004"
          ],
          "motor_vehicle_report_id": "539fd88c101897f7cd000007"
        }
      },
      "account_id": "8e122cc56b8fa82d33c6118a"
    }

    ```

    </PullRight>


    If webhooks are enabled, Checkr pushes a status change webhook event to the
    customer account's webhook URL with the structure shown in the Test Webhook
    Response to the right.


    Use the resulting Report status (or other data elements) to execute
    subsequent workflows in your application or program.


    ## Retrieve a Report


    <PullRight>


    ##### Retrieve a Report


    ```sh

    $ curl -X GET https://api.checkr.com/v1/reports/a13f4827d8711ddc75abc56ct

    ```

    </PullRight>


    Retrieve the results of a report by performing a GET request to the specific
    URL of the report. For example, executing the command to the right retrieves
    the Report object below it.


    Retrieve the Report created in the previous step by using your Secret API
    key and Report ID into the cURL command shown to the right.


    ### Retrieve Report response


    <PullRight>


    ##### Retrieve Report response


    ```JSON

    {
      "id": "a13f4827d8711ddc75abc56ct",
      "object": "report",
      "uri": "/v1/reports/a13f4827d8711ddc75abc56ct",
      "status": "complete",
      "result": "clear",
      "created_at": "2018-08-17T01:10:21Z",
      "completed_at": "2018-08-17T01:12:26Z",
      "revised_at": null,
      "upgraded_at": null,
      "turnaround_time": 52,
      "package": "dunder_mifflin_executive",
      "tags": [],
      "adjudication": null,
      "assessment": null,
      "source": "api",
      "candidate_id": "551564b7865af96a28b13f36",
      "county_criminal_search_ids": [],
      "municipal_criminal_search_ids": [],
      "document_ids": [],
      "federal_criminal_search_id": "5b64c62b67abb4002d3ec763",
      "global_watchlist_search_id": "5b64c5cf67abb400353ec6f7",
      "national_criminal_search_id": "5b64c5cf67abb400353ec6f5",
      "personal_reference_verification_ids": [],
      "professional_reference_verification_ids": [],
      "sex_offender_search_id": "5b64c5cf67abb400353ec6f6",
      "ssn_trace_id": "5b64c5cf67abb400353ec6f3",
      "state_criminal_search_ids": [],
      "terrorist_watchlist_search_id": "5b64c5cf67abb400353ec6f7",
      "facis_search_id": null,
      "arrest_search_id": null,
      "motor_vehicle_report_id": null,
      "self_disclosure_ids": []
    }

    ```

    </PullRight>


    Note that the Report is now a full Report with a status of `clear`,
    indicating that no violations or criminal background have come up for this
    Report.


    See [Embedding Resources](#section/Reference/Embedding-Resources) if you
    wish to embed the full contents of individual screenings (SSN Trace, Sex
    Offender Registry Search, Global Watchlist Search) in the server response.
    You can also retrieve those resources using the IDs provided in the server
    response.


    ## Parse the results


    Webhook responses and completed Reports both contain the same information
    about the results of a criminal screening: the `status` of the report which
    can be `complete`, the `result` of the report which can be `null`, `clear`,
    or `consider`, and the assessment of the report, which can be `null`,
    `eligible`, `review`, or `escalated`.


    A completed report with result of `clear` can be interpreted as that report
    having no items listed on the candidate's record that must be reviewed. A
    result of `consider` indicates that there are items on the candidate's
    record that may require consideration.


    A report contains an `assessment` if the account has Assess enabled. The
    assessment is returned as `eligible`, `review`, or `escalated`, according to
    the customer rules defined in Assess. For more information, see
    [Assess](https://help.checkr.com/hc/en-us/articles/360051026954-Assess) in
    the Checkr User Guides.


    In maintaining a compliant process as per FCRA legislation and EEOC
    guidelines, Checkr does not make any eligibility or hiring decisions
    (adjudicate) on our customers' behalf.


    # Staging Accounts


    Checkr provides customers with the option of a “staging account” that can be
    used to test your integration and use the Checkr Dashboard prior to
    deploying your integration to your production account. The staging account
    can be set up to match the settings from your production account and allows
    for submission of background check orders without incurring any billable
    events. To accomplish this, Checkr uses candidate “mocked” data setups that
    result in predefined background check results, mimicking the most common
    outcomes you will encounter in your production account.


    Once your staging account has been created, Checkr will provide you with a
    document containing this mocked candidate data.


    ## Request a staging account


    Use our [Submit a request
    form](https://help.checkr.com/hc/en-us/requests/new?ticket_form_id=360004180714)
    to request a staging account. Enter the following information:


    1. <b>How can we help?: </b>select "I need assistance configuring my
    account", then select "Other".


    2. <b>Topic: </b>enter "Staging account setup request"


    3. <b>Description: </b>Please enter the following information:

        - Admin user for staging: <i>Provide the email address to be used as the initial Admin account for this requested staging account.</i>

        - Checkr production Admin: <i>Provide the email address for one of the Admin users of your Checkr Dashboard account.</i>

    New staging accounts are typically created within 1-2 business days of a
    submitted request.


    ## Configure your staging account


    Upon successful creation of the staging account, the email address specified
    in the [staging account request
    submission](https://help.checkr.com/hc/en-us/requests/new?ticket_form_id=360004180714)
    will receive an email from Checkr providing a temporary password to the
    account and allowing the recipient to create a permanent password. This
    initial user will have an Admin user role which allows them to invite other
    users to the account as they see fit.


    Once you have Admin access to the staging account, confirm you are using the
    “Live” mode (do NOT use “Test” mode). Then go to <b>Account Settings >
    Developer Settings</b>. On this page, in the “API keys” section click
    <b>Create Key</b> and choose <b>Secret</b>. Use the resulting API key to
    authenticate all of your API calls to this staging account.


    To enable webhooks for the account, from the <b>Account Settings > Developer
    Settings </b> page scroll down to <b>New Webhook</b>. Enter a URL, select
    <b>Live</b>, and click <b>Add </b>to create a new webhook. You may also use
    this page to select the webhook notifications you wish to receive from
    Checkr.


    ![](images/AccountSettingsDevelopersWebhooks.png)


    The staging account’s API calls, responses, and webhooks follow the same
    pattern and response structure as those of the production environment.


    <b>Note: </b>The staging account uses the API host URL:
    https://api.checkr-staging.com/v1 for all calls.


    ### Testing Checkr's functions and features


    To facilitate building with the Checkr API, Checkr staging accounts support
    a number of mocked candidate profiles that will return predictable results.
    This allows you to test a number of different report outcomes and other
    workflows before moving your integration to your production account. To
    ensure the desired outcome, you must enter the candidate data exactly as
    provided in this mocked candidate data document or the resulting report will
    remain in `pending` status indefinitely.


    Reports created in the staging account will typically complete within
    minutes of submission, though this can vary depending upon the relative load
    on the staging environment servers.


    <b>Note: </b>Checkr’s product and development teams also use the staging
    environment to test new functionality. It is therefore possible that one or
    more of the mocked candidate records may not return the expected results. If
    you encounter unexpected returns for a mock data candidate, please test a
    different candidate from the mocked data document with a similar predefined
    outcome. If the problem persists, reach out to your Checkr Customer Support
    Manager to troubleshoot the issue.


    ## Uses and limitations of the staging account


    The staging account is built to mimic the production environment and allow
    developers to build without running production background screenings and
    incurring a charge. Staging account uses mocked candidate data, and does not
    support the following functionality available in the production environment:


    - Post adverse action is not supported

    - Invitations do not expire

    - Invoices are not created

    - Analytics are not available


    Please reach out to your Checkr Account Executive or Customer Success
    Manager if you require additional status, report, or state test cases.



    # Webhooks


    <PullRight>


    ##### Generic webhook payload examples


    _`include_object` is ON_


    ```json

    {
      "id": "1002d6bca6acdfcbb8442178",
      "object": "event",
      "type": "object.event",
      "created_at": "2018-08-17T01:12:43Z",
      "webhook_url": "https://notify.company.com/checkr",
      "data": {
        "object": {
          "id": "a13f4827d8711ddc75abc56ct",
          "object": "object",
          "uri": "/v1/objects/a13f4827d8711ddc75abc56ct",
          "created_at": "2018-08-17T01:10:21Z",
          "completed_at": "2018-08-17T01:12:26Z",
          // [...] full object included
        }
      }
    }

    ```

    </PullRight>


    Use webhooks to receive updates on objects created with the API and to kick
    off additional workflows based on these events. Each time an event that you
    subscribed to occurs, Checkr submits a POST request to the designated
    webhook URL with information about the event. When the `include_object`
    option is ON, it also includes the related object.


    The User-Agent for the requests will have the prefix `Checkr-Webhook/`.


    To receive webhooks, use the Checkr Dashboard to configure a Webhook URL in
    the [Developer
    Settings](https://dashboard.checkr.com/account/developer_settings).  A
    maximum of two webhook URLs may be configured per environment (test and
    live). For more information about setting up webhooks, see the [Account
    Settings
    article](https://help.checkr.com/hc/en-us/articles/360010450474-Account-Settings#developer)
    in the Checkr Help Center.


    ## Attributes


    <PullRight>


    _`include_object` is OFF_



    ```json

    {
      "id": "1002d6bca6acdfcbb8442178",
      "object": "event",
      "type": "object.event",
      "created_at": "2018-08-17T01:12:43Z",
      "webhook_url": "https://notify.company.com/checkr",
      "data": {
        "object": {
          "id": "a13f4827d8711ddc75abc56ct",
          "object": "object",
          "uri": "/v1/objects/a13f4827d8711ddc75abc56ct"
        }
      }
    }

    ```

    </PullRight>


    | Parameter | Type | Description |

    |-----------|------|-------------|

    | `id` | string | ID of the event. |

    | `object` | string | Defines the object type: `event`. |

    | `type` | string | The type of event. Values include: `candidate.created`,
    `report.completed`. |

    | `created_at` | timestamp iso 8601 format | Timestamp for the event. |

    | `webhook_url` | string | Webhook URL. |

    | `data` | hash | Object associated with the event. |

    | `include_object` | boolean | Should the related object be attached to
    webhook payload. |


    ## Supported webhook URLs


    | Type | Format | Description |

    |------|--------|-------------|

    | `HTTP` / `HTTPS` |
    `http(s)://(<user>:<password>@)<hostname>/<path>`<br>E.g.:
    `https://notify.company.com/checkr` | **Notes:** The endpoint to be reached
    must be public.<br>HTTP can be  used only in a Test environment. Live
    environment webhooks must be HTTPS.<br>Basic Auth is supported by adding
    `username:password@` in front of the hostname, credentials must be URL
    escaped. |

    | `SNS` |
    `sns://<key_id>:<access_key>@<region>/<topic_owner>/<topic_name>`<br>E.g.:
    `sns://AKI95AMUAD5K:a2n66fVKX7%2BYJKid3@us-east-1/12048/checkr` | AWS Simple
    Notification System (SNS)<br>**Notes:** Access Key must have <b>only </b>the
    Publish to SNS right in IAM.<br>Credentials must be URL escaped. |


    ## Responding to webhooks


    Your endpoint should respond to webhooks as quickly as possible. To
    acknowledge receipt of a webhook, your endpoint must return a `2xx` HTTP
    status code. This status code should only indicate receipt of the message,
    not acknowledgment that it was successfully processed by your system. Any
    other information returned in the response headers or response body is
    ignored.


    If a webhook is not successfully received for any reason, Checkr will
    continue trying to send it every minute for 10 minutes, then every hour for
    24 hours.


    Webhook logs can be found on the dashboard:
    https://dashboard.checkr.com/webhook_logs



    ## Order of events


    Checkr does not guarantee the delivery of events in the order in which they
    are generated. For example, a report with a `result` of `consider` might
    generate the follow events:


    ```

    report.completed

    report.engaged

    ```


    Your integration should not expect the delivery of these events to be in
    this order and should handle this accordingly. For example, you can fetch
    the report object, and look at `report.assessment` if you happen to receive
    the `report.completed` event later.


    ## Securing webhooks


    For greater security, verify that the requests you receive come from Checkr.


    We pass along a hash signature with each request in the header
    X-Checkr-Signature. The hash signature is generated with the HMAC algorithm,
    using your API key as a key and SHA256 digest mode. When you receive a
    request, you can compute a hash and ensure that the one from Checkr matches.


    **Note:** Accounts without an API key will have X-Checkr-Signature set to
    "Please create an API key to check the authenticity of our webhooks."


    **Example hash signature computation:**


    `printf "$compact_json" | openssl sha256 -hmac "$PARTNER_APP_CLIENT_SECRET"`


    In this example, `$compact_json` is the “non-pretty print” version of a JSON
    object. For example, you can get the compact version of a json file with the
    `jq` tool with: `compact_json=$(jq -c < example_response.json)`.


    Code examples on how to do this can be found
    [here](https://github.com/checkr/webhook-verification-examples/).


    ## Guarding against duplicate and missed report notifications


    While webhooks are helpful for updates, they are not foolproof. In some
    cases, report updates can be sent in rapid succession based on multiple
    events within the Checkr environment, and may be "mis-heard". For robust
    webhook handling, we recommend that you account for the following:


    - Duplicate reports (idempotency)

    - Webhook misses


    As a best practice, Checkr recommends that you build a safety net to account
    for duplicate reports. One option might be to build in a function ahead of
    the status tracker, which copies only one `report.completed` update per
    Candidate or Report. This works well with an additional time threshold
    assigned. (For example, a report is only considered a duplicate if it's
    within 60 minutes of a previous iteration of that report.)


    To address missed webhook updates, you may also consider adding a function
    to send an alert if no `report.completed` update is sent within a certain
    number of days.


    ## Candidate events


    <PullRight>


    ##### Example Candidate event webhook payload


    ```json

    {
      "id": "58f8e550d991bb000db04005",
      "object": "event",
      "type": "candidate.created",
      "created_at": "2017-04-20T16:44:00Z",
      "webhook_url": "https://yourcompany.com/checkr/incoming",
      "data": {
        "object": {
          "id": "c373384e71a9a02098cb7421",
          "object": "candidate",
          "uri": "/v1/candidates/e44aa283528e6fde7d542194",
          "created_at": "2017-04-18T18:37:34Z",
          "first_name": "John",
          "last_name": "Smith",
          "middle_name": "Alfred",
          "mother_maiden_name": null,
          "dob": "1990-10-31",
          "ssn": "XXX-XX-1111",
          "email": "john.smith@example.org",
          "zipcode": "48071",
          "phone": "5555555555",
          "driver_license_state": "CA",
          "driver_license_number": "F111111",
          "copy_requested": true,
          "previous_driver_license_state": null,
          "previous_driver_license_number": null,
          "adjudication": "engaged",
          "custom_id": null,
          "no_middle_name": false,
          "report_ids": [
            "4722c07dd9a10c3985ae432a"
          ],
          "geo_ids": [],
          "metadata": {
            "custom_key": "custom_value"
          }
        }
      },
      "account_id": "e9b18321a51bdab376045be8"
    }

    ```

    </PullRight>


    | Event | Description |

    |-------|-------------|

    | `candidate.created` | A new Candidate has been created. |

    | `candidate.id_required` | An exception has been raised requiring a copy of
    the Candidate's identification. |

    | `candidate.driver_license_required` | An exception has been raised
    requiring a copy of the Candidate's driver license. |

    | `candidate.updated` | A Candidate has been updated. |

    | `candidate.pre_adverse_action` | An Adverse Action has been initiated on
    the Candidate. |

    | `candidate.post_adverse_action` | An Adverse Action has been completed on
    the Candidate. |


    ## Invitation events


    <PullRight>


    ##### Example Invitation event webhook payload


    ```json

    {
      "id": "1002d6bca6acdfcbb8442178",
      "object": "event",
      "type": "invitation.expired",
      "created_at": "2017-04-20T16:44:00Z",
      "webhook_url": "https://yourcompany.com/checkr/incoming",
      "data": {
        "object": {
          "id": "16241770f7f7be1c57c85176",
          "status": "expired",
          "uri": "/v1/invitations/16241770f7f7be1c57c85176",
          "invitation_url": "https://apply.checkr.com/invite/yourcompany/7499b8c558a6",
          "completed_at": null,
          "deleted_at": null,
          "expires_at": "2017-05-21T17:45:34Z",
          "package": "tasker_pro",
          "object": "invitation",
          "created_at": "2017-05-14T17:45:34Z",
          "candidate_id": "fcb0084f6cb2423c069a35b3",
          "report_id": null
        }
      },
      "account_id": "e9b18321a51bdab376045be8"
    }

    ```

    </PullRight>


    | Event | Description |

    |-------|-------------|

    | `invitation.created` | An Invitation has been created. |

    | `invitation.completed` | An Invitation has been completed. |

    | `invitation.expired` | An Invitation has expired. |

    | `invitation.deleted` | An Invitation has been canceled. |


    ## Verification events


    <PullRight>


    ##### Example Verification event webhook payload


    ```json

    {
      "id": "id",
      "object": "event",
      "type": "verification.processed",
      "created_at": "2018-07-12T00:06:40Z",
      "data": {
        "object": {
          "id": "verification_id",
          "object": "verification",
          "uri": "/v1/reports/report_id/verifications/verification_id",
          "created_at": "2018-07-12T00:06:39Z",
          "completed_at": "2018-07-12T00:17:02Z",
          "processed_at": "2018-07-12T00:17:04Z",
          "verification_type": "ssn_confirmation",
          "verification_url": "https://verifications.checkr.com/verifications/verification_id",
          "report_id": "report_id"
        }
      },
      "account_id": "account_id"
    }

    ```

    </PullRight>


    Verification events are issued during the
    [Exception](https://help.checkr.com/hc/en-us/articles/217114247-Exceptions-Addressing-data-discrepancies-in-reports)
    process when a candidate is issued or has responded to a request to verify
    submitted PII.


    Verification events are issued for exceptions which occur to ask candidates
    to confirm their Social Security Number, Driver License information, or
    Education and Employment Verification information.


    **Note:** When verifications are automatically processed, and do not require
    manual input, the `verification.processed` webhook is sent immediately after
    the `verification.completed` webhook. These two webhooks may not arrive “in
    order”.


    | Event | Description |

    |-------|-------------|

    | `verification.created` | A verification is created and a request to upload
    a document or enter the data is forwarded to the candidate. |

    | `verification.completed` | A document is uploaded or data is entered by
    the candidate. |

    | `verification.processed` | The data gathered by the verification is
    processed manually or automatically and a decision is made for the
    continuation of the background check. |


    ## Report events


    <PullRight>


    ##### Example Report event webhook payload


    ```json

    {
      "id": "507f1f77bcf86cd799439011",
      "object": "event",
      "type": "report.completed",
      "created_at": "2014-01-18T12:34:00Z",
      "webhook_url": "https://yourcompany.com/checkr/incoming",
      "data": {
        "object": {
          "id": "4722c07dd9a10c3985ae432a",
          "object": "report",
          "uri": "/v1/reports/532e71cfe88a1d4e8d00000d",
          "created_at": "2014-01-18T12:34:00Z",
          "received_at": "2014-01-18T12:34:00Z",
          "status": "complete",
          "result": "clear",
          "package": "driver_pro",
          "candidate_id": "e44aa283528e6fde7d542194",
          "ssn_trace_id": "539fd88c101897f7cd000001",
          "sex_offender_search_id": "539fd88c101897f7cd000008",
          "national_criminal_search_id": "539fd88c101897f7cd000006",
          "county_criminal_search_ids": [
            "539fdcf335644a0ef4000001",
            "532e71cfe88a1d4e8d00000c"
          ],
          "state_criminal_search_ids": [
            "539fdcf335644a0ef4000003",
            "532e71cfe88a1d4e8d000004"
          ],
          "motor_vehicle_report_id": "539fd88c101897f7cd000007"
        }
      },
      "account_id": "e9b18321a51bdab376045be8"
    }

    ```

    </PullRight>


    | Event | Description |

    |-------|-------------|

    | `report.created` | A new Report has been created. |

    | `report.updated` | A Report has been updated while the background check is
    run. This event is triggered on select update events, which include:
    <ul><li>Report Estimated Completion Time changed</li><li>Drug Screening
    update status event created</li></ul> |

    | `report.canceled` | A Report has been canceled. |

    | `report.upgraded` | A Report has been upgraded. Upgrades can be triggered
    either from an API call or from the Dashboard ("Upgrade" button). This is
    useful if you want to run a package (such as an MVR) and then upgrade it on
    completion (for example: add a County Criminal Search). |

    | `report.completed` | A Report has been completed. |

    | `report.suspended` | A Report has been suspended. Checkr is waiting for
    the candidate to provide additional documentation. |

    | `report.resumed` | A Report has resumed. (The candidate has provided
    documentation to a previously "suspended" Report.) |

    | `report.disputed` | A Report has been disputed by a candidate. Once a
    dispute has been completed, Checkr will trigger the `report.completed`
    webhook again with the appropriate Report status. |

    | `report.pre_adverse_action` | The Pre-Adverse Action notice has been sent
    to the candidate of that report. |

    | `report.post_adverse_action` | The Post-Adverse Action notice has been
    sent to the candidate of that report. |

    | `report.engaged` | A Report has been adjudicated as "engaged". Use this
    event to track either all candidates you have officially engaged, or simply
    those candidates with a "consider" background check report that you have
    engaged. This can be triggered either from an API call or from the dashboard
    ("Engage" button). |


    ## Adverse Action events


    <PullRight>


    ##### Example Adverse Action event webhook payload


    ```json

    {
      "id": "5c4fee84d5abd60049eaa4fe",
      "object": "event",
      "type": "adverse_action.notice_not_delivered",
      "created_at": "2019-01-29T06:11:16Z",
      "data": {
        "object": {
          "id": "5c4f46eb805e59e228baacdd",
          "object": "adverse_action",
          "uri": "/v1/adverse_actions/5c4f46eb805e59e228baacdd",
          "status": "pending",
          "created_at": "2019-01-28T18:16:11Z",
          "canceled_at": null,
          "post_notice_scheduled_at": null,
          "post_notice_ready_at": "2019-02-04T18:16:11Z",
          "delivery": {
            "state": "error",
            "updated_at": "2019-01-29T06:11:15Z",
            "reason": "No MX for bad-email-domain-client.com"
          },
          "individualized_assessment_engaged": false,
          "report_id": "report_id",
          "adverse_items": [
            {
              "id": "62532b9f6dd2279acc5eb3574bad5bc085892ecc",
              "object": "adverse_item",
              "text": "** ACCIDENT **"
            },
            {
              "id": "418759b62961971c0ce8d7a6858b6c6f457400d5",
              "object": "adverse_item",
              "text": "** ACCIDENT **"
            },
            {
              "id": "e911042a437d735bbcbb6a98ab500bc62fc2b88e",
              "object": "adverse_item",
              "text": "FAILURE TO WEAR SEAT BELT"
            },
            {
              "id": "09d83492f6a15b41e3e5c48a970df3a4f53e660c",
              "object": "adverse_item",
              "text": "OBSTRUCTING PASSAGE OF OTHER VEHIC"
            }
          ]
        }
      },
      "account_id": "account_id"
    }

    ```

    </PullRight>


    | Event | Description |

    |-------|-------------|

    | `adverse_action.notice_not_delivered` | The Adverse Action notice is
    confirmed to be undeliverable to the candidate of that report. User action
    is required. |


    ## Package events


    <PullRight>


    ##### Example Package event webhook payload


    ```json

    {
      "id": "1002d6bca6acdfcbb8442178",
      "object": "event",
      "type": "package.created",
      "created_at": "2017-04-20T16:44:00Z",
      "webhook_url": "https://yourcompany.com/checkr/incoming",
      "data": {
        "object": {
          "id": "e44aa283528e6fde7d542194",
          "object": "package",
          "uri": "/v1/packages/e44aa283528e6fde7d542194",
          "apply_url": "https://apply.checkr.com/apply/customer-services-inc/532c20ea819b",
          "created_at": "2014-01-18T12:34:00Z",
          "deleted_at": null,
          "name": "Driver Pro",
          "slug": "driver_pro",
          "price": 6500,
          "screenings": [
            {
              "type": "ssn_trace",
              "subtype": null
            },
            {
              "type": "county_criminal_search",
              "subtype": "7years"
            },
            {
              "type": "national_criminal_search",
              "subtype": "standard"
            },
            {
              "type": "sex_offender_search",
              "subtype": null
            },
            {
              "type": "global_watchlist_search",
              "subtype": null
            },
            {
              "type": "motor_vehicle_report",
              "subtype": null
            }
          ]
        }
      }
    }

    ```

    </PullRight>


    | Event | Description |

    |-------|-------------|

    | `package.created` | A Package has been created. |

    | `package.updated` | A Package has been updated. |

    | `package.deleted` | A Package has been deleted. |


    ## Continuous Check events


    <PullRight>


    ##### Example Continuous Check event webhook payload


    ```json

    {
      "id": "6164822db059440001101d93",
      "object": "event",
      "type": "continuous_check.confirmation_required",
      "created_at": "2021-10-11T18:27:57Z",
      "data": {
        "object": {
          "object": "continuous_check",
          "id": "d56cdf24dca36bd1cb65aebe",
          "candidate_id": "7c445ec8dd78d534436c6ead",
          "created_at": "2021-09-02T17:22:17Z",
          "node": "zpy8orej4r614ize",
          "type": "mvr",
          "work_locations": [
            {
              "country": "US",
              "state": "CA",
              "city": "San Francisco"
            }
          ]
        }
      },
      "account_id": "57f79ea983381984e6a6e61a"
    }

    ```


    </PullRight>


    | Event | Description |

    |-------|-------------|

    | `continuous_check.subscription_error` | An error occurred when attempting
    to enroll a Candidate in Continuous MVR. |

    | `continuous_check.confirmation_required` | A Candidate has been unenrolled
    from Continuous MVR due to stale or invalid PII. The Candidate sumbitted
    updated information through the Checkr exception process. Action is required
    to re-enroll the Candidate. |


    # Checkr Partners


    Checkr partners with leading Staffing, On-Demand, Applicant Tracking
    Systems, and HR Systems to bring background checks to your customers. As a
    Checkr Partner, you can leverage the Checkr API to seamlessly connect your
    customers' Checkr accounts and integrate the background check process into
    your applications. Checkr's self-serve sign-up flow is fast, easy, and
    allows your customers to start running background checks within minutes
    after their account is credentialed.


    If you are interested in partnering with Checkr, submit our <a
    href="https://checkr.com/become-a-partner" target="_blank">Checkr Partner
    Application form</a> to connect with our Business Development team.


    ## Checkr Partner Developer Guides


    Please see our <a href="https://docs.checkr.com/partners/"
    target="_blank">Checkr Partner Developer Guides</a> for more complete
    information on building your partner integration with Checkr, and allowing
    your customers to use Checkr functionality from within your app.


    # Advanced Features


    The Checkr API offers significant flexibility and opportunity for developers
    to build a unique background screening program tailored to their product or
    business needs. This section describes additional features and capabilities
    that our customers find valuable.


    ## Creating a fully custom apply flow


    Checkr allows customers to create fully custom application flows for their
    candidates, using the [Reports](https://docs.checkr.com/#tag/Reports)
    resource to build a self-hosted flow.


    In this flow, you must collect and store both the candidate’s information
    and their consent within your application. You must also provide candidates
    the appropriate state- and city-specific disclosures for each screening
    type. Once obtained, you must store your candidates’ consent to the
    background check, both to maintain proof that consent was granted, and to
    provide proof of consent for Checkr’s ongoing evaluation of customer
    compliance (annual compliance audits).


    Once all required information is present on the Candidate resource, creating
    a Report will initiate the background check.


    For more information on your obligations under FCRA, and Checkr’s
    responsibilities as a Consumer Reporting Agency (CRA), check out our
    [Compliance
    resources](https://help.checkr.com/hc/en-us/sections/203637107-Compliance)
    in the Help Center, particularly our articles about [obligations under
    FCRA](https://help.checkr.com/hc/en-us/articles/216557368-What-is-the-Fair-Credit-Reporting-Act-FCRA-)
    and [disclosures and
    authorizations](https://help.checkr.com/hc/en-us/articles/360000144867-Disclosure-and-authorization).


    <b>Note: </b>Some screening types are not supported with the Reports flow,
    such as credit checks and complex occupational health screenings. Other
    screening types, like employment and education verifications, are supported
    but not recommended with this flow, as they require significant data entry.
    For more information, see [Reports](/#tag/Reports) below.


    <PullRight>


    ##### Create a Report


    ```sh

    $ curl -X POST https://api.checkr.com/v1/reports \
        -u [YOUR_API_KEY]: \
        -d package=dunder_mifflin_executive \
        -d candidate_id=551564b7865af96a28b13f36
    ```

    </PullRight>


    Create a Report for an existing Candidate object. Use your API key and
    Candidate ID in the cURL command shown to the right.


    **Notes:**

     - The Report object represents a background check report.
     - Depending on the selected Package, a Report may include any number of requested Screenings.
     - Validation for inclusion of Candidate attributes (such as driver license number or SSN) is performed when you request a Report.
     - Information requirements depend strictly on the Package requested. (For more information, see [Packages](#tag/Packages), below.)
     - This object includes your certification to Checkr that appropriate disclosures and authorization (such as consent) have been obtained from your candidate.

    ### Report Creation response


    <PullRight>


    ##### Test Report creation response


    ```json

    {
      "id": "a13f4827d8711ddc75abc56ct",
      "object": "test_report",
      "uri": "/v1/reports/a13f4827d8711ddc75abc56ct",
      "status": "pending",
      "result": null,
      "created_at": "2018-08-17T01:10:21Z",
      "completed_at": null,
      "revised_at": null,
      "upgraded_at": null,
      "turnaround_time": null,
      "package": "dunder_mifflin_executive",
      "tags": [],
      "adjudication": null,
      "assessment": null,
      "candidate_id": "551564b7865af96a28b13f36",
      "county_criminal_search_ids": null,
      "document_ids": [
        "865de4344ac6d05209c83ef5"
      ],
      "federal_criminal_search_id": "5b64c62b67abb4002d3ec763",
      "global_watchlist_search_id": "5b64c5cf67abb400353ec6f7",
      "national_criminal_search_id": "5b64c5cf67abb400353ec6f5",
      "personal_reference_verification_ids": [],
      "professional_reference_verification_ids": [],
      "sex_offender_search_id": "5b64c5cf67abb400353ec6f6",
      "ssn_trace_id": "5b64c5cf67abb400353ec6f3",
      "state_criminal_search_ids": [],
      "terrorist_watchlist_search_id": "5b64c5cf67abb400353ec6f7",
      "facis_search_id": null,
      "arrest_search_id": null,
      "motor_vehicle_report_id": null
    }

    ```

    </PullRight>


    Checkr responds immediately with the full Report object, which includes the
    ID of the Report and a URI that points to the new Report object.


    Store the resulting Report ID and any of the requested Screening IDs. The ID
    for this new Report object is required to retrieve the Report. (Checkr will
    return IDs for all Screenings included in the requested Package. All other
    Screening IDs will be returned `null`.)


    ## Ordering Subscriptions or Continuous Check services


    In addition to offering "point-in-time" background checks, Checkr offers
    ongoing check services through our Subscription and Continuous Check
    products.


    A Subscription enables customers to order a repeating background check on a
    candidate on a user-defined time interval. Candidates must first complete an
    initial background check, after which customers may create a Subscription to
    repeat that background check on a user-defined interval. Subscriptions can
    be created, modified, or deleted both through the Checkr Dashboard and the
    Checkr API.


    For more information, see [Subscriptions: Run recurring background
    checks](https://help.checkr.com/hc/en-us/articles/227394707-Subscriptions-Run-recurring-background-checks)
    in the Checkr Help Center, or the [Subscription](#tag/Subscriptions)
    resource below.


    Continuous Checks allow customers to monitor their candidates' records.
    Continuous Check monitors real-time data sources, and looks for changes in a
    candidate's record. If Checkr identifies a change in the candidate's
    history, Continuous Check will automatically kick off follow-up searches in
    the appropriate jurisdictions and generate a new background check report.


    For more information, see [Continuous Check: The new standard of
    safety](https://help.checkr.com/hc/en-us/articles/360016337054-Continuous-Check-The-new-standard-of-safety)
    in the Checkr Help Center, or the [Continuous
    Checks](#tag/Continuous-Checks) resource below. For information on using the
    Checkr Dashboard to order a Continuous Check package on a candidate, see
    [Continuous checks](https://help.checkr.com/hc/en-us/articles/4411414294167)
    in the Checkr Help Center.


    While both Continuous Check and Subscriptions allow you to monitor your
    candidates' record, they should not be understood as equivalent to one
    another. Subscriptions generate a new report according to your defined
    cadence. Continuous Check continuously monitors multiple data sources, and
    generates a new report only if a change in your candidate's record is found.
    If you have additional questions about what makes the most sense for your
    business, please reach out to your Checkr Account Executive or Customer
    Success Manager.



    ## Upgrading a report


    Checkr also offers the ability to "upgrade" a report based on a prior set of
    screening results. The most common use case for this feature is to order a
    Package that includes both a Motor Vehicle Record (MVR) and a County
    Criminal Search. The report can be "upgraded" to run the County Criminal
    Search only after the MVR returns with a result. Checkr facilitates the
    following workflow:


    1.  Customer submits API request to Checkr for a candidate MVR

    2.  Checkr fulfills MVR, submits webhook response to customer with screening
    results

    3.  Customer determines if candidate passes or does not pass MVR
    requirements

    4.  If candidate passes MVR requirements:
        - Customer submits second API request for Checkr to "upgrade" the MVR report to a full criminal screening report, submitting a `POST` request to Checkr's `/reports/{id}` endpoint with the same Report ID and the new Package to request
        - Checkr conducts the criminal screening as described in [Overview of API calls and callbacks](#api-calls)
    5.  If the candidate does not pass MVR requirements:
        - Customer does not submit second API request to Checkr

    For more information on upgrading a Report, please see [Update an existing
    Report](#operation/updateReport) below.


    Please note: Only reports which include a Candidate SSN may be upgraded, and
    only within 30 days of Report creation. Attempts to upgrade a report which
    does not include an SSN will return a 400 error: "Candidate must have SSN to
    upgrade report." Requests to upgrade an older report will result in a 400
    error, "Report too old to upgrade."


    ## Configuring encryption for the SSN resource


    To use the [Candidate SSN endpoint](#operation/getCandidateSsn), you must
    generate an RSA key-pair for your account, and share the public key with
    Checkr. Checkr will use this public key to encrypt the SSN and securely
    share it with your integration.


    ### Generating a Key Pair


    Run the following command in a bash session to generate a private key. This
    will generate a file named private.pem containing your private key.



    `openssl genrsa -out private.pem -aes256 4096`



    Once your private key is generated, run the following command. This will
    generate a file named public.pem containing your public key.



    `openssl rsa -in private.pem -out public.pem -outform PEM -pubout`



    With both keys generated, send your public key to your Customer Success
    Manager using [Sendr](https://sendr.checkr.com/). **Do not share your
    private key. If your private key is exposed let us know as soon as possible
    so that we can secure your candidates' information.**


    # Reference


    ## Test Mode


    Checkr’s Test Mode is a legacy testing environment that provides very
    limited testing scenarios and should be used only to test basic
    connectivity. Use the [Staging Account](/#section/Staging-Account) described
    above for more in-depth testing.


    <b>Note: </b>Test Mode does not support Account Hierarchy or Work Location.
    If your account has this functionality enabled (check if “Account Hierarchy”
    tab exists under “Account Settings”), you cannot use Test Mode.


    The following test data is available for Test Mode:


    Test SSNs


    - Test SSNs affect the SSN trace and all criminal screenings.

    - SSN 111-11-2001 returns a criminal screening with status `clear`.

    - SSN 111-11-2002 returns a criminal screening with status `consider`.

    - SSN 111-11-2010 returns a criminal screening with status `pending`.


    Test driver licenses


    - Test driver licenses affect only the Motor Vehicle Report.

    - CA driver license with number F1112001 returns an MVR with status `clear`.

    - CA driver license with number F1112002 returns an MVR with status
    `consider`.


    The test environment's API calls, responses, and webhooks follow the same
    pattern and response structure as those of the production environment.



    ## Content-Type


    <PullRight>


    ##### Example request

    ```sh

    $ curl -X POST https://api.checkr.com/v1/candidates \
        -H "Content-Type: application/json" \
        -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
        -d '{"first_name": "John", "middle_name": "Alfred", "last_name": "Smith", "email": "john.smith@gmail.com"}'
    ```

    </PullRight>

    The `Content-Type` entity header is used to describe the media type of a
    resource. In requests, a `Content-Type` header tells the server what type of
    data is being sent. In responses, it tells the client what type of data the
    returned content actually is.


    Our default is to accept data as **application/x-www-form-urlencoded**
    (which is typical for most websites you interact with), but you are free to
    send other data types, like **application/json**, as it suits you. Simply
    specify the `Content-Type` in the header of the request.


    ## Embedding Resources


    <PullRight>


    ##### Example request


    ```sh

    $ curl -X GET https://api.checkr.com/v1/reports/59b650f567e1dd0f01422b92\
        ?include=candidate,ssn_trace,county_criminal_searches \
        -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    ```

    </PullRight>

    By default, an API response contains the requested resource, and provides
    the IDs of related resources. You can also request related resources to be
    embedded in the initial response.


    The `include` parameter specifies the names of resources that should be
    embedded in the response. Resources to embed must be comma-separated.


    ## Pagination


    <PullRight>


    ##### Example paginated request


    ```sh

    $ curl -X GET https://api.checkr.com/v1/candidates?page=2&per_page=25 \
        -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    ```


    ##### Example paginated payload

    ```json

    {
      "data": [
        {
          "id": "e44aa283528e6fde7d542194",
          "object": "candidate",
          "uri": "/v1/candidates/e44aa283528e6fde7d542194",
          "created_at": "2014-01-18T12:34:00Z",
          "first_name": "John",
          "middle_name": "Alfred",
          "no_middle_name": false,
          "last_name": "Smith",
          "mother_maiden_name": null,
          "email": "john.smith@gmail.com",
          "phone": "5555555555",
          "zipcode": "90401",
          "dob": "1970-01-22",
          "ssn": "XXX-XX-4645",
          "driver_license_number": null,
          "driver_license_state": null,
          "previous_driver_license_number": null,
          "previous_driver_license_state": null,
          "copy_requested": false,
          "custom_id": null,
          "report_ids": []
        },
        {
          "id": "8b6eb2bf554ebbef7b6f885a",
          "object": "candidate",
          "uri": "/v1/candidates/8b6eb2bf554ebbef7b6f885a",
          "created_at": "2014-01-18T12:34:00Z",
          "first_name": "Michael",
          "middle_name": null,
          "no_middle_name": true,
          "last_name": "Johnson",
          "mother_maiden_name": null,
          "email": "michael.johnson@gmail.com",
          "phone": "5555555555",
          "zipcode": "94407",
          "dob": "1970-01-22",
          "ssn": "XXX-XX-8605",
          "driver_license_number": null,
          "driver_license_state": null,
          "previous_driver_license_number": null,
          "previous_driver_license_state": null,
          "copy_requested": false,
          "custom_id": null,
          "report_ids": []
        }
      ],
      "object": "list",
      "next_href": null,
      "previous_href": "http://api.checkr.com/v1/candidates?page=1&per_page=25",
      "count": 27
    }

    ```


    </PullRight>


    Pagination is enabled for endpoints that return a list of records.


    There are two parameters that control pagination: `page`, which specifies
    the page number to retrieve, and `per_page`, which indicates how many
    records each page should contain. The default value of `per_page` is 25
    records.


    | Parameters      | Description      |

    | --------------- | ---------------- |

    | `page`      | **integer** <br> greater than or equal to 1 |

    | `per_page` | **integer** <br> between 0 and 100 |


    Paginated responses include the following attributes:


    | Attributes      | Description      |

    | --------------- | ---------------- |

    | `count`      | **integer** <br> the total number of items |

    | `data` | **array** <br> list of objects |

    | `next_href`      | **string** <br> URI to fetch the next page of results |

    | `object`      | **string** <br> "list" |

    | `previous_href`      | **string** <br> URI to fetch the previous page of
    results |


    ## Rate limiting


    <PullRight>


    ##### Example rate limiting request


    ```sh

    $ curl -I -X GET https://api.checkr.com/v1/reports/59b650f567e1dd0f01422b92
    \
        -u 83ebeabdec09f6670863766f792ead24d61fe3f9:

    < X-Ratelimit-Limit: 600

    < X-Ratelimit-Remaining: 9

    < X-Ratelimit-Reset: 2018-02-02T16:39:00Z

    ```

    </PullRight>

    In order to provide a high-quality of service for all customers, our API is
    rate limited. The current limit is 600 requests per minute across all
    endpoints. We reserve the right to adjust the rate limit for given
    endpoints.


    If the rate limit is exceeded, the API responds with a `HTTP 429 "Too Many
    Requests"` status code. The response has a `X-Ratelimit-Reset` header that
    tells you when the rate limit count will reset.


    Here are the headers related to rate limiting that our API returns for any
    requests:


    | Header      | Description      |

    | ----------- | ---------------- |

    | `X-Ratelimit-Limit` | Number of requests allowed per minute |

    | `X-Ratelimit-Remaining`      | Remaining number of requests allowed for
    the current minute |

    | `X-Ratelimit-Reset`      | Time at which the rate limit count resets |


    ### Staying under the limit


    Here are some recommendations to stay under the limit:


    * Subscribe to Checkr webhooks to get updates about a report's activity
    instead of polling.

    * If you do anticipate situations where you could exceed the limit, we
    recommend using an exponential backoff and retrying the API call.


    ## Idempotency support


    <PullRight>


    ##### Example idempotent report creation request


    ```sh

    $ curl -v -X POST https://api.checkr.com/v1/reports \
      -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
      -H 'Idempotency-Key: 40b23921-c005-4ec7-832a-3ae023dbbc11' \
      -d package=driver_pro \
      -d candidate_id=be529e5d8cc5ad26e655ce89
    ```

    </PullRight>


    The Checkr API supports idempotency in POST requests. Use this feature to
    safely repeat POST requests without accidentally creating the same reports
    or candidates multiple times.


    First, provide an `Idempotency-Key: <key>` header to the POST request. This
    header value will be used server side to recognize retries of the same
    request.


    The client side must then generate a unique value for every POST request,
    and re-use the same header value in any subsequent retry attempts. We
    recommend the use of V4 UUIDs to avoid collisions.



    When serving the request with a new idempotency key, Checkr service will
    save the response (including status code, headers, body) for the first
    request if it is successful (2xx status), and return the saved response for
    later requests with the same idempotency key.


    <b>Note: </b>The idempotency key expires after 24 hours. Retries with an
    expired idempotency key will be handled as new requests.


    ## Supported characters


    The Checkr API supports alphanumeric character input, as well as accented
    characters and some punctuation marks.


    Corresponding regex character ranges: `[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-'., ]`


    ### Supported accented characters



    ª|µ|º|À|Á|Â|Ã|Ä|Å|Æ

    :-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:

    Ç|È|É|Ê|Ë|Ì|Í|Î|Ï|Ð

    Ñ|Ò|Ó|Ô|{|Ö|Ø|Ù|Ú|Û

    Ü|Ý|Þ|ß|à|á|â|ã|ä|å

    æ|ç|è|é|ê|ë|ì|í|î|ï

    ð|ñ|ò|ó|ô|õ|ö|ø|ù|ú

    û|ü|ý|þ|ÿ|'|.|,|-|



    ## Driver License validation


    Checkr has compiled the following table of valid driver license number input
    per state. To avoid errors, we suggest that you implement driver license
    number validation for both the Candidates and Driver Licenses endpoints.


    <table>
      <tr>
       <td><strong>State</strong>
       </td>
       <td><strong>Validation Criteria</strong>
       </td>
       <td><strong>Regex</strong>
       </td>
      </tr>
      <tr>
       <td>AL
       </td>
       <td>7-8 Numeric
       </td>
       <td>/\A\d{7,8}\z/
       </td>
      </tr>
      <tr>
       <td>AK
       </td>
       <td>7 Numeric
       </td>
       <td>/\A\d{7}\z/
       </td>
      </tr>
      <tr>
       <td>AZ
       </td>
       <td>(1 Alpha + 8 Numeric) OR 9 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{8}\z/ OR /\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>AR
       </td>
       <td>9 Numeric
       </td>
       <td>/\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>CA
       </td>
       <td>1 Alpha + 7 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{7}\z/
       </td>
      </tr>
      <tr>
       <td>CO
       </td>
       <td>9 Numeric
       </td>
       <td>/\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>CT
       </td>
       <td>9 Numeric
       </td>
       <td>/\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>DE
       </td>
       <td>2-7 Numeric
       </td>
       <td>/\A\d{2,7}\z/
       </td>
      </tr>
      <tr>
       <td>DC
       </td>
       <td>7-9 Numeric
       </td>
       <td>/\A\d{7,9}\z/
       </td>
      </tr>
      <tr>
       <td>FL
       </td>
       <td>1 Alpha + 12 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{12}\z/
       </td>
      </tr>
      <tr>
       <td>GA
       </td>
       <td>9 Numeric
       </td>
       <td>/\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>HI
       </td>
       <td>("H" + 8 Numeric) or 9 Numeric
       </td>
       <td>/\AH\d{8}\z/ OR /\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>ID
       </td>
       <td>(2 Alpha + 6 Numeric + 1 Alpha) or 9 Numeric
       </td>
       <td>/\A[A-Z]{2}\d{6}[A-Z]{1}\z/ OR /\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>IL
       </td>
       <td>1 Alpha + 11-12 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{11,12}\z/
       </td>
      </tr>
      <tr>
       <td>IN
       </td>
       <td>10 Numeric
       </td>
       <td>/\A\d{10}\z/
       </td>
      </tr>
      <tr>
       <td>IA
       </td>
       <td>9 Numeric or (3 Numeric + 2 Alpha + 4 Numeric)
       </td>
       <td>/(\A\d{9}\z)/ OR /(\A\d{3}[A-Z]{2}\d{4}\z)/
       </td>
      </tr>
      <tr>
       <td>KS
       </td>
       <td>"K" + 8 Numeric
       </td>
       <td>/\A[K]{1}\d{8}\z/
       </td>
      </tr>
      <tr>
       <td>KY
       </td>
       <td>1 Alpha + 8 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{8}\z/
       </td>
      </tr>
      <tr>
       <td>LA
       </td>
       <td>("0" + 7 Numeric) OR ("0" + 8 Numeric) OR 7 Numeric or 8 Numeric
       </td>
       <td>/\A[0]{0,1}\d{7,8}\z/
       </td>
      </tr>
      <tr>
       <td>ME
       </td>
       <td>7 Numeric
       </td>
       <td>/\A\d{7}\z/
       </td>
      </tr>
      <tr>
       <td>MD
       </td>
       <td>(1 Alpha + 12 Numeric) OR ("MD" + 11 Numeric)
       </td>
       <td>/\A[A-Z]{1}\d{12}\z/ OR /\AMD\d{11}\z/
       </td>
      </tr>
      <tr>
       <td>MA
       </td>
       <td>("SA" + 7 Numeric) OR ("S" + 8 Numeric) OR 9 Numeric
       </td>
       <td>\ASA\d{7}\z OR \AS\d{8}\z OR \A\d{9}\z
       </td>
      </tr>
      <tr>
       <td>MI
       </td>
       <td>1 Alpha + 12 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{12}\z/
       </td>
      </tr>
      <tr>
       <td>MN
       </td>
       <td>1 Alpha + 12 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{12}\z/
       </td>
      </tr>
      <tr>
       <td>MS
       </td>
       <td>9 Numeric
       </td>
       <td>/\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>MO
       </td>
       <td>9 Numeric OR (1 Alpha + 5-9 Numeric) OR (3 Numeric + 1 Alpha + 6 Numeric)
       </td>
       <td>/(\A\d{9}\z)/ OR /(\A[A-Z]{1}\d{5,9}\z)/ OR /(\A\d{3}[A-Z]{1}\d{6}\z)/
       </td>
      </tr>
      <tr>
       <td>MT
       </td>
       <td>13 Numeric or 9 Alpha-Numeric or (3 Alpha + 10 Numeric)
       </td>
       <td>/(\A\d{13}\z)/ OR
    <p>

    /(\A(\d|[A-Z]){9}\z)/ OR \

    /(\A[A-Z]{3}\d{10}\z)/
       </td>
      </tr>
      <tr>
       <td>NE
       </td>
       <td>1 Alpha + 3-8 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{3,8}\z/
       </td>
      </tr>
      <tr>
       <td>NV
       </td>
       <td>10 Numeric
       </td>
       <td>/\A\d{10}\z/
       </td>
      </tr>
      <tr>
       <td>NH
       </td>
       <td>(2 Numeric + 3 Alpha + 5 Numeric) OR ("NHL" + 8 Numeric)
       </td>
       <td>/(\A\d{2}[A-Z]{3}\d{5}\z)/ OR /(\ANHL\d{8}\z)/
       </td>
      </tr>
      <tr>
       <td>NJ
       </td>
       <td>1 Alpha + 14 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{14}\z/
       </td>
      </tr>
      <tr>
       <td>NM
       </td>
       <td>9 Numeric
       </td>
       <td>/\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>NY
       </td>
       <td>9 Numeric OR 1 Alpha + 18 Numeric
       </td>
       <td>/(\A\d{9}\z)/ OR /(\A[A-Z]{1}\d{18}\z)/
       </td>
      </tr>
      <tr>
       <td>NC
       </td>
       <td>1-12 Numeric
       </td>
       <td>/\A\d{1,12}\z/
       </td>
      </tr>
      <tr>
       <td>ND
       </td>
       <td>9 Alpha-Numeric
       </td>
       <td>/\A(\d|[A-Z]){9}\z/
       </td>
      </tr>
      <tr>
       <td>OH
       </td>
       <td>2 Alpha + 6 Numeric OR 8 Numeric
       </td>
       <td>/\A[A-Z]{2}\d{6}\z/ OR /(\A\d{8}\z)/
       </td>
      </tr>
      <tr>
       <td>OK
       </td>
       <td>(1 Alpha + 9 Numeric) or 9 Numeric
       </td>
       <td>/(\A[A-Z]{1}\d{9}\z)/ OR /(\A\d{9}\z)/
       </td>
      </tr>
      <tr>
       <td>OR
       </td>
       <td>5-7 Numeric OR (1 Alpha + 6 Numeric)
       </td>
       <td>/(\A\d{5,7}\z)/ OR /(\A[A-Z]{1}\d{6}\z)/
       </td>
      </tr>
      <tr>
       <td>PA
       </td>
       <td>8 Numeric
       </td>
       <td>/\A\d{8}\z/
       </td>
      </tr>
      <tr>
       <td>PR
       </td>
       <td>5-7 Numeric OR 9 Numeric
       </td>
       <td>/\A\d{5,7}\z/ OR /\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>RI
       </td>
       <td>7-8 Numeric OR ("V" + 6 Numeric)
       </td>
       <td>/(\A\d{7,8}\z)/ OR /(\AV\d{6}\z)/
       </td>
      </tr>
      <tr>
       <td>SC
       </td>
       <td>3-10 Numeric
       </td>
       <td>/\A\d{3,10}\z/
       </td>
      </tr>
      <tr>
       <td>SD
       </td>
       <td>6-9 Numeric
       </td>
       <td>/\A\d{6,9}\z/
       </td>
      </tr>
      <tr>
       <td>TN
       </td>
       <td>7-9 Numeric
       </td>
       <td>/\A\d{7,9}\z/
       </td>
      </tr>
      <tr>
       <td>TX
       </td>
       <td>7-8 Numeric
       </td>
       <td>/\A\d{7,8}\z/
       </td>
      </tr>
      <tr>
       <td>UT
       </td>
       <td>4-10 Numeric
       </td>
       <td>/\A\d{4,10}\z/
       </td>
      </tr>
      <tr>
       <td>VT
       </td>
       <td>8 Numeric or (7 Numeric + "A")
       </td>
       <td>/(\A\d{8}\z)/ OR /(\A\d{7}A\z)/
       </td>
      </tr>
      <tr>
       <td>VA
       </td>
       <td>(1 Alpha + 8 Numeric) OR 9 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{8}\z/ OR /\A\d{9}\z/
       </td>
      </tr>
      <tr>
       <td>WA
       </td>
       <td>(4-8 Alpha + 2-3 Numeric + 2 Alpha-Numeric) OR ("WDL" + 9 Alpha-Numeric)
       </td>
       <td>/\A[A-Z*]{4,8}\d{2,3}(\d|[A-Z]){2}\z/ OR /\AWDL([A-Z]|\d){9}\z/
       </td>
      </tr>
      <tr>
       <td>WV
       </td>
       <td>7 Alpha-Numeric
       </td>
       <td>/\A([A-Z]|\d){7}\z/
       </td>
      </tr>
      <tr>
       <td>WI
       </td>
       <td>1 Alpha + 13 Numeric
       </td>
       <td>/\A[A-Z]{1}\d{13}\z/
       </td>
      </tr>
      <tr>
       <td>WY
       </td>
       <td>9 Numeric
       </td>
       <td>/\A\d{9}\z/
       </td>
      </tr>
    </table>


    ## Email address validation


    The Checkr API validates submitted email addresses using the industry
    standard [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322). The
    string length must be <=255, and the domain must be valid and configured to
    accept email. (For example: gmail.com is a valid domain, while gmeil.con is
    not.)


    To avoid errors, we suggest that you validate emails used in your candidate
    creation requests.


    ## SSN validation


    Checkr's product incorporates SSN field controls designed to not accept SSNs
    with the following characteristics:


    * SSNs without exactly 9 numeric characters

    * SSNs that start with 666 (666-34-3768)

    * SSNs that start with 9 (967-65-4325)

    * SSNs that are a single digit (111-11-1111)

    * SSNs that are sequential digits (123-45-6789)


    ## Error codes


    Checkr's API offers a number of error codes to facilitate your building and
    troubleshooting. Some common error codes include:


    | Status Code | Response |

    | ----------- | -------- |

    | 400 | SSN is invalid |

    | 400 | Zipcode is invalid |

    | 400 | Email is not a valid email address |

    | 400 | First name must only contain letters, numbers, spaces, hyphens,
    apostrophes, periods, and commas |

    | 400 | Last name must only contain letters, numbers, spaces, hyphens,
    apostrophes, periods, and commas |

    | 400 | Report is too old to upgrade |

    | 400 | New package does not add any screenings |

    | 400 | Candidate must have a driver license number and a driver license
    state for the package mvr |

    | 400 | Report has a pre-existing adverse action. See
    https://docs.checkr.com/#operation/updateReport |

    | 400 | SSN is invalid. TIN was provided. |

    | 400 | SSN has already been taken |

    | 400 | First name must only contain letters, numbers, spaces, hyphens,
    apostrophes, periods, and commas", "Last name must only contain letters,
    numbers, spaces, hyphens, apostrophes, periods, and commas |

    | 400 | Candidate must_not have middle name when no_middle_name flag is set
    to true for the candidate report_id= |

    | 400 | Report driver license state not supported or not enabled for account
    |

    | 400 | Candidate must be at least 16 years old |

    | 400 | Candidate must be at least 18 years old |

    | 400 | Candidate must have SSN for the package driver_premium |

    | 400 | Candidate has reached the limit of Reports allowed |

    | 400 | Middle name must only contain letters, numbers, spaces, hyphens,
    apostrophes, periods, and commas. |

    | 400 | Number Driver license number must only contain letters, numbers,
    spaces, hyphens, and asterisks |

    | 400 | Candidate must have middle name when no_middle_name flag is set for
    the candidate report_id= |

    | 400 | Number can't be blank, State can't be blank, State is not a valid US
    state |

    | 400 | No middle name can not be updated, No middle name must have middle
    name when no_middle_name flag is set to false for the candidate
    candidate_id= |

    | 403 | Forbidden |

    | 403 | Sorry, your account is not approved for production |

    | 403 | Candidate has requested that their PII be removed |

    | 409 | Duplicate geo, name: peninsulasw_wa, state: WA already exists |

    | 409 | Duplicate report detected. No more than 3 reports per candidate can
    be created within a 24 hour period |

    | 409 | Duplicate candidate detected. No more than 2 duplicate candidates
    can be created within a 24 hour period |


    ## Cancellation Reasons


    Screenings can be canceled due to various scenarios. Here is a list of the
    current cancellation reasons and their descriptions.


    | Reason | Description |

    | ------ | ----------- |

    | candidate_pii_updated_customer_requested | Customer updated candidate PII
    prior to screening completion |

    | exception_ssn_trace | SSN Trace completed with an exception prior to
    screening completion |

    | source_inaccessible_closed_court | Court closed or has limited access to
    court records |

    | complete_now_customer_requested | Customer requested Complete Now prior to
    screening completion |

    | missing_required_information | Required information not received |

    | vendor_unable_to_complete | Vendor unable to complete screening |

    | vendor_account_deauthorized | Vendor deauthorized account |

    | international_entry_not_supported | Screening does not support
    international entries |

    | no_history_required_information | Candidate declared no history |

    | profile_on_hold_customer_requested | Customer requested candidate profile
    on hold |

    | candidate_withdrew_consent | Candidate withdrew consent |

    | minors_package_not_enabled | Package not configured to allow candidates
    under age 18 |

    | candidate_below_minimum_age | Candidate is below the minimum age for a
    background check |

    | exception_mvr | MVR canceled with an exception |

    | customer_account_deauthorized | Customer account was deauthorized |


    [dev-settings]: https://dashboard.checkr.com/account/developer_settings
x-tagGroups:
  - name: Resources
    tags:
      - Account
      - Hierarchy (Enabled by request)
      - Nodes
      - Candidates
      - Reports
      - Packages
      - Invitations
      - Geos
      - Programs
      - Assessments
      - Subscriptions
      - Continuous Checks
      - Adverse Actions
      - Adverse Items
      - Verifications
      - Documents
      - Driver Licenses
      - Schools
      - Employers
      - Counties
      - Professional Licenses
      - Report Tags
      - Report Addresses
      - Report ETA
      - Candidate Stories
      - SSN
      - Webhooks
  - name: Screenings
    tags:
      - SSN Trace
      - Sex Offender Registry Search
      - Global Watchlist Search
      - National Criminal Search
      - Federal Criminal Search
      - Federal District Criminal Search
      - Federal Civil Search
      - Federal District Civil Search
      - County Criminal Search
      - State Criminal Search
      - Motor Vehicle Report
      - Education Verification
      - Employment Verification
      - Professional License Verification
      - International Adverse Media Search
      - International Criminal Search
      - International Education Verification
      - International Employment Verification
      - International Global Watchlist Search
      - International Identity Document Validation
      - International Motor Vehicle Report
tags:
  - name: Account
    description: >
      The Account resource includes account information and settings. Account
      information can be

      updated from the Dashboard. Some Account settings, like
      `available_screenings`, can be updated

      only by Checkr. Contact our Customer Success team for more information.
  - name: Candidates
    description: >
      Candidates represent people who have applied for positions within your
      company,

      and have agreed to a background check. Use the Candidate object

      to collect all Personally Identifiable Information (PII) for a candidate,

      and all relevant Checkr information, including any generated Reports, or
      attached Geos.
  - name: Driver Licenses
    description: >
      The driver licenses resource represents a single driver license for a
      candidate. Candidates may have one current driver license and may have any
      number of previous driver licenses.
  - name: Schools
    description: >
      The School resource includes all relevant educational information for the
      specified Candidate.

      School resources are tied to the specified candidate, and do not transfer
      to other alumna within the system.
  - name: Employers
    description: >
      The Employers resource includes all relevant employer information for the
      specified Candidate.

      Employer resources are tied to the specified candidate, and do not
      transfer to other employees within the system.

      Once attached to a candidate, all employers are retained when running
      subsequent employment verifications. For example, if multiple employment
      verifications are run for an existing candidate, each report will use all
      employers attached to that candidate for the verification.
  - name: SSN
    description: >
      The SSN resource allows you to retrieve a candidate's encrypted SSN.


      **Note**: Access to this endpoint requires an RSA key-pair for encryption.
      See [Configuring Encryption for Candidate SSN
      Endpoint](#section/Advanced-Features/Configuring-encryption-for-the-SSN-resource)
      for information on how to generate encryption keys. Work with your Checkr
      Customer Success Manager to enable this feature for your account.
  - name: Counties
    description: >
      The Counties resource provides a list of all counties within the United
      States.

      Use the returned list to validate the counties submitted by your
      candidates during the [Self Disclosure](#operation/createReport) process.
  - name: Professional Licenses
    description: >
      The Professional License resource includes all relevant professional
      license information for the specified Candidate.
  - name: Invitations
    description: >
      Represents a background check invitation. The candidate will receive an
      email to submit their information.


      **Note**: By default, the date of expiration is set to 7 days after
      creation.

      All invitations expire at 11:59:59pm PDT.

      This enables candidates to have a full last day to complete their
      invitation.
  - name: Reports
    description: >
      Reports provide all information relevant to a candidate’s requested
      background check. Reports include the status of the background check
      process, the list of searches included in the check, and the Package
      requested.

      Depending on the Package selected, a report may include any combination of
      [Checkr Screenings](#tag/SSN-Trace) listed below.


      Reports are provided to candidates through the Candidate Portal, and as a
      PDF (if requested).


      For more information on the searches listed, see
      [Screenings](#tag/SSN-Trace) (below),

      or [Screening
      Types](https://help.checkr.com/hc/en-us/sections/203637147-Screening-Types)

      in the Checkr Help Center.
  - name: Packages
    description: >
      Packages are a list of screenings to be run for a report.

      Work with your Checkr Customer Success representative to define Packages
      that will best serve

      your business needs.
  - name: Documents
    description: >
      Represents a Document, either related to a Report (such as a PDF Report)
      or related to a Candidate

      (such as a Driver License image, or a consent form). Report Document IDs
      can be retrieved from the

      [Retrieve an existing Report](#operation/getReport) endpoint. Candidate
      Document IDs can be

      retrieved using the [List a Candidate's
      Documents](#operation/getCandidateDocuments) endpoint.


      Use `GET /v1/reports/{id}?include=documents` to return a Report resource
      that includes an array of `document` objects.


      Report Documents are of the following types: `drug_screen_donor_pass`,

      `health_screening_occupational_health_document`,

      `health_screening_result_certificate`, `pdf_credit_report`",

      `pdf_health_report`, `pdf_individualized_assessment`, `pdf_report`,

      `pdf_report_encrypted`, `pdf_self_disclosure`, `pdf_wisconsin_doj`, and

      `screening_pass`.
  - name: Verifications
    description: >
      Represents a link by which candidates may upload a document. If a
      candidate must upload

      documents to continue processing their report, a set of Verifications will
      be available.

      Checkr offers two verification types: `id` and `education`. ID
      Verifications are used for

      identity and license purposes, such as ID card or driver’s license.
      Education Verifications

      are used for documents related to Education Verification.
  - name: Adverse Items
    description: |
      Adverse Items are items selected from a returned report that may be used
      to initiate Adverse Action for a Candidate.
  - name: Adverse Actions
    description: >
      Adverse Actions are initiated by Checkr customers if something is returned
      on a Candidate’s

      report that requires further investigation. When an Adverse Action is
      initiated, the candidate

      must be informed, and given time to address the issues raised.


      National and local laws control the Adverse Action process and define the
      sequence and timing

      with which it must process. Please work with your legal council to ensure
      that your process is

      compliant.


      For more information, see

      [The Adverse Actions
      Process](https://help.checkr.com/hc/en-us/articles/216873808)

      in the Checkr Help Center.
  - name: Subscriptions
    description: |
      Represents a background check subscription. A background report with
      the Package specified will run at every interval.
  - name: Continuous Checks
    description: >
      Continuous Check runs a monthly check for pointers to new records, which
      may result in a Report. Unlike a Subscription, which generates a full
      Report at a defined cadence, Continuous Check generates a full Report only
      if new reportable information is found. For more information, see
      [Continuous Crim: The new standard of
      safety](https://help.checkr.com/hc/en-us/articles/360016337054-Continuous-Check-The-new-standard-of-safety)
      and [Continuous MVR: The new standard in driver
      safety](https://help.checkr.com/hc/en-us/articles/4410112521111-Continuous-MVR-The-new-standard-in-driver-safety)
      in the Checkr Help Center.


      Use the [`report.complete` webhook](#section/Webhooks/Report-events) to
      watch for new Reports created for candidates enrolled in Continuous Check.
      These Reports will list one of the following as the Package within the
      webhook payload:

      - `continuous_check`

      - `continuous_mvr`

      - `continuous_mvr_enrollment`


      **Note:** These Package names are returned through the Checkr APIs, but
      may not be used as input. Attempting to create Invitations, Reports, or
      Subscriptions with these Packages will result in a `Package not found`
      error.


      **Note:** It is your legal obligation to manage your list of candidates
      enrolled in Continuous Check. You must obtain the required [evergreen
      consent](https://help.checkr.com/hc/en-us/articles/360001906708) before
      enrolling them, and you must remove them from the service when they begin
      an Adverse Action process or are removed from your platform. Work with
      your legal counsel to ensure that your Continuous Check process remains
      compliant with all applicable laws and regulations.


      **Note:** If your candidate is located outside of the US, they cannot be
      enrolled in Continuous Check.
  - name: Geos
    description: Represents a candidate geography.
  - name: Hierarchy (Enabled by request)
    description: >
      Use the Hierarchy endpoint to structure your Account as a grouping of
      individual entities (Nodes) that represent your business with respect to
      your hiring and background check needs.


      The parent-child relationship of Nodes may then be used to manage the
      relationship of your Packages and other account settings to Users and
      Candidates within your Account. Once defined, use the Checkr Dashboard to
      assign Nodes to Users, Packages, your Positive Adjudication Matrix, and
      other aspects of your Checkr Account.


      Specifying a unique ID (custom_id) for each Node in the hierarchy allows
      you to edit the structure of your hierarchy without dissociating any
      Packages, PAMs, or Users assigned directly to the individual nodes. As
      nodes are moved to different locations within the hierarchy they will
      inherit Packages or PAMs from their new parent that may differ from the
      last, but Packages assigned directly to the node will not change.


      For more information on Checkr's Account Hierarchy Management tools,
      please see the [Account Hierarchy Mangement User
      Guides](https://help.checkr.com/hc/en-us/articles/360044498554) in the
      Help Center.
  - name: Nodes
    description: >
      Nodes are the individual entities that comprise an Account Hierarchy. If
      hierarchy is enabled for your Checkr Account, this endpoint may be used to
      retrieve a list of all Account Nodes. To create Nodes, use the [Create
      Hierarchy](#operation/updateAccountHierarchy) endpoint.


      For more information on Checkr's Account Hierarchy Management tools,
      please see the [Account Hierarchy Mangement User
      Guides](https://help.checkr.com/hc/en-us/articles/360044498554) in the
      Help Center.
  - name: Programs
    description: >
      Represents a division of an Account. Programs are typically used to
      identify clients,

      cost centers, or departments. A Program may have many Geos and may have
      many Packages.
  - name: Assessments
    description: >
      Use this endpoint to return the Assessments for Reports.


      <b>Note: </b>Listen to the `report.updated` webhook to determine when an
      Assessment has been applied to a report.
  - name: Report Tags
    description: 'Report Tags are defined by customers, and may be used to search Reports.'
  - name: Report Addresses
    description: Represents candidate reported addresses on a Report.
  - name: Report ETA
    description: >
      Report ETAs predict when screenings will complete for each background
      check report. This ETA provides a date for the estimated completion of a
      specific report, helping both you and your candidates plan ahead.


      While the predictions are highly accurate, they are not a guarantee. Some
      county-level searches are subject to unpredictable timelines, due to
      manual search processes and court availability. For more information on
      these searches, please see [County Criminal Record
      Search](https://help.checkr.com/hc/en-us/articles/360001686627) in the
      Checkr Help Center.


      90% of reports will complete within one business day of the estimated
      date.


      For those reports which do not complete within the initial estimate,
      Checkr will re-generate the ETA using the current information available
      for the remaining screenings. A
      [report.updated](#section/Webhooks/Report-events) webhook will be issued
      for both the initial and each subsequent ETA.


      For more information, see [Checkr
      ETA](https://help.checkr.com/hc/en-us/articles/360025682094) in the Checkr
      Help Center.
  - name: Report Complete Now
    description: Use this endpoint to complete a report.
  - name: Candidate Stories
    description: >
      Candidate Stories allows candidates with records the opportunity to share
      additional context

      about themselves and their background checks. Once submitted, these
      stories will be available

      to customers in the candidate’s report in the Checkr Dashboard.


      For more information, please see

      [Candidate Stories: Improving understanding of the past and
      present](https://help.checkr.com/hc/en-us/articles/360044417414)

      in the Checkr Help Center.
  - name: SSN Trace
    description: >
      SSN Trace is typically the first screening run, and is used to verify that

      the input SSN exists, determine where and when it was issued, and to
      compile

      a list of all known aliases associated with the SSN. This Trace is also
      used to generate

      a list of all known addresses recorded by credit agencies for the SSN for
      the last 7 years.


      An SSN Trace may be used to determine which additional jurisdictions
      should be searched for

      the candidate, based on the list of known addresses returned.


      If the platform detects an issue with the SSN Trace run (data mismatch,
      absence of data,

      or inclusion of the SSN on the death master file), Checkr may issue an
      exception and ask

      the candidate to either re-enter their SSN or upload other supporting
      documentation.


      <b>Note: </b>Information returned by this search is not a part of the
      consumer report and may not be used for FCRA purposes, including
      eligibility determinations under the FCRA


      For more information, please see

      [SSN Trace](https://help.checkr.com/hc/en-us/articles/360001967227)

      in the Checkr Help Center.
  - name: Sex Offender Registry Search
    description: >
      Represents an instant multi-state Sex Offender Registry Search.


      A nationwide search of all 50 states' and the District of Columbia’s sex
      offender registries

      for all levels of registered sex offenders. Search includes type(s) of
      offense and

      identifiers, such as Date of Birth (DOB).


      For more information, please see

      [Sex Offender Registry
      Search](https://help.checkr.com/hc/en-us/articles/360001863428)

      in the Checkr Help Center.
  - name: Global Watchlist Search
    description: >
      The Global Watchlist Search searches known domestic and international
      terrorist watchlists

      as well as the records of the Office of Inspector General (OIG), Excluded
      Parties List (EPL)

      and additional domestic and international agency lists.


      For more information, please see

      [Global Watchlist
      Search](https://help.checkr.com/hc/en-us/articles/360001951208)

      in the Checkr Help Center.
  - name: National Criminal Search
    description: >
      Checkr conducts a National Criminal Database Search as a routine part of
      all criminal

      background checks. The search queries 3,200 counties and over 900 million
      records across

      the United States, and provides a quick means to evaluate which courts or
      jurisdictions should

      be searched more thoroughly for any given candidate.


      The National Criminal Database Search is used only as a "pointer search"
      to determine which

      courts or jurisdictions to search. Records returned from this database do
      not appear

      on the final report.


      For more information, please see

      [National Criminal Database
      Search](https://help.checkr.com/hc/en-us/articles/360001686567)

      in the Checkr Help Center.
  - name: Federal Criminal Search
    description: >
      Searches the Federal Criminal record database and Federal District courts
      to return felony and misdemeanor records.

      (National, State, and County Criminal Searches do not return federal
      records.) For more information, please see

      [Federal Criminal
      Search](https://help.checkr.com/hc/en-us/articles/360001882627)

      in the Checkr Help Center.
  - name: Federal District Criminal Search
    description: >
      Searches Federal District Criminal courts to verify felony and misdemeanor
      records identified by PACER.

      For more information, please see

      [Federal District Criminal
      Search](https://help.checkr.com/hc/en-us/articles/360001882627)

      in the Checkr Help Center.
  - name: Federal Civil Search
    description: >
      Searches the PACER database to identify Federal Civil records. Checkr
      conducts Federal District Searches to verify records identified by this
      search.

      For more information, please see

      [Federal Civil District
      Search](https://help.checkr.com/hc/en-us/articles/360010443533)

      in the Checkr Help Center.
  - name: Federal District Civil Search
    description: >
      Searches Federal District Civil courts to verify felony and misdemeanor
      records identified by PACER

      For more information, please see

      [Federal District Civil
      Search](https://help.checkr.com/hc/en-us/articles/360010443533)

      in the Checkr Help Center.
  - name: County Criminal Search
    description: >
      County Criminal records make up the majority of criminal records, and are
      therefore one of

      the most complete sources for both felony and misdemeanor records. These
      records are

      not reported to the federal database, and will therefore not be surfaced

      in a Federal Criminal Database Search.


      The County Criminal Search resource defines the results from a criminal
      record search

      in a specific county.


      For more information, please see

      [County Criminal
      Search](https://help.checkr.com/hc/en-us/articles/360001686627)

      in the Checkr Help Center.
  - name: State Criminal Search
    description: >
      The State Criminal Search returns criminal records from a selected state’s
      database,

      the content of which varies by state. Some states include records reported
      from all counties;

      some include records only from a few. This search should be used in
      conjunction with

      a County Criminal Search, and not as a replacement for the more complete
      records returned

      from the County Search.


      For more information, please see

      [State Criminal
      Search](https://help.checkr.com/hc/en-us/articles/360001668148)

      in the Checkr Help Center.
  - name: Motor Vehicle Report
    description: >
      Motor Vehicle Records originate from a state’s Department of Motor
      Vehicles, and include

      information related to a person’s driving history, including driver’s
      license status and

      restrictions, as well as violations and convictions. Use MVR reports to
      evaluate a candidate’s

      driving history and safety record.


      Please note that some convictions, such as driving under the influence,
      may appear only

      on MVR reports, and not on criminal searches.


      For more information, please see

      [Motor Vehicle
      Records](https://help.checkr.com/hc/en-us/articles/360001568167)

      in the Checkr Help Center.
  - name: Education Verification
    description: >
      Use an Education Verification to verify a candidate’s education history,
      and highest degree

      achieved.


      For this screening, candidates are asked to supply their degree, major,
      school, and the state

      in which the school is located. Checkr then attempts to verify the
      information. After three

      failed attempts (itemized in the logs), Checkr generates an exception, and
      asks the candidate

      to upload supporting documentation. Once the document is uploaded, the
      verification process

      will begin again.


      For more information, please see

      [Education
      Verification](https://help.checkr.com/hc/en-us/articles/360001863468)

      in the Checkr Help Center.
  - name: Employment Verification
    description: >
      Use an Employment Verification to verify a candidate’s employment history
      for the last three

      employers, or the last seven years.


      For this screening, candidates are asked to supply their employment
      history. Checkr then

      attempts to verify the information. After three failed attempts (itemized
      in the logs),

      Checkr generates an exception, and asks the candidate to upload supporting
      documentation.

      Once the document is uploaded, the verification process will begin again.


      For more information, please see

      [Employment
      Verification](https://help.checkr.com/hc/en-us/articles/228391768)

      in the Checkr Help Center.
  - name: Professional License Verification
    description: >
      Use a Professional License Verification to verify a candidate's
      professional credentials.
  - name: Webhooks
    description: >
      Use webhooks to receive updates on objects created with the API and to
      kick off additional workflows based on these events. See
      [Webhooks](/#section/Webhooks) for more information.
  - name: International Adverse Media Search
    description: >
      In countries where third party access to criminal record information is
      restricted, Adverse Media Checks may be performed to access private
      databases, public sanctions lists, media sources, and other public and
      private record repositories.

      Refer to [International
      Screenings](https://help.checkr.com/hc/en-us/articles/360056108714-International-Screenings#:~:text=is%204%20days.-,Adverse%20Media%20Check,-%3A%20In%20countries)
      for more details.
  - name: International Criminal Search
    description: >
      Criminal records check in supported countries. Criminal data is accessed
      from the appropriate database or agency.

      Refer to [International
      Screenings](https://help.checkr.com/hc/en-us/articles/360056108714-International-Screenings#:~:text=International%20Criminal%20Check)
      for more details.
  - name: International Education Verification
    description: >
      The verification of academic status of any educational level such as high
      school, college and post-grad may include institution name, dates of
      attendance, graduation/conferred date, degree obtained, major, minor,
      honors and relevant awards. Reasonable attempts will be made to search
      available industry databases and international educational institutions.

      Refer to [International
      Screenings](https://help.checkr.com/hc/en-us/articles/360056108714-International-Screenings#:~:text=International%20Education%20Verification)
      for more details.
  - name: International Employment Verification
    description: >
      Verification of previous employment history may include employer’s name,
      dates of employment, position/title, reason for leaving, eligibility for
      rehire, and comments. Reasonable attempts will be made to verify available
      government agencies and employment databases. Email verification, and
      phone verification may be used in countries where the records of former
      employers are not available in searchable form, and where contacting the
      supervisor or manager is common practice.

      Refer to [International
      Screenings](https://help.checkr.com/hc/en-us/articles/360056108714-International-Screenings#:~:text=International%20Employment%20Verification)
      for more details.
  - name: International Global Watchlist Search
    description: >
      A comprehensive search of multiple U.S. and International government
      watchlists which include the FBI’s Most Wanted list, Interpol's Most
      Wanted lists, Office of Foreign Asset Control Sanction lists, Denied
      Persons lists, Department of State Sanction lists, and the Specially
      Designated Nationals List.

      Refer to [International
      Screenings](https://help.checkr.com/hc/en-us/articles/360056108714-International-Screenings#:~:text=Global%20Watchlist%20Check)
      for more details.
  - name: International Identity Document Validation
    description: >
      Verifies that the candidate’s passport, national ID or driver’s license is
      authentic and validly in circulation. This check provides a multi-level
      validation process by inspecting document data and positioning for
      authenticity, scanning the [Machine Readable
      Zone](https://en.wikipedia.org/wiki/Machine-readable_passport) (if
      available), and cross-checking the information provided against government
      databases to discover if the document is stolen, lost, expired or invalid.

      Refer to [International
      Screenings](https://help.checkr.com/hc/en-us/articles/360056108714-International-Screenings#:~:text=to%20international%20candidates%3A-,Identity%20Document%20Validation,-%3A%20Verifies%20that)
      for more details.
  - name: International Motor Vehicle Report
    description: >
      Checks the validity of a driver license and where available, may include a
      detailed history of the candidate’s driving violations or license
      conditions. Canada only at this time.

      Refer to [International
      Screenings](https://help.checkr.com/hc/en-us/articles/360056108714-International-Screenings#:~:text=International%20motor%20vehicle,hours%20to%20weeks.)
      for more details.
servers:
  - url: 'https://api.checkr.com/v1'
    description: Main server
paths:
  /account:
    get:
      tags:
        - Account
      summary: Retrieve authenticated account details
      description: |
        Returns Account details for the authenticated account.
      operationId: account
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Account'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |-
            $ curl -X GET https://api.checkr.com/v1/account \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /accounts:
    post:
      tags:
        - Account
      summary: Create a new Account
      description: >
        Creates a customer Account associated with your [Partner
        Application](#section/Checkr-Partners).

        Only Checkr Partners are authorized to use this endpoint.
      operationId: createAccount
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/AccountCreate'
      responses:
        '201':
          $ref: '#/components/responses/Account'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X POST https://api.checkr.com/v1/accounts \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d client_id=56269e3411a549fd07ed8d92 \
                -d name=Acme+Corporation \
                -d default_compliance_state=CA \
                -d purpose=employment \
                -d user[full_name]=Jeanette+Hughes \
                -d user[email]=user@example.com \
                -d company[dba_name]=Acme \
                -d company[industry]=72 \
                -d company[street]=123+Main+Street \
                -d company[city]=San Francisco \
                -d company[state]=CA \
                -d company[zipcode]=94107 \
                -d company[tax_id]=123456789 \
                -d company[incorporation_state]=CA \
                -d company[incorporation_type]=association \
                -d company[phone]=206-555-0100 \
                -d company[website]=https%3A%2F%2Fwww.example.com
  '/adverse_actions/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Adverse Action.
        required: true
        schema:
          type: string
    get:
      tags:
        - Adverse Actions
      summary: Retrieve an existing Adverse Action
      description: |
        Returns an existing Adverse Action with the input ID.
      operationId: getAdverseAction
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/AdverseAction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/adverse_actions/57ed51e57619e8002a6683f2 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    delete:
      tags:
        - Adverse Actions
      summary: Cancel an existing Adverse Action
      description: |
        Cancels an existing Adverse Action.
      operationId: cancelAdverseAction
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/AdverseActionCanceled'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/adverse_actions/e44aa283528e6fdaa9542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidate_stories/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Candidate Story.
        required: true
        schema:
          type: string
    get:
      tags:
        - Candidate Stories
      summary: Retrieve a Candidate Story
      description: Returns the existing Candidate Story corresponding to the input ID.
      operationId: getCandidateStory
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/CandidateStory'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      tags:
        - Candidate Stories
      summary: Delete a Candidate Story
      description: Deletes the existing Candidate Story corresponding to the input ID.
      operationId: deleteCandidateStory
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/CandidateStoryDeleted'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /candidates:
    post:
      tags:
        - Candidates
      summary: Create a new Candidate
      description: >
        Creates a new Candidate resource.


        ### Required attributes


        The Candidate resource’s required attributes vary depending on its
        intended use. If this resource is to be used in conjunction with the
        Invitations API (in which the invitation apply form collects the
        Candidate's personal information), the only strictly required Candidate
        attribute is `email`.


        If this resource is to be used to generate any other report type, other
        personal information is also required.


        Attributes required to generate a Report include:

        - `first_name`

        - `middle_name` or `no_middle_name`

        - `last_name`

        - `dob`


        Attributes required to generate a Report with a criminal check
        screening:

        - `ssn`

        - `zipcode`


        Attributes required to generate a report with a Motor Vehicle Record
        (MVR) screening:

        - `driver_license_number`

        - `driver_license_state`


        See [Driver License
        validation](#section/Reference/Driver-License-validation) in the
        Reference section for a list of valid input by state.


        Attributes recommended to generate a report with an Identity Document
        Verification screening:

        - `phone` (mobile phone number)


        Validation for these attributes is performed when requesting a Report,
        as the requirements depend on the Package.


        Checkr's product incorporates SSN field controls designed to not accept
        SSNs with the following characteristics:

          - SSNs without exactly 9 numeric characters
          - SSNs that start with 666 (666-34-3768)
          - SSNs that start with 9 (967-65-4325)
          - SSNs that are a single digit (111-11-1111)
          - SSNs that are sequential digits (123-45-6789)
      operationId: createCandidate
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/CandidateCreate'
      responses:
        '201':
          $ref: '#/components/responses/CandidateCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |-
            $ curl -X POST https://api.checkr.com/v1/candidates \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -H 'Content-Type: application/json' \
                -d '{"first_name":"John",
                    "middle_name":"Alfred",
                    "last_name":"Smith",
                    "email":"john.smith@gmail.com",
                    "phone":"5555555555",
                    "zipcode":"90401",
                    "dob":"1970-01-22",
                    "ssn":"847-43-4645",
                    "driver_license_number":"F2111655",
                    "driver_license_state":"CA",
                    "work_locations":[{"country":"US"}]}'
    get:
      tags:
        - Candidates
      summary: List existing Candidates
      description: >
        Lists existing Candidates with the input parameters.


        <b>Note: </b>This call will not return candidates with non-US
        `work_locations`. Use [GET /candidates/{id}](#operation/getCandidate) to
        retrieve candidates outside the US.
      operationId: listOfCandidates
      security:
        - basic_auth: []
      parameters:
        - name: email
          in: query
          description: Returns candidates with the input email address.
          schema:
            type: string
        - name: full_name
          in: query
          description: Returns candidates with the input `full_name`.
          schema:
            type: string
        - name: adjudication
          in: query
          description: >-
            Returns candidates with the input adjudication. `Null` if no
            adjudication has been made.
          schema:
            type: string
        - name: custom_id
          in: query
          description: Returns candidates with the input `custom_id`.
          schema:
            type: string
        - name: created_after
          in: query
          description: Returns candidates created after the input date.
          schema:
            type: string
            format: date-time
        - name: created_before
          in: query
          description: Returns candidates created before the input date.
          schema:
            type: string
            format: date-time
        - name: report_adjudicated_after
          in: query
          description: Returns candidates adjudicated after the input date.
          schema:
            type: string
            format: date-time
        - name: report_adjudicated_before
          in: query
          description: Returns candidates adjudicated before the input date.
          schema:
            type: string
            format: date-time
        - name: report_adjudicator_email
          in: query
          description: >-
            Returns candidates with a report adjudicated by someone with input
            `adjudicator_email`.
          schema:
            type: string
        - name: report_revised_after
          in: query
          description: Returns candidates with a report revised after the input date.
          schema:
            type: string
            format: date-time
        - name: report_revised_before
          in: query
          description: Returns candidates with a report revised before the input date.
          schema:
            type: string
            format: date-time
        - name: driver_license_number
          in: query
          description: Returns candidates with the input `driver_license_number`.
          schema:
            type: string
        - name: geo_id
          in: query
          description: Returns candidates with the input `geo_id`.
          schema:
            type: string
        - name: program_id
          in: query
          description: Returns candidates with the input `program_id`.
          schema:
            type: string
        - name: metadata
          in: query
          description: >-
            Returns candidates matching the input key-values. Input keys will be
            matched exactly. Input values will be pre- and post-pended with
            wildcards. (For example: A query for 1234 will return results for
            \*1234\*.)
          schema:
            type: object
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/ListOfCandidates'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/candidates \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/documents':
    get:
      tags:
        - Documents
      summary: List a Candidate's Documents
      description: >
        Returns an array of candidate-provided Documents for the input
        `candidate_id`.
      operationId: getCandidateDocuments
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: ID of the Candidate for whom documents will be retrieved.
          schema:
            type: string
        - name: types
          in: query
          description: >-
            The type of candidate-provided document to return. If `types` is not
            included in the call, all available Candidate Documents will be
            returned.
          schema:
            type: array
            items:
              type: string
              enum:
                - alien_id
                - consent
                - citizenship_certificate
                - credit_report_consent_form
                - driver_license
                - driver_license_back
                - driver_license_history
                - education_proof
                - electronic_consent_form
                - employment_proof
                - government_id
                - international_consent_form
                - military_id
                - national_id
                - national_id_back
                - passport
                - passport_signature_page
                - previous_driver_license
                - professional_license_certification_image
                - selfie
                - ssn_card
                - state_id_card
                - state_id_card_back
                - student_id
                - taxpayer_id
      responses:
        '200':
          $ref: '#/components/responses/DocumentsList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/documents/
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    post:
      tags:
        - Documents
      summary: Upload a new Candidate Document
      description: Uploads a new Candidate Document.
      operationId: uploadDocument
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: Upload a document for the input `candidate_id`.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/DocumentUpload'
      responses:
        '200':
          $ref: '#/components/responses/DocumentUploaded'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/documents
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                --form type=driver_license \
                --form file=@candidate_driver_license.jpg
  '/candidates/{candidate_id}/driver_licenses':
    parameters:
      - name: candidate_id
        in: path
        description: The Candidate's ID.
        required: true
        schema:
          type: string
    post:
      tags:
        - Driver Licenses
      summary: Create a new Driver License
      description: >
        Creates a new Driver License for a given candidate.


        If a `current` driver license is created for a candidate with an
        existing driver license marked `current`, the existing license will be
        updated to reflect that it is no longer `current`.


        If a `candidate_driver_license` exists with the `state` and `number`
        passed in with the POST request, a new license will not be created. The
        `current` and `issued_date` values of the existing license will be
        updated with on the parameters passed.


        **Note:** When a new driver license is created, Checkr will attempt to
        apply the new license information to resolve any existing exceptions for
        the candidate's most recent MVR screening if the screening has not yet
        produced reportable results.



        See [Driver License
        validation](#section/Reference/Driver-License-validation) in the
        Reference section for a list of valid driver license number input by
        state.
      operationId: createDriverLicense
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/DriverLicenseCreate'
      responses:
        '200':
          $ref: '#/components/responses/DriverLicenseCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/CandidateNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >-
            $ curl -X POST
            https://api.checkr.com/v1/candidates/5fb31d36bc2e7f4609aba03d/driver_licenses
            \
                 -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                 -d number=F2222222 \
                 -d state=CA \
                 -d issued_date=2010-01-30 \
                 -d current=true
    get:
      tags:
        - Driver Licenses
      summary: List existing Driver Licenses
      description: |
        Returns a list of existing Driver Licenses for the input Candidate ID.
      operationId: listOfDriverLicenses
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/DriverLicenseList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/CandidateNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >-
            $ curl -X GET
            https://api.checkr.com/v1/candidates/5fb31d36bc2e7f4609aba03d/driver_licenses
            \
                 -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/driver_licenses/{driver_license_id}':
    parameters:
      - name: driver_license_id
        in: path
        description: The Driver License ID.
        required: true
        schema:
          type: string
      - name: candidate_id
        description: The Candidate's ID.
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Driver Licenses
      summary: Retrieve an existing Driver License
      description: |
        Returns a specific driver license for a given candidate.
      operationId: getDriverLicense
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/DriverLicense'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/CandidateNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >-
            $ curl -X GET
            https://api.checkr.com/v1/candidates/5fb31d36bc2e7f4609aba03d/driver_licenses/505fe6ed108621f9342c4eff
            \
                 -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    post:
      tags:
        - Driver Licenses
      summary: Update an existing Driver License
      description: >
        Updates an existing Driver License for a given candidate.


        **Note**: Updating an existing license to `current: true` will set any
        existing `current` license to `current: false`.
      operationId: updateDriverLicense
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/DriverLicenseUpdate'
      responses:
        '200':
          $ref: '#/components/responses/DriverLicenseUpdated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/CandidateNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >-
            $ curl -X POST
            https://api.checkr.com/v1/candidates/5fb31d36bc2e7f4609aba03d/driver_licenses/76c7435e035d43b55bb9d1c6
            \
                 -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                 -d number=F2222222 \
                 -d current=true
    delete:
      tags:
        - Driver Licenses
      summary: Delete an existing Driver License
      description: |
        Deletes a specific driver license for a given candidate.
      operationId: deleteDriverLicense
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/DriverLicenseDeleted'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/CandidateNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >-
            $ curl -X DELETE
            https://api.checkr.com/v1/candidates/5fb31d36bc2e7f4609aba03d/driver_licenses/505fe6ed108621f9342c4eff
            \
                 -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/employers':
    post:
      tags:
        - Employers
      summary: Create a new Employer
      description: >
        Creates a new Employer resource.


        If the country is not US, the following parameters will be required in
        addition to those marked as required in the table below:


        - salary

        - address:
          - street
          - country
          - zipcode
        - manager:
          - name
          - title

        Validation for `start_date` and `end_date` is performed to ensure
        logical dates are provided. `end_date` must be after `start_date`, and
        both dates must be after 1900-01-01.
      operationId: createEmployer
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: Create an employer for the input `candidate_id`.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/EmployerCreate'
      responses:
        '200':
          $ref: '#/components/responses/EmployerCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/employers
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d name=Checkr \
                -d position=Engineer \
                -d salary=10000 \
                -d address\[street\]=123+Main+St. \
                -d address\[city\]=San+Francisco \
                -d address\[state\]=CA \
                -d address\[zipcode\]=94108 \
                -d address\[country\]=US \
                -d contract_type=full_time \
                -d start_date=2016-01-22 \
                -d end_date=2017-01-22 \
                -d manager\[name\]=Joe \
                -d manager\[title\]=Manager \
                -d employer_url=www.employer.com
    get:
      tags:
        - Employers
      summary: List existing Employers
      description: |
        Returns a list of existing Employers for the input `candidate_id`.
      operationId: employersListByCandidate
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: Returns the list of employers for the input `candidate_id`.
          schema:
            type: string
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/EmployersList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com//v1/candidates/e44aa283528e6fde7d542194/employers
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/employers/{employer_id}':
    parameters:
      - name: employer_id
        in: path
        description: The Employer's ID.
        required: true
        schema:
          type: string
      - name: candidate_id
        description: The Candidate's ID.
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Employers
      summary: Delete an existing Employer
      description: |
        Deletes an existing Employer with the input `id`.
      operationId: employerDelete
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/EmployerDeleted'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/employers/95a95172bb81143ed44e403c
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    get:
      tags:
        - Employers
      summary: Retrieve an existing Employer
      description: >
        Returns an existing Employer with the input `candidate_id` or
        `employer_id`.
      operationId: getEmployer
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Employer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/employers/ca27df84be5b50dfa7ee1cda
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/schools':
    post:
      tags:
        - Schools
      summary: Create a new School
      description: >
        Creates a new School resource.


        Validation for `start_date` and `end_date` is performed to ensure
        logical dates are provided. `end_date` must be after `start_date`, and
        both dates must be after 1900-01-01.


        If the country is not US, the following parameters are required in
        addition to those marked as required below:


        - year_awarded

        - phone

        - minor

        - start_date

        - end_date

        - current

        - address
          - street
          - city
          - zipcode
          - state
          - country
      operationId: createSchoolForCandidate
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: Creates a School for the input `candidate_id`.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/SchoolCreate'
      responses:
        '200':
          $ref: '#/components/responses/SchoolCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/schools
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d name=College\ University \
                -d address\[street\]=1+Circle+Avenue \
                -d address\[city\]=San+Francisco \
                -d address\[zipcode\]=94105 \
                -d address\[state\]=CA \
                -d address\[country\]=US \
                -d degree=BS \
                -d year_awarded=2017 \
                -d major=Computer+Science \
                -d phone=111-111-1111 \
                -d minor=Background+Checks \
                -d start_date=2012-09-25 \
                -d end_date=2017-05-29 \
                -d current=false \
                -d school_url=www.school.com
    get:
      tags:
        - Schools
      summary: List existing Schools
      description: |
        Returns a list of existing Schools for the input `candidate_id`.
      operationId: schoolsListByCandidate
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: Returns the list of schools for the input `candidate_id`.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SchoolsList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/schools/fe8b5a63af2799aba7fdf64d
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/schools/{id}':
    parameters:
      - name: id
        in: path
        description: The School's ID.
        required: true
        schema:
          type: string
      - name: candidate_id
        in: path
        description: The Candidate's ID.
        required: true
        schema:
          type: string
    delete:
      tags:
        - Schools
      summary: Delete an existing School
      description: |
        Deletes an existing School with the input `school_id`.
      operationId: schoolDelete
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/SchoolDeleted'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/schools/95a95172bb81143ed44e403c
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    get:
      tags:
        - Schools
      summary: Retrieve an existing School
      description: |
        Returns an existing School with the input `school_id`.
      operationId: getSchool
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/School'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/schools/fe8b5a63af2799aba7fdf64d
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/ssn':
    get:
      tags:
        - SSN
      summary: Get a candidate's encrypted SSN
      description: |
        Returns an encrypted SSN for the input `candidate_id`.
      operationId: getCandidateSsn
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: The candidate's ID.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Ssn'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/EncryptionKeyError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/ssn/ \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/professional_licenses':
    get:
      tags:
        - Professional Licenses
      summary: List existing Professional Licenses
      description: >
        Returns a list of existing Professional Licenses for the input
        `candidate_id`.
      operationId: professionalLicensesListByCandidate
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: The Candidate's ID.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ProfessionalLicensesList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/a50a341aead83f1292d8ccf9/professional_licenses
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    delete:
      tags:
        - Professional Licenses
      summary: Delete existing Professional License(s)
      description: >
        Returns a list of existing Professional Licenses for the input
        `candidate_id` that were removed.
      operationId: professionalLicensesDeleteByCandidate
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: path
          required: true
          description: The Candidate's ID.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ProfessionalLicenseDelete'
      responses:
        '200':
          $ref: '#/components/responses/ProfessionalLicensesList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >-
            $ curl -X DELETE
            https://api.checkr.com/v1/candidates/a50a341aead83f1292d8ccf9/professional_licenses
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d certification_organization_id=295DB417-A9D7-41DD-BE4A-64F014DF1D49 \
  '/candidates/{id}':
    parameters:
      - name: id
        description: The Candidate's ID.
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Candidates
      summary: Update an existing Candidate
      description: >
        Updates an existing Candidate.


        Attempts to update a field that cannot be updated will return a 400
        error stating "... cannot be updated”. For example, attempting to update
        an SSN will return 400 stating "Candidate SSN can not be updated because
        it has reports”. 


        Updating `geo_ids` will **replace** all existing Geos. To keep existing
        geos, include their IDs in the update request. `geo_ids` cannot be
        updated if the candidate's work location is outside the US.

        Only fields with `null` values can be updated after a Report has been
        ordered for a Candidate with the exception of the following fields:

        - email

        - previous_driver_license_number

        - previous_driver_license_state

        - copy_requested

        - custom_id

        - geo_ids


        Updating metadata with an empty value (null or empty object) will delete
        existing metadata. Individual keys may also be set and unset.

        - Adding a new key-value pair will maintain all existing key-value
        pairs.

        - Providing a new value for an existing key will update the old value to
        the new value.

        - Providing an empty value for an existing key will remove that key from
        the metadata object.

        - When all keys in the metadata object have empty values, the object
        will be deleted.
      operationId: updateCandidate
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/CandidatePatch'
      responses:
        '200':
          $ref: '#/components/responses/CandidateUpdated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d first_name=John \
                -d middle_name=Alfred \
                -d last_name=Smith \
                -d email=john.smith@gmail.com \
                -d phone=5555555555 \
                -d zipcode=90401 \
                -d dob=1970-01-22 \
                -d ssn=543-43-4645 \
                -d 'geo_ids[]=87f5bb4983eade22c55f4731&geo_ids[]=22b20140fc1adfae693ca35c'
    get:
      tags:
        - Candidates
      summary: Retrieve an existing Candidate
      description: |
        Retrieves an existing Candidate.
      operationId: getCandidate
      security:
        - basic_auth: []
      parameters:
        - name: include
          in: query
          description: >-
            Comma delimited string specifying the resources to be embedded in
            the returned Candidate object. See [Embedding
            Resources](#section/Reference/Embedding-Resources).
          required: false
          example: 'reports,geos'
          schema:
            type: string
            enum:
              - reports
              - geos
      responses:
        '200':
          $ref: '#/components/responses/Candidate'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194?include=reports
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{id}/pii':
    parameters:
      - name: id
        description: The Candidate's ID.
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Candidates
      summary: Request PII removal for a Candidate
      description: >
        Requests the removal of PII from an existing Candidate


        Requesting the removal of PII from a candidate who has already had PII
        removed will result in an error.
      operationId: deleteCandidate
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/CandidatePiiRemoval'
      responses:
        '200':
          $ref: '#/components/responses/Candidate'
        '400':
          $ref: '#/components/responses/BadPiiRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /counties:
    parameters:
      - name: states
        in: query
        description: >-
          A comma-separated list of states' Federal Information Processing
          Series (FIPS) values to query.
        required: false
        schema:
          type: string
    get:
      tags:
        - Counties
      summary: Get Counties by State(s)
      description: >
        Returns a list of all counties for the input state(s). If no state is
        provided with the query, returns a list of all counties in the United
        States.
      operationId: getCounties
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Counties'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/counties?states=HI \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/county_criminal_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the County Criminal Search to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - County Criminal Search
      summary: Retrieve an existing County Criminal Search
      description: |
        Returns an existing County Criminal Search with the input ID.
      operationId: getCountyCriminalSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/CountyCriminalSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/county_criminal_searches/539fdcf335644a0ef4000001
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/documents/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Document to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - Documents
      summary: Retrieve a Document
      description: >
        Returns an existing Document with the input ID.


        Report Document IDs can be retrieved from the [Retrieve an existing
        Report](#operation/getReport)

        endpoint. Candidate Document IDs can be retrieved using the

        [List a Candidate's Documents](#operation/getCandidateDocuments)
        endpoint.
      operationId: getDocument
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Document'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/documents/b73f89e14b393979857806f9 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/education_verifications/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Education Verification to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - Education Verification
      summary: Retrieve an existing Education Verification
      description: |
        Returns an existing Education Verification with the input ID.
      operationId: getEducationVerification
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/EducationVerification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/education_verifications/59690155331711004e252cd9
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/employment_verifications/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Employment Verification to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - Employment Verification
      summary: Retrieve an existing Employment Verification
      description: |
        Returns an existing Employment Verification with the input ID.
      operationId: getEmploymentVerification
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/EmploymentVerification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/employment_verifications/59690155331711004e252cd8
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/federal_criminal_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Federal Criminal Search to retrieve.
        required: true
        schema:
          type: string
      - name: exclude
        in: query
        description: >-
          Indicates whether to return disctrict screenings in pointer search
          payload
        example: district
        required: false
        schema:
          type: string
    get:
      tags:
        - Federal Criminal Search
      summary: Retrieve an existing Federal Criminal Search
      description: |
        Returns an existing Federal Criminal Search with the input ID.
      operationId: getFederalCriminalSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/FederalCriminalSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/federal_criminal_searches/539fd88c101897f7cd000006
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/federal_district_criminal_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Federal District Criminal Search to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - Federal District Criminal Search
      summary: Retrieve an existing Federal District  Criminal Search
      description: |
        Returns an existing Federal District Criminal Search with the input ID.
      operationId: getFederalDistrictCriminalSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/FederalDistrictCriminalSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/federal_district_criminal_searches/539fd88c101897f7cd000006
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/federal_civil_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Federal Civil Search to retrieve.
        required: true
        schema:
          type: string
      - name: exclude
        in: query
        description: >-
          Indicates whether to return district screenings in pointer search
          payload
        example: district
        required: false
        schema:
          type: string
    get:
      tags:
        - Federal Civil Search
      summary: Retrieve an existing Federal Civil Search
      description: |
        Returns an existing Federal Civil Search with the input ID.
      operationId: getFederalCivilSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/FederalCivilSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/federal_civil_searches/539fd88c101897f7cd000006
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/federal_civil_district_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Federal District Civil Search to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - Federal District Civil Search
      summary: Retrieve an existing Federal District Civil Search
      description: |
        Returns an existing Federal District Civil Search with the input ID.
      operationId: getFederalDistrictCivilSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/FederalDistrictCivilSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/federal_district_civil_searches/539fd88c101897f7cd000006
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /geos:
    post:
      tags:
        - Geos
      summary: Create a new Geo
      description: >
        Creates a new Geo resource.


        **Note**: Attempting to create a new Geo with the same name/state
        combination will result in an

        409 error
      operationId: createGeo
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/GeoCreate'
      responses:
        '201':
          $ref: '#/components/responses/GeoCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/DuplicateGeoError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X POST https://api.checkr.com/v1/geos \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d name=San+Francisco \
                -d city=San+Francisco \
                -d state=CA
    get:
      tags:
        - Geos
      summary: List existing Geos
      description: |
        Returns a list of existing Geos with the input `name` or `state`.
      operationId: geosList
      security:
        - basic_auth: []
      parameters:
        - name: name
          in: query
          description: Returns all Geos with the input `name`.
          schema:
            type: string
        - name: state
          in: query
          description: Returns all Geos with the input state.
          schema:
            type: string
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/GeosList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/geos \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/geos/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Geo.
        required: true
        schema:
          type: string
    get:
      tags:
        - Geos
      summary: Retrieve an existing Geo
      description: |
        Returns an existing Geo with the input ID.
      operationId: getGeo
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Geo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/geos/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    delete:
      tags:
        - Geos
      summary: Delete an existing Geo
      description: |
        Deletes an existing Geo.
      operationId: deleteGeo
      security:
        - basic_auth: []
      responses:
        '204':
          $ref: '#/components/responses/GeoDeleted'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/UsedGeoError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/geos/b719804dc15c655f8529a2f2 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    post:
      tags:
        - Geos
      summary: Update an existing Geo
      description: |
        Updates an existing Geo resource with the input `city`.
        `city` can only be added once.
      operationId: updateGeo
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/GeoUpdate'
      responses:
        '200':
          $ref: '#/components/responses/GeoUpdated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/GeoCityUpdatedError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/geos/b719804dc15c655f8529a2f2 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d city=San+Francisco
  '/global_watchlist_searches/{id}':
    parameters:
      - name: id
        description: ID of the Global Watchlist Search to retrieve.
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Global Watchlist Search
      summary: Retrieve an existing Global Watchlist Search
      description: |
        Returns an existing Global Watchlist Search with the input ID.
      operationId: getGlobalWatchlistSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/GlobalWatchlistSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/global_watchlist_searches/539fd88c101897f7cd000008
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /hierarchy:
    post:
      tags:
        - Hierarchy (Enabled by request)
      summary: Create Hierarchy
      description: >
        Creates a new or replaces an existing Account Hierarchy.


        The Hierarchy endpoint performs ingestion asynchronously. Check the
        status

        of the ingestion by calling `GET /v1/hierarchy/status`. Once ingested,
        use the Checkr Dashboard to assign your nodes to Packages, PAMs, and
        Users.
      operationId: updateAccountHierarchy
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/HierarchyUpdate'
      responses:
        '202':
          $ref: '#/components/responses/HierarchyUpdated'
        '400':
          $ref: '#/components/responses/BadHierarchyRequestError'
        '403':
          $ref: '#/components/responses/HierarchyNotEnabledError'
        '423':
          $ref: '#/components/responses/IngestionInProgressError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X POST https://api.checkr.com/v1/hierarchy \
                -H 'Content-Type: application/json' \
                -u d3a265269d18997528b04cfa82bc6a108c1b8553: \
                -d '{ "nodes": [{"name":"Acme Staffing", "tier": "department", "custom_id": "zpy8orej4r614ize"}, {"name":"Drivers Staffing", "tier": "divison", "custom_id": "ocquzig4k3whppfx", "parent_custom_id": "zpy8orej4r614ize"}]}'
    get:
      tags:
        - Hierarchy (Enabled by request)
      summary: Retrieve Hierarchy (Deprecated)
      description: >
        **Note:** This endpoint is _deprecated_ and will no longer be supported.
        Please use the new [List existing Nodes](#operation/nodesList) endpoint
        instead.


        Retrieves the current Hierarchy for the Account.


        Returns the account hierarchy in its entirety, or from a specific node
        to its children. The returned JSON object will include the Packages
        assigned to each node in the dashboard. This is useful for building UIs
        that truncate the list of Packages displayed to a requester, or display
        only the nodes that are relevant to the requester.


        Output is arranged hierarchically, with child nodes accessible through
        the parent node. Customers without large hierarchy mode enabled who do
        not specify pagination parameters will be returned the entire hierarchy.
        Customers with large hierarchy mode enabled and pagination parameters
        specified in this request will be returned the given page and number of
        results per page. If pagination parameters are not included, only the
        first page of the hierarchy will be returned.


        **Note:** Customers with large hierarchy mode enabled will see a
        different response. Please reach out to clients@checkr.com if you have
        any questions.
      operationId: getAccountHierarchy
      security:
        - basic_auth: []
      parameters:
        - name: node_custom_ids
          in: query
          description: >-
            An array of `custom_ids` for the nodes to return. Returns the
            portion(s) of the Account Hierarchy matching the input nodes and
            their descendants.
          schema:
            type: array
            items:
              type: string
        - name: page
          in: query
          description: Specifies the page to retrieve. The default page is 1.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many nodes each page should contain. The default
            per_page value is 20.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/AccountHierarchy'
        '403':
          $ref: '#/components/responses/HierarchyNotEnabledError'
        '404':
          $ref: '#/components/responses/HierarchyNotFoundError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl https://api.checkr.com/v1/hierarchy \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /hierarchy/nodes:
    post:
      tags:
        - Hierarchy (Enabled by request)
      summary: Add nodes to a hierarchy
      description: |
        Adds new nodes to an existing Account Hierarchy.

        This endpoint creates the nodes synchronously.
      operationId: createAccountHierarchyNodes
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/HierarchyUpdate'
      responses:
        '201':
          $ref: '#/components/responses/HierarchyNodes'
        '400':
          $ref: '#/components/responses/BadHierarchyRequestError'
        '403':
          $ref: '#/components/responses/HierarchyNotEnabledError'
        '423':
          $ref: '#/components/responses/IngestionInProgressError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X POST https://api.checkr.com/v1/hierarchy/nodes \
                -H 'Content-Type: application/json' \
                -u d3a265269d18997528b04cfa82bc6a108c1b8553: \
                -d '{ "nodes": [{"name":"Acme Staffing", "tier": "department", "custom_id": "zpy8orej4r614ize"}, {"name":"Drivers Staffing", "tier": "divison", "custom_id": "ocquzig4k3whppfx", "parent_custom_id": "zpy8orej4r614ize"}]}'
  /hierarchy/status:
    get:
      tags:
        - Hierarchy (Enabled by request)
      summary: Retrieve Hierarchy update status
      description: >
        Returns the status of the latest Hierarchy ingestion request.


        This call requires no input, and is provided as a means to determine the
        progress of an

        asynchronous `POST /hierarchy` request.
      operationId: getAccountHierarchyStatus
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/HierarchyStatus'
        '403':
          $ref: '#/components/responses/HierarchyNotEnabledError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl https://api.checkr.com/v1/hierarchy/status \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /invitations:
    post:
      tags:
        - Invitations
      summary: Create a new Invitation
      description: |
        Creates a new Invitation resource.
      operationId: createInvitation
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/InvitationCreate'
      responses:
        '201':
          $ref: '#/components/responses/InvitationCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/PackageNotFoundError'
      x-codeSamples:
        - lang: curl
          source: |-
            $ curl -X POST https://api.checkr.com/v1/invitations \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -H 'Content-Type: application/json' \
                -d '{"candidate_id":"e44aa283528e6fde7d542194",
                    "package":"driver_pro",
                    "work_locations":[{"country":"US"}]}'
    get:
      tags:
        - Invitations
      summary: List existing Invitations
      description: >
        Returns a list of existing Invitations with the input `status` or
        `candidate_id`.


        * If no parameters are passed, returns all Invitations.


        * If `candidate_id` or `status` is passed, returns Invitations that
        match the input parameter.


        * If both `candidate_id` and `status` are passed, return Invitations
        that match both parameters.


        Returns 400 if the (optional) `status` parameter is not `pending`,
        `expired`, or `completed`.

        <b>Note: </b>This call will not return invitations with non-US
        `work_locations`. Use [GET /invitations/{id}](#operation/getInvitation)
        to retrieve candidates outside the US.
      operationId: listOfInvitations
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: query
          description: ID of the candidate to whom the invitation was issued.
          schema:
            type: string
        - name: status
          in: query
          description: Status of the Invitation.
          schema:
            type: string
            enum:
              - pending
              - completed
              - expired
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/InvitationsList'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/invitations \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d status=pending
  '/invitations/{id}':
    parameters:
      - name: id
        in: path
        description: The Invitation's ID.
        required: true
        schema:
          type: string
    get:
      tags:
        - Invitations
      summary: Retrieve an existing Invitation
      description: |
        Returns an existing Invitation with the input ID.
      operationId: getInvitation
      parameters:
        - name: include_deleted
          in: query
          description: Retrieve an invitation that has been deleted
          required: false
          schema:
            type: boolean
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Invitation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/invitations/3c0a0ca94caaab6ca9634f76 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    delete:
      tags:
        - Invitations
      summary: Cancel an existing Invitation
      description: |
        Cancels an existing Invitation.
      operationId: cancelInvitation
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/InvitationCanceled'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/invitations/4722c07dd9a10c3985ae432a \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9
  '/international_adverse_media_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the International Adverse Media Search to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - International Adverse Media Search
      summary: Retrieve an existing International Adverse Media Search
      description: >
        Returns an existing International Adverse Media Search with the input
        ID.
      operationId: getInternationalAdverseMediaSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/InternationalAdverseMediaSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/international_adverse_media_searches/41007cffefb435cf7d701f75d8b86c
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/international_criminal_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the International Criminal Search to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - International Criminal Search
      summary: Retrieve an existing International Criminal Search
      description: |
        Returns an existing International Criminal Search with the input ID.
      operationId: getInternationalCriminalSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/InternationalCriminalSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/international_criminal_searches/41007cffefb435cf7d701f75d8b86d
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/international_education_verifications/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the International Education Verificaiton to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - International Education Verification
      summary: Retrieve an existing International Education Verificaiton
      description: >
        Returns an existing International Education Verificaiton with the input
        ID.
      operationId: getInternationalEducationVerificaiton
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/InternationalEducationVerification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/international_education_verifications/41007cffefb435cf7d701f75d8b86e
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/international_employment_verifications{id}':
    parameters:
      - name: id
        in: path
        description: ID of the International Employment Verification to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - International Employment Verification
      summary: Retrieve an existing International Employment Verification
      description: >
        Returns an existing International Employment Verification with the input
        ID.
      operationId: getInternationalEmploymentVerification
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/InternationalEmploymentVerification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/international_education_verifications/41007cffefb435cf7d701f75d8b86f
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/international_global_watchlist_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the International Global Watchlist Search to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - International Global Watchlist Search
      summary: Retrieve an existing International Global Watchlist Search
      description: >
        Returns an existing International Global Watchlist Search with the input
        ID.
      operationId: getInternationalGlobalWatchlistSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/InternationalGlobalWatchlistSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/international_global_watchlist_searches/41007cffefb435cf7d701f75d8b87a
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/international_identity_document_validation/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the International Identity Document Validation to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - International Identity Document Validation
      summary: Retrieve an existing International Identity Document Validation
      description: >
        Returns an existing International Identity Document Validation with the
        input ID.
      operationId: getInternationalIdentityDocumentValidation
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/InternationalIdentityDocumentValidation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/international_identity_document_validations/41007cffefb435cf7d701f75d8b87b
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/international_motor_vehicle_reports/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the International Motor Vehicle Report to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - International Motor Vehicle Report
      summary: Retrieve an existing International Motor Vehicle Report
      description: >
        Returns an existing International Motor Vehicle Report with the input
        ID.
      operationId: getInternationalMotorVehicleReport
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/InternationalMotorVehicleReport'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/international_motor_vehicle_reports/41007cffefb435cf7d701f75d8b86d
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/motor_vehicle_reports/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Motor Vehicle Report to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - Motor Vehicle Report
      summary: Retrieve an existing Motor Vehicle Report
      description: |
        Returns an existing Motor Vehicle Report with the input ID.
      operationId: getMotorVehicleReport
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/MotorVehicleReport'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/motor_vehicle_reports/539fd88c101897f7cd000007
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/national_criminal_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the National Criminal Search to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - National Criminal Search
      summary: Retrieve an existing National Criminal Search
      description: |
        Returns an existing National Criminal Search with the input ID.
      operationId: getNationalCriminalSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/NationalCriminalSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/national_criminal_searches/539fd88c101897f7cd000006
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /nodes:
    get:
      tags:
        - Nodes
      summary: List existing Nodes
      description: >
        Returns a list of existing Nodes that make up the current Account
        Hierarchy.


        * If `include=packages` is passed, each Node object in the response will
        include a "packages" field. This will be an array of strings
        representing the slugs of the account Packages that are assigned
        (directly or indirectly) to the given Node. This field can be used to
        build UIs that truncate the list of Packages displayed to a requester,
        or to display only the nodes that are relevant to the requester.


        * If `include=packages` is not passed, no package information will be
        included in the response.


        This endpoint uses pagination; please see the corresponding [reference
        page](#section/Reference/Pagination) for details.
      operationId: nodesList
      security:
        - basic_auth: []
      parameters:
        - name: include
          in: query
          description: >-
            Includes a "packages" array with each Node object, containing a list
            of slugs for packages that are assigned to that node or its
            ancestors.
          required: false
          example: packages
          schema:
            type: string
            enum:
              - packages
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
        - name: order_by
          in: query
          description: >-
            Returns records sorted by custom_id or created_at. If neither is
            specified, records will be sorted by created_at.
          required: false
          example: custom_id
          schema:
            type: string
            nullable: true
            enum:
              - custom_id
              - created_at
        - name: order
          in: query
          description: >-
            Returns records listed in ascending or descending order of the
            order_by parameter. If neither is specified, records will be listed
            in ascending order.
          required: false
          example: desc
          schema:
            type: string
            nullable: true
            enum:
              - asc
              - desc
      responses:
        '200':
          $ref: '#/components/responses/NodesList'
        '403':
          $ref: '#/components/responses/HierarchyNotEnabledError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl https://api.checkr.com/v1/nodes?include=packages \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /packages:
    get:
      tags:
        - Packages
      summary: List existing Packages
      description: |
        Returns a list of all existing Packages.
      operationId: packagesList
      security:
        - basic_auth: []
      parameters:
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/PackagesList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/packages \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/packages/{id}':
    parameters:
      - name: id
        description: ID of the Package to retrieve.
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Packages
      summary: Retrieve an existing Package
      description: |
        Returns an existing Package with the input ID.
      operationId: getPackage
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Package'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/packages \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    delete:
      tags:
        - Packages
      summary: Delete an existing Package
      description: |
        Deletes an existing Package.
      operationId: deletePackage
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/PackageDeleted'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/packages/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/professional_license_verifications/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Professional License Verification to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - Professional License Verification
      summary: Retrieve an existing Professional License Verification
      description: |
        Returns an existing Professional License Verification with the input ID.
      operationId: getProfessionalLicenseVerification
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/ProfessionalLicenseVerification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /programs:
    get:
      tags:
        - Programs
      summary: List existing Programs
      description: |
        Returns a list of existing Programs with the input `name`.
      operationId: programsList
      security:
        - basic_auth: []
      parameters:
        - name: name
          in: query
          description: Returns Programs with the input `name`.
          schema:
            type: string
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/ProgramsList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/programs \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/programs/{id}':
    parameters:
      - name: id
        description: ID of the Program to retrieve.
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Programs
      summary: Retrieve an existing Program
      description: |
        Returns an existing Program with the input ID.
      operationId: getProgram
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Program'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/programs/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/reports/{report_id}/adverse_actions':
    post:
      tags:
        - Adverse Actions
      summary: Create a new Adverse Action
      description: >
        Creates a new Adverse Action.


        <b>Note: </b>Report must be in a `consider` status and cannot have any
        existing Adverse Actions that have not been canceled.
      operationId: createAdverseAction
      security:
        - basic_auth: []
      parameters:
        - name: report_id
          in: path
          required: true
          description: The ID of the Report for which the Adverse Action will be created.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/AdverseActionCreate'
      responses:
        '200':
          $ref: '#/components/responses/AdverseActionCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/reports/b861a56db1b1b89692dd6118/adverse_actions
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d post_notice_scheduled_at=2016-10-07T12:34:00Z \
                -d 'adverse_item_ids[]=57ed4ce3057e0b002adc6d90&adverse_item_ids[]=57ed4ce3057e0b002adc6d91'
  /reports:
    post:
      tags:
        - Reports
      summary: Create a new Report
      description: >
        Creates a new Report resource.


        <b>Notes: </b>

        - This resource does not support the creation of reports which include
        international Packages. Use the [`/invitations` API](#tag/invitations)
        to order these reports.

        - Employment Verifications, Education Verifications, and Credit Checks
        may not be initiated using the `/reports` API. Please use the
        [`/invitations` API](#tag/invitations) to initiate the [Checkr-Hosted
        Apply Flow](/#section/Getting-Started/Create-an-Invitation) when
        ordering background checks that include any of these screening types.

        - Creating a Report which includes an Occupational Health or Drug

        Check will automatically issue an email invitation to the candidate to
        schedule their appointment at a clinic of their choice.
      operationId: createReport
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/ReportCreate'
      responses:
        '200':
          $ref: '#/components/responses/ReportCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/PackageNotFoundError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X POST https://api.checkr.com/v1/reports \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d package=driver_pro \
                -d candidate_id=e44aa283528e6fde7d542194
  '/reports/{id}':
    parameters:
      - name: id
        in: path
        description: The Report's ID.
        required: true
        schema:
          type: string
    post:
      tags:
        - Reports
      summary: Update an existing Report
      description: >
        Updates the `package` or `adjudication` for an existing Report resource.


        Use this endpoint to update reports which include the candidate's Social
        Security Number. To update a Report which does not include an SSN, first
        use the [update Candidate](#operation/updateCandidate) request to add
        the candidate’s SSN before updating the report.


        Either `package` or `adjudication` is required.


        <b>Note: </b>This endpoint may also be used to update international
        reports for candidates which do not include an SSN.

        <div class="alert alert-info">

          **Note**: The Package of a Report cannot be updated if it has an Adverse Action with the status: `complete` or `dispute`. To proceed, cancel the Adverse Action or create a new Report.

        </div>
      operationId: updateReport
      security:
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                package:
                  type: string
                  description: |
                    Slug of the Package.
                  example: driver_pro
                adjudication:
                  type: string
                  enum:
                    - engaged
                  example: engaged
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ReportUpdated'
        '400':
          $ref: '#/components/responses/PreExistingAdverseActionError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d package=driver_pro
    get:
      tags:
        - Reports
      summary: Retrieve an existing Report
      description: |
        Returns an existing Report with the input ID.
      operationId: getReport
      security:
        - basic_auth: []
      parameters:
        - name: include
          in: query
          description: >-
            Comma delimited string specifying the resources to be embedded in
            the returned Report object. See [Embedding
            Resources](#section/Reference/Embedding-Resources).
          required: false
          example: 'candidate,drug_screening'
          schema:
            type: string
            enum:
              - arrest_search
              - candidate
              - candidate_stories
              - county_civil_searches
              - county_criminal_searches
              - credit_report
              - dispute_comments
              - documents
              - drug_screening
              - education_verification
              - employment_verification
              - eviction_search
              - facis_search
              - federal_civil_search
              - federal_criminal_search
              - geos
              - global_watchlist_search
              - international_adverse_media_searches
              - international_criminal_searches
              - international_criminal_searches_v2
              - international_education_verification
              - international_employment_verification
              - international_global_watchlist_search
              - international_identity_document_validation
              - motor_vehicle_report
              - municipal_criminal_searches
              - national_criminal_search
              - personal_reference_verifications
              - photo_verification
              - pointer_state_criminal_searches
              - professional_reference_verifications
              - professional_license_verifications
              - program
              - public_comments
              - self_disclosures
              - sex_offender_search
              - ssn_trace
              - state_criminal_searches
              - terrorist_watchlist_search
      responses:
        '200':
          $ref: '#/components/responses/Report'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a?include=drug_screening
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/reports/{id}/complete':
    parameters:
      - name: id
        description: The Report's ID.
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Reports
      summary: Complete an existing Report
      description: >
        Cancels all pending or suspended screenings and completes the report.


        Use this endpoint to complete reports which include pending or suspended
        screenings. If a report is completed with pending or suspended
        screenings, the following events will be triggered:

          - The `status` for all in-progress screenings within the report will be updated to `canceled`.
          - A cancellation reason and the reason’s description will be added to each canceled screening.
          - Checkr will issue webhooks upon report completion.
            - If all screenings are canceled, a `report.canceled` webhook will be issued.
            - If at least one screening has a result before the report is completed, Checkr will issue two webhooks: first, `report.updated`, followed by `report.complete`.
      operationId: completeReport
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/ReportUpdated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae32a/complete \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9
  '/reports/{id}/eta':
    parameters:
      - name: id
        in: path
        description: ID of the Report for which the ETA was generated.
        required: true
        schema:
          type: string
    get:
      tags:
        - Report ETA
      summary: Retrieve a Report's ETA
      description: |
        Returns an existing Report ETA for the input Report ID.
      operationId: requestReportETA
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/ReportEtaAvailable'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/PredictionUnavailable'
      x-codeSamples:
        - lang: curl
          source: >
            curl -X GET
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/eta \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/reports/{id}/tags':
    parameters:
      - name: id
        in: path
        description: The Report's ID.
        required: true
        schema:
          type: string
    post:
      tags:
        - Report Tags
      summary: Add a tag to a Report
      description: >
        This request is used to add a tag to a Report.

        <p><b>Note: </b>The <code>tag</code> value passed to <code>POST
        /v1/reports/{id}/tags</code> will match the <code>name</code> field in
        the response.</p>
      operationId: addTagToReport
      parameters:
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      security:
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tag
              properties:
                tag:
                  type: string
                  example: To Review
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ReportTagsAdded'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            curl -X POST
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/tags \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d tag=In+Progress
    put:
      tags:
        - Report Tags
      summary: Update tags for a Report
      description: |
        This request is used to define all tags for a Report.
      operationId: updateTagsForReport
      security:
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  type: array
                  items:
                    type: string
                    example: To Review
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ReportTagsUpdated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            curl -X PUT
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/tags \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d tags[]=West+Coast \
                -d tags[]=To+Review
    get:
      tags:
        - Report Tags
      summary: Retrieve tags for a Report
      description: |
        Retrieves tags for the input Report.
      operationId: getTagsForReport
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/ReportTags'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            curl -X GET
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/tags \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    delete:
      tags:
        - Report Tags
      summary: Delete a tag from a Report
      description: |
        This request is used to delete a tag from a Report.
      operationId: deleteTagFromReport
      security:
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tag
              properties:
                tag:
                  type: string
                  example: West Coast
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ReportTagsDeleted'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            curl -X DELETE
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/tags \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d tag=West+Coast
  '/reports/{report_id}/addresses':
    get:
      tags:
        - Report Addresses
      summary: List existing Report addresses
      description: This request is used to retrieve addresses for a given Report.
      operationId: addressesListByReport
      security:
        - basic_auth: []
      parameters:
        - name: report_id
          in: path
          required: true
          description: Returns the list of Report addresses for the input `report_id`.
          schema:
            type: string
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/ReportAddressesList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/addresses
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/reports/{report_id}/adverse_items':
    get:
      tags:
        - Adverse Items
      summary: List existing Adverse Items
      description: >
        Returns a list of existing Adverse Items with the input `report_id`.


        <b>Note: </b>Report must be in a `consider` status and cannot have any
        existing Adverse Actions that have not been canceled.


        Returns 400 if the Report's status is not Consider or the Report already
        has an active (non-cancelled) Adverse Action.
      operationId: adverseItemsByReport
      security:
        - basic_auth: []
      parameters:
        - name: report_id
          in: path
          required: true
          description: The ID of the associated Report.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/AdverseItemsList'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/reports/b861a56db1b1b89692dd6118/adverse_items
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/reports/{report_id}/assessments':
    get:
      tags:
        - Assessments
      summary: List existing Assessments
      description: |
        Returns Assessments for an existing Report.
      operationId: assessmentsByReport
      security:
        - basic_auth: []
      parameters:
        - name: report_id
          in: path
          required: true
          description: The ID of the associated Report.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/AssessmentsList'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/reports/b861a56db1b1b89692dd6118/assessments
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/reports/{report_id}/candidate_stories':
    post:
      tags:
        - Candidate Stories
      summary: Create a new Candidate Story
      description: |
        Create a new Candidate Story for the input `report_id`.
      operationId: createCandidateStory
      security:
        - basic_auth: []
      parameters:
        - name: report_id
          in: path
          required: true
          description: Create an candidate story for the input `report_id`.
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CandidateStoryCreate'
      responses:
        '200':
          $ref: '#/components/responses/CandidateStoryCreated'
        '400':
          $ref: '#/components/responses/EntityConfigurationLimitExceeded'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/reports/{report_id}/verifications':
    get:
      tags:
        - Verifications
      summary: List existing Verifications
      description: |
        Returns a list of existing Verifications for the input `report_id`.
      operationId: verificationsListByReport
      security:
        - basic_auth: []
      parameters:
        - name: report_id
          in: path
          required: true
          description: Returns the list of verifications for the input `report_id`.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/VerificationsList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/reports/4722c07dd9a10c3985ae432a/verifications
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/sex_offender_searches/{id}':
    parameters:
      - name: id
        description: ID of the Sex Offender Search to retrieve.
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Sex Offender Registry Search
      summary: Retrieve an existing Sex Offender Registry Search
      description: |
        Returns an existing Sex Offender Registry Search with the input ID.
      operationId: getSexOffenderSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/SexOffenderSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/sex_offender_searches/539fd88c101897f7cd000008
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/ssn_traces/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the SSN Trace to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - SSN Trace
      summary: Retrieve an existing SSN Trace
      description: |
        Returns an existing SSN Trace with the input ID.
      operationId: getSsnTrace
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/SsnTrace'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/ssn_traces/539fd88c101897f7cd000001 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/state_criminal_searches/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the State Criminal Search to retrieve.
        required: true
        schema:
          type: string
    get:
      tags:
        - State Criminal Search
      summary: Retrieve an existing State Criminal Search
      description: |
        Returns an existing State Criminal Search with the input ID.
      operationId: getStateCriminalSearch
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/StateCriminalSearch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/state_criminal_searches/539fdcf335644a0ef4000001
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /subscriptions:
    post:
      tags:
        - Subscriptions
      summary: Create a new Subscription
      description: >
        Creates a new Subscription.


        <b>Notes for International Customers: </b>Subscriptions are not
        available for reports which include international packages. 

        If your candidate is located outside the US, you may not create a
        Subscription for them.
      operationId: createSubscription
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/SubscriptionCreate'
      responses:
        '200':
          $ref: '#/components/responses/SubscriptionCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/PackageNotFoundError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X POST https://api.checkr.com/v1/subscriptions \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d package=driver_pro \
                -d start_date=2017-02-10 \
                -d interval_unit=month \
                -d interval_count=1 \
                -d candidate_id=4722c07dd9a10c3985ae432a
    get:
      tags:
        - Subscriptions
      summary: List existing Subscriptions
      description: Lists existing Subscriptions with the input parameters.
      operationId: getSubscriptions
      security:
        - basic_auth: []
      parameters:
        - name: candidate_id
          in: query
          schema:
            type: string
          description: ID of the candidate to search for subscriptions.
          required: false
        - name: created_after
          in: query
          description: Returns subscriptions created after the input date.
          required: false
          schema:
            type: string
            format: date-time
        - name: created_before
          in: query
          description: Returns subscriptions created before the input date.
          required: false
          schema:
            type: string
            format: date-time
        - name: status
          description: Returns subscriptions with the input status.
          in: query
          required: false
          schema:
            type: string
            enum:
              - active
              - inactive
        - name: page
          in: query
          description: Specifies the page number to retrieve.
          required: false
          schema:
            type: number
            nullable: true
        - name: per_page
          in: query
          description: >-
            Indicates how many records each page should contain. The default
            value is 25 records.
          required: false
          schema:
            type: number
            nullable: true
      responses:
        '200':
          $ref: '#/components/responses/SubscriptionsList'
        '400':
          $ref: '#/components/responses/BadSubscriptionsListRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |
            $ curl -X GET https://api.checkr.com/v1/subscriptions \
                -d candidate_id=4722c07dd9a10c3985ae432a
                -d created_after=2021-12-21
                -d created_before=2021-12-31
                -d status=active
                -d page=2
                -d per_page=10
  '/subscriptions/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Subscription.
        required: true
        schema:
          type: string
    get:
      tags:
        - Subscriptions
      summary: Retrieve an existing Subscription
      description: |
        Retrieves an existing Subscription.
      operationId: getSubscription
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Subscription'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/subscriptions/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    post:
      tags:
        - Subscriptions
      summary: Update a Subscription
      description: >
        Updates a Subscription. Specify only those parameters you wish to
        change.
      operationId: updateSubscription
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/SubscriptionUpdate'
      responses:
        '200':
          $ref: '#/components/responses/SubscriptionCreated'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/subscriptions/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d package=driver_pro \
                -d start_date=2017-02-10 \
                -d interval_unit=month \
                -d interval_count=1 \
                -d candidate_id=e44aa283528e6fde7d542194
    delete:
      tags:
        - Subscriptions
      summary: Cancel an existing Subscription
      description: |
        Cancels an existing Subscription.
      operationId: cancelSubscription
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/SubscriptionCanceled'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/subscriptions/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/candidates/{candidate_id}/continuous_checks':
    parameters:
      - name: candidate_id
        in: path
        description: The Candidate's ID.
        required: true
        schema:
          type: string
    post:
      tags:
        - Continuous Checks
      summary: Create a new Continuous Check
      description: |
        Creates a new Continuous Check resource.
      operationId: createContinuousCheck
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/ContinuousCheckCreate'
      responses:
        '201':
          $ref: '#/components/responses/ContinuousCheckCreated'
        '400':
          $ref: '#/components/responses/BadContinuousCheckRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ContinuousCheckMissingSSNTraceError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/continuous_checks
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d type=criminal
    get:
      tags:
        - Continuous Checks
      summary: List existing Continuous Checks
      description: |
        Returns a list of existing Continuous Checks.
      operationId: listOfContinuousChecks
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/ContinuousChecksList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/CandidateNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/candidates/e44aa283528e6fde7d542194/continuous_checks
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/continuous_checks/{id}':
    parameters:
      - name: id
        in: path
        description: The Continuous Check's ID.
        required: true
        schema:
          type: string
    get:
      tags:
        - Continuous Checks
      summary: Retrieve an existing Continuous Check
      description: |
        Returns an existing Continuous Check with the input ID.
      operationId: getContinuousCheck
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/ContinuousCheck'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/ContinuousCheckNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/continuous_checks/4722c07dd9a10c3985ae432a
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    post:
      tags:
        - Continuous Checks
      summary: Update an existing Continuous Check
      description: |
        Updates the node and/or work locations of an existing Continuous Check.
      operationId: postContinuousCheck
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/ContinuousCheckUpdate'
      responses:
        '201':
          $ref: '#/components/responses/ContinuousCheckUpdated'
        '400':
          $ref: '#/components/responses/BadContinuousCheckUpdateRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/ContinuousCheckNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X POST
            https://api.checkr.com/v1/continuous_checks/76c7435e035d43b55bb9d1c6
            \
                 -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                 -d node=zpy8orej4r614ize
    delete:
      tags:
        - Continuous Checks
      summary: Cancel an existing Continuous Check
      description: |
        Cancels an existing Continuous Check.
      operationId: cancelContinuousCheck
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/ContinuousCheckCanceled'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/ContinuousCheckNotFoundError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X DELETE
            https://api.checkr.com/v1/continuous_checks/4722c07dd9a10c3985ae432a
            \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9
  '/verifications/{verification_id}':
    get:
      tags:
        - Verifications
      summary: Retrieve a Verification
      description: |
        Returns an existing Verification with the input ID
      operationId: getVerification
      security:
        - basic_auth: []
      parameters:
        - name: verification_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Verification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >
            $ curl -X GET
            https://api.checkr.com/v1/verifications/db313e73383710d4fa2f18fd \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  /webhooks:
    post:
      tags:
        - Webhooks
      summary: Create a new Webhook
      description: >
        Creates a new Webhook resource. An account can have a maximum of 2
        webhooks.
      operationId: createWebhook
      security:
        - basic_auth: []
      requestBody:
        $ref: '#/components/requestBodies/WebhookCreate'
      responses:
        '201':
          $ref: '#/components/responses/WebhookCreated'
        '400':
          $ref: '#/components/responses/BadWebhookCreateRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |-
            $ curl -X POST https://api.checkr.com/v1/webhooks \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9: \
                -d include_object=true \
                -d webhook_url=https://example.com
    get:
      tags:
        - Webhooks
      summary: List existing Webhooks
      description: |
        Returns a list of existing Webhooks
      operationId: webhooksList
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/WebhooksList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: |-
            $ curl -X GET https://api.checkr.com/v1/webhooks \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
  '/webhooks/${id}':
    parameters:
      - name: id
        in: path
        description: ID of the Webhook.
        required: true
        schema:
          type: string
    get:
      tags:
        - Webhooks
      summary: Retrieve a Webhook
      description: Returns the existing Webhook corresponding to the input ID.
      operationId: getWebhook
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/Webhook'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >-
            $ curl -X GET
            https://api.checkr.com/v1/webhooks/e44aa283528e6fde7d542194 \
                -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
    delete:
      tags:
        - Webhooks
      summary: Delete a Webhook
      description: Deletes the existing Webhook corresponding to the input ID.
      operationId: deleteWebhook
      security:
        - basic_auth: []
      responses:
        '200':
          $ref: '#/components/responses/WebhookDeleted'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      x-codeSamples:
        - lang: curl
          source: >-
            curl -X DELETE
            https://api.checkrhq-staging.net/v1/webhooks/e44aa283528e6fde7d542194
            \
                 -u 83ebeabdec09f6670863766f792ead24d61fe3f9:
components:
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
  schemas:
    ResourceURI:
      type: string
      description: URI of the resource.
      readOnly: true
    Account:
      type: object
      properties:
        id:
          type: string
          description: >
            The ID of the Account.


            <b>Note: </b>The returned Account ID is dependent on the API token
            used to make the call.
              * If an account-level API token is used, the ID of the account associated with the Live API Token will be returned.
              * If a partner OAuth token is used, the ID of the account (or customer's account) connected to the OAuth application will be returned.
        object:
          type: string
          enum:
            - account
        adverse_action_email:
          type: string
          description: >
            Email used to send pre- and post- Adverse Action notices on behalf
            of the Account to candidates.

            This address will also receive undeliverable notices if an Adverse
            Action notice isn't deliverable to a candidate.
          format: email
          example: john.doe@example.com
        api_authorized:
          type: boolean
          description: >
            Determines whether Account is authorized to use the API to order
            background checks.
          default: false
          example: true
        authorized:
          type: boolean
          description: >
            Determines whether Account is credentialed to order background
            checks.
          default: false
          example: true
        available_screenings:
          type: array
          description: |
            List of screening types available for the Account.
          items:
            type: string
            pattern: '[a-z_]+'
          example:
            - county_civil_search
            - county_criminal_search
            - municipal_criminal_search
            - education_verification
            - employment_verification
            - federal_civil_search
            - federal_criminal_search
            - motor_vehicle_report
            - national_criminal_search
            - sex_offender_search
            - ssn_trace
            - state_criminal_search
            - international_adverse_media_search
            - international_education_verification
        billing_email:
          type: string
          description: >
            Email that is used for Checkr to contact you about invoices and
            other billing communication.
          format: email
          example: john.doe@example.com
        company:
          type: object
          description: Company details
          properties:
            name:
              type: string
              description: Registered company name.
              example: Acme Corporation
            dba_name:
              type: string
              description: >
                Doing-Business-As name of Company displayed in Checkr emails and
                branded web pages.
              example: ACME
            street:
              type: string
              description: Street address where company is headquartered.
              example: 123 Main St
            city:
              type: string
              description: City where company is headquartered.
              example: Wilmington
            state:
              type: string
              description: |
                State where company is headquartered. Format: `ISO 3166-2:US`.
              example: DE
            zipcode:
              type: string
              description: Zipcode where company is headquartered.
              example: '19801'
            phone:
              type: string
              description: Company phone number.
              example: 206-555-0100
            website:
              type: string
              description: Company's official corporate website.
              example: 'https://example.com'
            industry:
              type: string
              description: >-
                Industry that company operates in, as NAICS code (see
                https://www.naics.com)
              pattern: '[0-9-]+'
              example: 52-59
            incorporation_state:
              type: string
              description: |
                Incorporation state. Format: `ISO 3166-2:US`.
              example: DE
            incorporation_type:
              type: string
              description: Type of incorporation.
              example: llc
              enum:
                - association
                - co-ownership
                - corporation
                - joint-venture
                - limited-partnership
                - llc
                - llp
                - non-profit
                - partnership
                - s-corporation
                - sp
                - trusteeship
            tax_id:
              type: string
              description: Company Tax ID number.
              example: '123456789'
              writeOnly: true
        compliance_contact_email:
          type: string
          description: >
            Email for the main point of contact on your side to communicate with
            Checkr about

            compliance issues or updates. This is also where we'll send you the
            results of candidate

            disputes (for example, if we changed the information on a report).
          format: email
          example: compliance.team@example.com
        created_at:
          type: string
          description: Time at which the Account was created.
          format: date-time
          example: '2020-01-07T00:26:49Z'
        default_compliance_city:
          type: string
          description: |
            Fallback compliance city if candidate location is not provided.
          nullable: true
          example: San Francisco
        default_compliance_state:
          type: string
          description: >
            Fallback compliance state if candidate location is not provided.
            Format: `ISO 3166-2:US`.
          example: CA
          nullable: true
        geos_required:
          type: boolean
          description: Determines whether a Geo must be provided to order a Report.
          default: false
        name:
          type: string
          description: Name of Account displayed in the Dashboard.
          example: Acme Corp
        purpose:
          type: string
          description: |
            Permissible purpose to run background checks.
            Determines which background checks the Account is credentialed for.
          default: employment
          enum:
            - employment
            - business
            - insurance
            - tenant
        segmentation_enabled:
          type: boolean
          description: Determines whether Hierarchy/Nodes is enabled on the Account.
          default: true
        support_email:
          type: string
          description: >
            Email address used for candidates to contact you if they need to
            supply evidence

            of rehabilitation or other context during the Adverse Action
            process.
          format: email
          example: support@example.com
          nullable: true
        support_phone:
          type: string
          description: >
            Phone number used for candidates to contact you if they need to
            supply evidence of

            rehabilitation or other context during the Adverse Action process.
          nullable: true
          example: 206-555-0188
        technical_contact_email:
          type: string
          description: >
            The main point of contact on your side to communicate with Checkr
            about technical issues or

            updates.
          format: email
          example: jane.smith@example.com
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/accounts/e44aa283528e6fde7d542194
        uri_name:
          type: string
          example: acme-corp
          pattern: '[a-z0-9-_]+'
          description: >
            Unique slug referencing the Account. This appears in some
            Account-specific URL paths.
    UnauthorizedError:
      type: object
      properties:
        error:
          type: string
          example: Bad authentication error
    ForbiddenError:
      type: object
      properties:
        error:
          type: string
          example: You do not have permission to access the requested resource
    ResourceId:
      type: string
      example: e44aa283528e6fde7d542194
      readOnly: true
      description: ID of the resource.
    AssessmentValue:
      type: string
      example: eligible
      enum:
        - eligible
        - review
        - escalated
    Rule:
      type: object
      description: |
        Description of the applied Rule, as defined for your account.
      properties:
        name:
          type: string
          description: 'The name of the Rule, as defined for your account.'
          example: Allow dismissed charges rule
        type:
          type: string
          description: The type of the Rule.
          enum:
            - count
            - custom
            - default
            - lookback_period
            - fairness_and_compliance
            - undefined
          example: lookback_period
    AdverseItemAssessment:
      type: object
      description: |
        Information about the Assessment of the Adverse Item.

        Included only if Assess is enabled for the account.
      properties:
        value:
          $ref: '#/components/schemas/AssessmentValue'
        rule:
          $ref: '#/components/schemas/Rule'
    AdverseItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          description: Defines the object type.
          enum:
            - adverse_item
          readOnly: true
        text:
          type: string
          description: Human-readable description of the Adverse Item.
          example: 'License status: Suspended'
        assessment:
          $ref: '#/components/schemas/AdverseItemAssessment'
    AdverseAction:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - adverse_action
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/adverse_actions/57ed51e57619e8002a6683f2
        created_at:
          type: string
          description: Time at which the Adverse Action was created.
          format: date-time
          example: '2016-09-29T17:39:49Z'
        status:
          type: string
          description: Status of the Adverse Action.
          enum:
            - pending
            - complete
            - dispute
            - canceled
          example: pending
        report_id:
          type: string
          description: ID of the Report causing this adverse action.
          example: b861a56db1b1b89692dd6118
        post_notice_scheduled_at:
          type: string
          description: >
            Timestamp at which the post Adverse Action notification will be
            sent. This time is

            dependent on the time at which the Pre-Adverse Action was created,
            and related settings

            within your Checkr system.
          format: date-time
          example: '2016-10-07T12:34:00Z'
        post_notice_ready_at:
          type: string
          description: >
            Timestamp after which the post notice can be sent. (Often 7 days
            after `created_at`.)
          format: date-time
          example: '2016-10-06T17:39:48Z'
        canceled_at:
          type: string
          description: Time at which the Adverse Action was canceled.
          format: date-time
          nullable: true
          example: null
        adverse_items:
          type: array
          items:
            $ref: '#/components/schemas/AdverseItem'
          description: Array of Adverse Items on which the Action is based.
        individualized_assessment_engaged:
          type: boolean
          default: false
    BadRequestError:
      type: object
      properties:
        error:
          type: string
          example: Dl number 'F211165' does not match the license number format in CA
    CandidateStoryDocument:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - document
          readOnly: true
        type:
          type: string
          description: The type of Document.
          enum:
            - candidate_story_document
          example: candidate_story_document
        created_at:
          type: string
          description: Time at which the Document was created.
          format: date-time
          example: '2020-04-17T07:48:01Z'
        download_uri:
          type: string
          description: JSON encoded URL of the document. This URL is valid for 15 minutes.
          example: 'https://checkr-documents.checkr.com/download_path'
        filesize:
          type: integer
          description: File’s size in bytes.
          example: 8576
        filename:
          type: string
          description: File’s name.
          example: proof_of_rehabilitation.pdf
        content_type:
          type: string
          description: File’s content type.
          example: image/pdf
    CandidateStory:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - candidate_story
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/candidate_stories/e44aa283528e6fde7d542194
        report_id:
          type: string
          description: ID of the Report to which the Candidate Story is linked.
          example: af3393b7d751206c7c67b6e5
        record:
          type: object
          description: >
            Simplified representation of linked record.

            If `null`, Candidate Story is considered general information about
            the Candidate.
          nullable: true
          properties:
            id:
              type: string
              description: Record ID
              example: 4e2a551f79e0095b35d4d3ca
            case_number:
              type: string
              description: 'Case number, if existing'
              example: NMND78D
              nullable: true
            charge:
              type: string
              description: 'Charge description, if existing'
              example: LIGHT OFFENSE
              nullable: true
            offense_date:
              type: string
              format: date
              description: 'Offense date, if existing'
              example: '2020-01-20'
              nullable: true
            location:
              type: string
              description: >-
                Location of the Record, can be a State, or a City and a State,
                if existing
              example: 'San Mateo, CA'
              nullable: true
        content:
          type: string
          description: Additional information provided by Candidate.
          example: >-
            Since my case, I have received the following certifications (see
            attachments)
        created_at:
          type: string
          description: Time at which the Candidate Story was created.
          format: date-time
          example: '2020-04-17T07:48:34Z'
        documents:
          description: Attached documents provided by Candidate.
          type: array
          items:
            $ref: '#/components/schemas/CandidateStoryDocument'
    Metadata:
      type: object
      description: >-
        Up to 50 customer-defined key-value pairs. Use this parameter to store
        additional information on your candidate. For example: Use the key to
        map candidates to `job_req_id`, `application_id`, or `branch_id`. Keys
        must be 40 characters or less. Values must be 500 characters or less.

        For example: { "job_req_id": "12345" }
    Candidate:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - candidate
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/candidates/e44aa283528e6fde7d542194
        first_name:
          type: string
          pattern: '[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-''., ]*'
          description: |
            Candidate’s first name.
          example: John
          minLength: 1
        middle_name:
          type: string
          pattern: '[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-''., ]*'
          description: >
            Candidate’s middle name. This field is required if `no_middle_name`
            is `false`.
          example: Alfred
        no_middle_name:
          type: boolean
          description: >
            Required if no `middle_name` is provided. `true` if the candidate
            has no middle name.
          default: false
        last_name:
          type: string
          pattern: '[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-''., ]{2,}'
          description: Candidate’s last name.
          example: Smith
          minLength: 1
        mother_maiden_name:
          type: string
          pattern: '[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-''., ]*'
          description: |
            Candidate’s mother’s maiden name.
          example: Jones
        email:
          type: string
          description: |
            Candidate’s email address.
          format: email
          example: john.smith@gmail.com
        phone:
          type: string
          description: Candidate’s phone number.
          example: 5555555555
          nullable: true
        zipcode:
          type: string
          description: Candidate’s 5-digit zip code.
          example: 90401
        dob:
          type: string
          description: Candidate’s date of birth.
          format: date
          example: '1970-01-22'
        ssn:
          type: string
          description: >-
            Candidate’s Social Security Number. This value will be redacted in
            all return calls, except for the last four digits.
          example: XXX-XX-4645
        driver_license_number:
          type: string
          description: Candidate’s driver license number.
          example: F2111655
        driver_license_state:
          type: string
          description: |
            Candidate’s driver license state of issue.
            Format: `ISO 3166-2:US`.
          example: CA
        previous_driver_license_number:
          type: string
          description: Candidate’s previous driver license number.
          example: F1501739
        previous_driver_license_state:
          type: string
          description: |
            State that issued the candidate’s previous driver license.
            Format: `ISO 3166-2:US`.
          example: MD
        copy_requested:
          type: boolean
          description: >-
            If `true`, the candidate has asked to receive a copy of their
            report.
          default: false
        custom_id:
          type: string
          description: >-
            Client-assigned unique ID for the Candidate. Can be used to map
            Checkr Candidate IDs to your internal tracking system, and to search
            for Candidates through both the Dashboard and the API.
        report_ids:
          type: array
          description: Array of Report IDs.
          readOnly: true
          items:
            type: string
            example: 532e71cfe88a1d4e8d00000d
        geo_ids:
          type: array
          description: Array of Geo IDs.
          items:
            type: string
            example: 79f943e212cce7de21c054a8
        adjudication:
          type: string
          description: The adjudication for the Candidate’s most recently created Report.
          enum:
            - engaged
            - pre_adverse_action
            - post_adverse_action
        metadata:
          $ref: '#/components/schemas/Metadata'
    WorkLocation:
      type: object
      required:
        - state
      properties:
        country:
          type: string
          description: The country in ISO-3166 alpha-2 format.
          example: US
          minLength: 2
          maxLength: 2
        state:
          type: string
          description: The two letter state code.
          example: CA
        city:
          type: string
          description: Name of the city
          example: San Francisco
          maxLength: 255
    Document:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - document
          readOnly: true
        type:
          type: string
          description: The type of Document.
          enum:
            - consent
            - credit_report_consent_form
            - driver_license
            - driver_license_back
            - driver_license_history
            - drug_screen_donor_pass
            - education_proof
            - employment_proof
            - health_screening_occupational_health_document
            - health_screening_result_certificate
            - international_consent_form
            - order_summary_pdf
            - passport
            - pdf_credit_report
            - pdf_health_report
            - pdf_individualized_assessment
            - pdf_professional_license_verification_report
            - pdf_report
            - pdf_self_disclosure
            - pdf_wisconsin_doj
            - previous_driver_license
            - professional_license_certification_image
            - screening_pass
            - selfie
            - ssn_card
            - state_id_card
            - state_id_card_back
          example: driver_license
        created_at:
          type: string
          description: Time at which the Document was created.
          format: date-time
          example: '2015-02-11T20:01:50Z'
        download_uri:
          type: string
          description: JSON encoded URL of the document. This URL is valid for 15 minutes.
          example: 'https://checkr-documents.checkr.com/download_path'
        filesize:
          type: integer
          description: File’s size in bytes.
          example: 8576
        filename:
          type: string
          description: File’s name.
          example: 1423684910_candidate_driver_license.jpg
        content_type:
          type: string
          description: File’s content type.
          example: image/jpeg
    DriverLicense:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - candidate_driver_license
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: >-
            /v1/candidates/551564b7865af96a28b13f36/driver_licenses/e44aa283528e6fde7d542194
        candidate_id:
          type: string
          description: ID of the candidate.
          example: 551564b7865af96a28b13f36
        number:
          type: string
          description: The driver license number.
          example: F2222222
        state:
          type: string
          description: The state that issued the driver license.
          example: CA
        issued_dates:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                description: The issued date.
              source:
                type: string
                description: >-
                  Indicates where this issued date information came from. Issued
                  dates added through the API will have a source of "client".
          description: An array of issued date objects
          example:
            - value: '2010-01-30'
              source: client
        current:
          type: boolean
          description: >-
            Defines whether the driver license is the candidate's current
            license.
          example: true
    CandidateNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: Candidate not found
    Address:
      type: object
      properties:
        street:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: Street address.
          example: 123 Main St.
        unit:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: 'House, building or apartment number.'
          example: 2000
        city:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: City.
          example: San Francisco
        state:
          type: string
          description: State.
          example: CA
        zipcode:
          type: string
          description: 5-digit zip code.
          example: '90401'
        country:
          type: string
          description: |
            Country.

            Format: `ISO 3166-1 alpha-2`
          example: US
    Employer:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - employer
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: >-
            /v1/candidates/e44aa283528e6fde7d542194/employers/ca27df84be5b50dfa7ee1cda
        candidate_id:
          type: string
          description: ID of the Candidate being screened.
          pattern: '[a-zA-Z0-9 -''.,]*'
          example: xxx
          minLength: 1
        name:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: Candidate’s employer’s name.
          example: Checkr
          minLength: 1
        position:
          type: string
          description: Candidate’s position or title.
          example: Software Engineer
        salary:
          type: integer
          description: Candidate’s gross salary in dollars annually.
          example: 10000
        contract_type:
          type: string
          description: Candidate’s contract type.
          enum:
            - full_time
            - part_time
            - contract
            - internship
          example: full_time
        do_not_contact:
          type: boolean
          default: false
          description: 'If `true`, the employer will not be contacted about the Candidate.'
          example: false
        start_date:
          type: string
          description: Candidate’s start date with the employer.
          format: date
          example: '2016-06-01'
        end_date:
          type: string
          description: Candidate’s end date with the employer.
          format: date
          example: '2017-05-01'
        employer_url:
          type: string
          description: Employer’s website.
          example: www.employer.com
        address:
          $ref: '#/components/schemas/Address'
        manager:
          type: object
          properties:
            name:
              type: string
              description: Candidate's manager's name.
              example: Joe Smith
            title:
              type: string
              description: Candidate's manager's title.
              example: Engineering Manager
            email:
              type: string
              description: Candidate's manager's email address.
              example: joesmith@checkr.co
            phone:
              type: string
              description: Candidate's manager's phone number.
              example: 212-555-1234
    School:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - school
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/schools/e44aa283528e6fde7d542194
        candidate_id:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: Candidate linked to this School resource.
          example: 83ebeagdec0948690863766f792ead24d61fe3f9
          minLength: 1
        name:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: Name of the School.
          example: College University
          minLength: 1
        degree:
          type: string
          description: Degree awarded to the Candidate.
          example: BA
        year_awarded:
          type: integer
          description: Year in which the degree was awarded.
          example: 2017
          minLength: 1
        major:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: Candidate’s major.
          example: Russian Literature
        phone:
          type: string
          description: School's phone number.
          example: 415-111-1111
          nullable: true
        minor:
          type: string
          description: Candidate’s minor.
          example: Background Checks
        start_date:
          type: string
          description: Candidate’s start date with the School.
          format: date
          example: '2012-09-22'
        end_date:
          type: string
          description: Candidate’s end date with the School.
          format: date
          example: '2017-05-10'
        current:
          type: boolean
          description: Defines whether the Candidate is currently enrolled.
          default: false
        school_url:
          type: string
          description: School’s website.
          example: www.collegeuniversity.com
        address:
          $ref: '#/components/schemas/Address'
    Ssn:
      type: object
      properties:
        encrypted_ssn:
          type: string
          description: >-
            The candidate's SSN, encrypted. `Null` if no SSN exists for the
            candidate.
          example: hyYMhDje9dVUEPKU9myy7OFJ7R27pj0pmlegFlka99I=
    EncryptionKeyError:
      type: object
      properties:
        error:
          type: string
          example: Encryption key required.
    ProfessionalLicense:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - professional_license
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
        candidate_id:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: Candidate linked to this Professional License resource.
          example: a50a341aead83f1292d8ccf9
          minLength: 1
        certification_organization_id:
          type: string
          description: Certification Organization's unique Identifier.
          example: 295DB417-A9D7-41DD-BE4A-64F014DF1D49
          minLength: 1
        input:
          type: object
          properties:
            license_number:
              type: string
              description: Professional License number.
              example: AB-1234
            license_type:
              type: string
              description: Professional License type.
              example: Contractor
    BadPiiRequestError:
      type: object
      properties:
        error:
          type: string
          example: Candidate has already had PII removed
    County:
      type: object
      properties:
        name:
          type: string
          example: BOULDER
          description: The county's common name.
        fips_code:
          type: string
          example: '23456'
          description: >-
            The 2+3 digit FIPS code for the county (2-digit state + 3-digit
            county FIPS code).
    ScreeningsGenericPayload:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
        status:
          type: string
          description: |
            Status of the screening.
          enum:
            - pending
            - complete
            - canceled
            - suspended
          example: complete
        result:
          type: string
          description: Result of the screening.
          enum:
            - clear
            - consider
          nullable: true
          example: clear
        created_at:
          type: string
          description: Time at which the screening was created.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        completed_at:
          type: string
          description: Time at which the screening was completed.
          format: date-time
          example: '2014-01-18T12:35:30Z'
        turnaround_time:
          type: integer
          description: >-
            Number of seconds the screening took to complete, calculated from
            `created_at` to `completed_at`.
        cancellation_reason:
          type: string
          description: >-
            See [cancellation reasons](#section/Reference/Cancellation-Reasons)
            section for possible values.
          example: complete_now_customer_requested
        cancellation_reason_description:
          type: string
          description: >-
            See [cancellation reasons](#section/Reference/Cancellation-Reasons)
            section for possible values.
          example: Customer requested Complete Now prior to screening completion
    ScreeningStatus:
      type: string
      description: Status of the screening.
      enum:
        - pending
        - complete
    ScreeningResult:
      type: string
      description: Outcome of the screening.
      enum:
        - clear
        - consider
      nullable: true
    Record:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        case_number:
          type: string
          example: 24323-DA
        file_date:
          type: string
          format: date
          nullable: true
          example: null
        arresting_agency:
          type: string
          example: DEA Boston Division
        court_jurisdiction:
          type: string
          nullable: true
          example: null
        court_of_record:
          type: string
          nullable: true
          example: null
        full_name:
          type: string
          example: John Alfred Smith
        dob:
          type: string
          example: '1970-01-22'
        yob:
          type: integer
          example: 1970
        county:
          type: string
          example: SUFFOLK
        state:
          type: string
          example: MA
        address:
          $ref: '#/components/schemas/Address'
    Charge:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        charge:
          type: string
          example: Fraud
        category:
          type: string
          description: >
            The Checkr Assess category assigned to this criminal charge. This
            field will be included only if Checkr Assess is enabled for your
            account.
          enum:
            - criminal_intent
            - drugs_and_alcohol
            - fraud_and_deception
            - homicide
            - security
            - sexual
            - statutory
            - theft_and_property
            - unclassified
            - vehicles_and_traffic
            - violence
          example: fraud_and_deception
        charge_type:
          type: string
          nullable: true
          example: null
        charge_id:
          type: string
          nullable: true
          example: null
        classification:
          type: string
          example: Felony
        deposition:
          type: string
          nullable: true
          example: null
        defendant:
          type: string
          nullable: true
          example: null
        plaintiff:
          type: string
          nullable: true
          example: null
        sentence:
          type: string
          example: 'Active Punishment Minimum: 10Y'
        disposition:
          type: string
          example: Guilty
        probation_status:
          type: string
          nullable: true
          example: null
        offense_date:
          type: string
          format: date
          example: '2011-04-22'
        deposition_date:
          type: string
          format: date
          example: '2014-05-27'
        arrest_date:
          type: string
          format: date
          nullable: true
          example: null
        charge_date:
          type: string
          format: date
          nullable: true
          example: null
        sentence_date:
          type: string
          format: date
          nullable: true
          example: null
        disposition_date:
          type: string
          format: date
          example: '2011-06-02'
        conviction_date:
          type: string
          format: date
          nullable: true
          example: '2011-06-02'
        release_date:
          type: string
          format: date
          nullable: true
          example: '2011-06-02'
        next_court_date:
          type: string
          format: date
          nullable: true
          example: '2011-06-02'
        court:
          type: string
          example: Circuit & District Court
        plea:
          type: string
          example: null
        assessment:
          type: string
          example: null
        prison_time:
          type: string
          description: Sentenced to prison time.
          example: 4 Year(s)
        jail_time:
          type: string
          description: Sentenced to jail time.
          example: 15 Day(s)
        probation_time:
          type: string
          description: Sentenced to probation time.
          example: null
        restitution:
          type: string
          description: Sentenced to restitution.
          example: '220.00'
    ScreeningPointer:
      type: string
      description: Pointer description associated with the screening.
      enum:
        - Arrest Search
        - Candidate Zip Code
        - Candidate Address
        - '<county>, <state> County Search'
        - National Search
        - <state> State Search
        - Account Policy
        - <education address> Education History
        - <employment address> Employment History
        - Report Geo
        - MVR Address
        - Package Policy
        - Candidate Self Disclosure
        - SSN Trace Address History
        - Checkr Initiated
    CountyCriminalSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - county_criminal_search
            uri:
              example: /v1/county_criminal_searches/539fdcf335644a0ef4000001
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: consider
            turnaround_time:
              example: 100800
            estimated_completion_time:
              type: string
              format: date-time
              description: >-
                Estimated time of completion for the Search. This estimate will
                be based on the maximum turnaround time across all counties
                searched.
              example: '2019-03-13T16:31:07Z'
            estimated_completion_date:
              type: string
              format: date
              description: Estimated date of completion for the Search.
              example: '2019-03-13'
            county:
              type: string
              description: County in which the record was recorded.
              example: SAN FRANCISCO
            state:
              type: string
              description: State in which the record was recorded.
              example: CA
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      charges:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
                            - type: object
                              properties:
                                charge:
                                  example: Sell Cocaine
                                defendant:
                                  description: Defendant's name on the record.
                                  example: John Alfred Smith
                                arrest_date:
                                  description: Recorded arrest date.
                                  example: '2011-04-22'
                                sentence_date:
                                  description: Recorded sentence date.
                                  example: '2011-06-02'
            filtered_by_positive_adjudication_records:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Positive Adjudication Matrix or by your account’s Assess
                configuration.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      filtered_by_positive_adjudication_charges:
                        type: array
                        description: >-
                          Array of CriminalCharge objects filtered out by your
                          account’s Positive Adjudication Matrix.
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
            screening_pointers:
              type: array
              description: Array of `screening_pointers` associated with the screening.
              items:
                allOf:
                  - $ref: '#/components/schemas/ScreeningPointer'
                  - type: string
                    example:
                      - 'Denver, CO County Search'
                      - Kentucky State Search
                      - Widgets-R-Us Employment Address
                      - Harvard University Education Address
    IncludesCanceledBoolean:
      type: boolean
      description: >-
        If account has opted in to report lifecycle phase two, indicates the
        presence of canceled histories. Otherwise, `null`.
      enum:
        - true
        - false
      nullable: true
    EducationVerification:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - education_verification
            uri:
              example: /v1/education_verifications/595511af261066005170f47
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: consider
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: consider
            turnaround_time:
              example: 603216
            includes_canceled:
              allOf:
                - $ref: '#/components/schemas/IncludesCanceledBoolean'
                - example: true
            records:
              type: array
              description: Array of CandidateEducationHistory records.
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: 592311d2113adf7e9c9f66b8
                  result:
                    type: object
                    properties:
                      verified:
                        type: boolean
                        example: false
                      degrees:
                        type: array
                        description: Array of degrees verified by vendors
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                            majors:
                              type: string
                            major_concentrations:
                              type: string
                            minors:
                              type: string
                            year_awarded:
                              type: string
                  school:
                    $ref: '#/components/schemas/School'
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                          example: started
                        created_at:
                          type: string
                          example: '2017-06-29T14:42:47Z'
                        type:
                          type: string
                          example: verification_start
                  status:
                    type: string
                    enum:
                      - pending
                      - clear
                      - consider
                    example: consider
                  cancellation_reason:
                    type: string
                    description: The reason the screening was canceled.
                    enum:
                      - complete_now_customer_requested
                      - no_history_required_information
                      - international_entry_not_supported
                    nullable: true
                    example: customer_requested_complete_now
                  cancellation_reason_description:
                    type: string
                    description: >-
                      Description of the `cancellation_reason` for the
                      screening.
                    enum:
                      - >-
                        Customer requested Complete Now prior to screening
                        completion
                      - Candidate declared no history
                      - Screening does not support international entries
                    nullable: true
                    example: >-
                      Customer requested Complete Now prior to screening
                      completion
    ResultPayload:
      type: object
      properties:
        verified:
          type: boolean
          example: true
        comments:
          type: string
        ignored:
          type: string
          nullable: true
          example: null
    EmploymentVerification:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - employment_verification
            uri:
              example: /v1/employment_verifications/595511af261066005170f471
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: consider
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: consider
            turnaround_time:
              example: 603216
            includes_canceled:
              allOf:
                - $ref: '#/components/schemas/IncludesCanceledBoolean'
                - example: true
            records:
              type: array
              description: Array of CandidateEmploymentHistory objects.
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: 592311d2113adf7e9c9f66b8
                  result:
                    type: object
                    properties:
                      start_date:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              comments:
                                example: '2016-06-01'
                      end_date:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              comments:
                                example: '2017-05-01'
                      position:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              verified:
                                example: true
                              comments:
                                example: Software Development Engineer
                              ignored:
                                example: manual
                      contract_type:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              comments:
                                example: Full Time
                              ignored:
                                example: package
                      salary:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              verified:
                                example: true
                              comments:
                                example: '100000'
                      questions:
                        type: array
                        description: List of questions for the candidate's employer.
                        items:
                          type: object
                          properties:
                            sort_number:
                              description: The position of the question within the list.
                              type: integer
                              example: 1
                            text:
                              description: The question that was asked.
                              type: string
                              example: >-
                                What is the documented reason for the employee's
                                departure?
                            response:
                              description: The answer received in response to the question.
                              type: string
                              example: They resigned.
                  employer:
                    $ref: '#/components/schemas/Employer'
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                          example: started
                        created_at:
                          type: string
                          example: '2017-06-29T14:42:44Z'
                        type:
                          type: string
                          example: verification_start
                  status:
                    type: string
                    enum:
                      - pending
                      - clear
                      - consider
                    example: consider
                  cancellation_reason:
                    type: string
                    description: The reason the screening was canceled.
                    enum:
                      - complete_now_customer_requested
                      - no_history_required_information
                      - international_entry_not_supported
                    nullable: true
                    example: customer_requested_complete_now
                  cancellation_reason_description:
                    type: string
                    description: >-
                      Description of the `cancellation_reason` for the
                      screening.
                    enum:
                      - >-
                        Customer requested Complete Now prior to screening
                        completion
                      - Candidate declared no history
                      - Screening does not support international entries
                    nullable: true
                    example: >-
                      Customer requested Complete Now prior to screening
                      completion
    ScreeningsWithNullResult:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
        status:
          type: string
          description: |
            Status of the screening.
          enum:
            - pending
            - complete
            - canceled
            - suspended
          example: complete
        result:
          type: string
          description: >
            Result of the screening.


            <font color="red">Note:</font> The `result` parameter will always
            return a `null` value because this is a non-reportable screening.
          enum:
            - clear
            - consider
          nullable: true
          example: clear
        created_at:
          type: string
          description: Time at which the screening was created.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        completed_at:
          type: string
          description: Time at which the screening was completed.
          format: date-time
          example: '2014-01-18T12:35:30Z'
        turnaround_time:
          type: integer
          description: >-
            Number of seconds the screening took to complete, calculated from
            `created_at` to `completed_at`.
        cancellation_reason:
          type: string
          description: >-
            See [cancellation reasons](#section/Reference/Cancellation-Reasons)
            section for possible values.
          example: null
        cancellation_reason_description:
          type: string
          description: >-
            See [cancellation reasons](#section/Reference/Cancellation-Reasons)
            section for possible values.
          example: null
    FederalCriminalSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsWithNullResult'
        - type: object
          properties:
            object:
              enum:
                - federal_criminal_search
            uri:
              example: /v1/federal_criminal_searches/539fd88c101897f7cd000006
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: clear
            turnaround_time:
              example: 90
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      arresting_agency:
                        example: null
                      charges:
                        type: array
                        items:
                          $ref: '#/components/schemas/Charge'
            filtered_by_positive_adjudication_records:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Positive Adjudication Matrix or by your account’s Assess
                configuration.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      filtered_by_positive_adjudication_charges:
                        type: array
                        description: >-
                          Array of CriminalCharge objects filtered out by your
                          account’s Positive Adjudication Matrix.
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
    FederalDistrictCriminalSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - federal_district_criminal_search
            uri:
              example: /v1/federal_district_criminal_searches/625487abdc27f729a9997f50
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: clear
            turnaround_time:
              example: 90
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      arresting_agency:
                        example: null
                      charges:
                        type: array
                        items:
                          $ref: '#/components/schemas/Charge'
            records_hidden_by_assess:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Assess configuration.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      charges_hidden_by_assess:
                        type: array
                        description: >-
                          Array of CriminalCharge objects filtered out by your
                          account’s Assess configuration.
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
            filtered_by_positive_adjudication_records:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Positive Adjudication Matrix.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      filtered_by_positive_adjudication_charges:
                        type: array
                        description: >-
                          Array of CriminalCharge objects filtered out by your
                          account’s Positive Adjudication Matrix.
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
    FederalCivilSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsWithNullResult'
        - type: object
          properties:
            object:
              enum:
                - federal_civil_search
            uri:
              example: /v1/federal_civil_searches/625487abdc27f729a9997f50
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: clear
            turnaround_time:
              example: 90
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      arresting_agency:
                        example: null
                      charges:
                        type: array
                        items:
                          $ref: '#/components/schemas/Charge'
            records_hidden_by_assess:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Assess configuration.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      charges_hidden_by_assess:
                        type: array
                        description: >-
                          Array of CriminalCharge objects filtered out by your
                          account’s Assess configuration.
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
            filtered_by_positive_adjudication_records:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Positive Adjudication Matrix.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      filtered_by_positive_adjudication_charges:
                        type: array
                        description: >-
                          Array of CriminalCharge objects filtered out by your
                          account’s Positive Adjudication Matrix.
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
    FederalDistrictCivilSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - federal_district_civil_search
            uri:
              example: /v1/federal_district_civil_searches/625487abdc27f729a9997f50
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: clear
            turnaround_time:
              example: 90
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      arresting_agency:
                        example: null
                      charges:
                        type: array
                        items:
                          $ref: '#/components/schemas/Charge'
            records_hidden_by_assess:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Assess configuration.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      charges_hidden_by_assess:
                        type: array
                        description: >-
                          Array of CriminalCharge objects filtered out by your
                          account’s Assess configuration.
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
            filtered_by_positive_adjudication_records:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Positive Adjudication Matrix.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      filtered_by_positive_adjudication_charges:
                        type: array
                        description: >-
                          Array of CriminalCharge objects filtered out by your
                          account’s Positive Adjudication Matrix.
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
    Geo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - geo
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/geos/e44aa283528e6fde7d542194
        created_at:
          type: string
          description: Time at which the Geo was created.
          format: date-time
          example: '2015-01-18T12:34:00Z'
        name:
          type: string
          description: Human-readable name of the Geo.
          example: SF CA
        city:
          type: string
          description: City for the Geo.
          example: San Francisco
        state:
          type: string
          description: State for the Geo.
          example: CA
        deleted_at:
          type: string
          description: Time at which the Geo was deleted.
          nullable: true
          format: date-time
          example: null
    DuplicateGeoError:
      type: object
      properties:
        error:
          type: string
          example: 'Duplicate geo, name: Napa, state: CA already exists'
    GeoCityUpdatedError:
      type: object
      properties:
        error:
          type: string
          example: Geo city can not be updated if city already exists
    UsedGeoError:
      type: object
      properties:
        error:
          type: string
          example: Geo can not be deleted as it is used by Candidates
    GlobalWatchlistSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - global_watchlist_search
            uri:
              example: /v1/global_watchlist_searches/539fd88c101897f7cd000008
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: consider
            turnaround_time:
              example: 90
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      charges:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
                            - type: object
                              properties:
                                charge:
                                  description: Recorded charge.
                                  example: RICO murder
    HierarchyTree:
      type: object
      required:
        - name
        - custom_id
      properties:
        name:
          type: string
          description: >-
            The name for the node. This name will be displayed in the Checkr
            Dashboard.
          example: Acme Staffing
        custom_id:
          type: string
          description: >-
            Customer-defined unique ID for the node. Must be unique within your
            account.
          example: zpy8orej4r614ize
        tier:
          type: string
          description: >-
            Customer-defined label for this level of the hierarchy. (For example
            "Department" or "Division")
          example: department
        children:
          type: array
          items:
            $ref: '#/components/schemas/HierarchyTree'
          description: >-
            List of child hierarchy trees with name, custom_id, tier and their
            children
    HierarchyNotEnabledError:
      type: object
      properties:
        error:
          type: string
          example: 'Sorry, your account is not enabled for Hierarchy'
    HierarchyNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: >-
            No hierarchy exists on account, or hierarchy ingestion is in
            progress
    HierarchyNode:
      type: object
      required:
        - name
        - custom_id
      properties:
        name:
          type: string
          description: >-
            The name for the node. This name will be displayed in the Checkr
            Dashboard.
          example: Acme Staffing
          minLength: 1
          maxLength: 255
        custom_id:
          type: string
          description: >-
            Customer-defined unique ID for the node. Must be unique within your
            account. <b>Note: </b>Custom IDs may contain only letters, numbers,
            spaces, hyphens, colons, ampersands, and/or underscores.
          example: zpy8orej4r614ize
          minLength: 1
          maxLength: 255
        tier:
          type: string
          description: >-
            Customer-defined label for this level of the hierarchy. (For example
            "Department" or "Division".)
          example: department
          maxLength: 255
        parent_custom_id:
          type: string
          description: >-
            The `custom_id` for the parent of this node. If not provided, this
            node will be placed at the top level of the hierarchy. <b>Note:
            </b>If provided, this node must be a valid and previously loaded
            `custom_id`, and may contain only letters, numbers, spaces, hyphens,
            colons, ampersands, and/or underscores.
          example: parent custom id
          maxLength: 255
    BadHierarchyRequestError:
      type: object
      properties:
        error:
          type: string
          example: nodes cannot be empty
    IngestionInProgressError:
      type: object
      properties:
        error:
          type: string
          example: Ingestion is already in progress
    Invitation:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - invitation
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/invitations/e44aa283528e6fde7d542194
        invitation_url:
          type: string
          description: URL for the Invitation.
          example: 'https://apply.checkr.com/invite/try-checkr/290f9d6d6e46/test'
        status:
          type: string
          description: Status of the Invitation.
          enum:
            - pending
            - completed
            - expired
          example: pending
        created_at:
          type: string
          description: Time at which the Invitation was created.
          format: date-time
          example: '2015-05-14T17:45:34Z'
        expires_at:
          type: string
          description: Time at which the Invitation will expire.
          format: date-time
          example: '2015-05-21T17:45:34Z'
        completed_at:
          type: string
          description: Time at which the Invitation was completed by the candidate.
          nullable: true
          format: date-time
          example: null
        deleted_at:
          type: string
          description: Time at which the Invitation was deleted.
          nullable: true
          example: null
        package:
          type: string
          description: Package associated with the Invitation.
          example: driver_pro
        candidate_id:
          type: string
          description: ID of the Candidate to whom the Invitation was sent.
          example: 551564b7865af96a28b13f36
        report_id:
          type: string
          description: >-
            ID of the Report created by the completion of this Invitation. Will
            be null if the Invitation has not yet been completed.
          nullable: true
          example: null
    PackageNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: Package not found
    ScreeningsGenericPayloadInternational:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
          example: 41007cffefb435cf7d701f75d8b86f
        object:
          type: string
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
        status:
          type: string
          description: |
            Status of the screening.
          enum:
            - pending
            - complete
            - canceled
            - suspended
          example: complete
        result:
          type: string
          description: Result of the screening.
          enum:
            - clear
            - consider
          nullable: true
          example: clear
        created_at:
          type: string
          description: Time at which the screening was created.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        completed_at:
          type: string
          description: Time at which the screening was completed.
          format: date-time
          example: '2014-01-18T12:35:30Z'
        turnaround_time:
          type: integer
          example: 90
          description: >-
            Number of seconds the screening took to complete, calculated from
            `created_at` to `completed_at`.
        cancellation_reason:
          type: string
          description: >-
            See [cancellation reasons](#section/Reference/Cancellation-Reasons)
            section for possible values.
          example: complete_now_customer_requested
        cancellation_reason_description:
          type: string
          description: >-
            See [cancellation reasons](#section/Reference/Cancellation-Reasons)
            section for possible values.
          example: Customer requested Complete Now prior to screening completion
    InternationalAdverseMediaSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayloadInternational'
        - type: object
          properties:
            id:
              example: 41007cffefb435cf7d701f75d8b86c
            object:
              enum:
                - international_adverse_media_search
            uri:
              example: >-
                /v1/international_adverse_media_searches/41007cffefb435cf7d701f75d8b86c
            country:
              type: string
              description: ISO country code of the jurisdiction where the search was run
              example: FR
            pdf_url:
              type: string
              description: URL to PDF document containing screening result details
              example: >-
                https://eu-west-1-checkr-staging.s3.eu-west-1.amazonaws.com/document.pdf
    InternationalAddress:
      type: object
      properties:
        street:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: Street address
          example: 123 Champs-Élysées
        unit:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: 'House, building or apartment number.'
          example: 2000
        city:
          type: string
          pattern: '[a-zA-Z0-9 -''.,]*'
          description: City
          example: Paris
        state:
          type: string
          description: State or Province abbreviation
          example: IDF
        zipcode:
          type: string
          description: Postal code
          example: '75008'
        country:
          type: string
          description: |
            Country

            Format: `ISO 3166-1 alpha-2`
          example: FR
    InternationalCriminalSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayloadInternational'
        - type: object
          properties:
            id:
              example: 41007cffefb435cf7d701f75d8b86d
            object:
              enum:
                - international_criminal_search
            uri:
              example: >-
                /v1/international_criminal_searches/41007cffefb435cf7d701f75d8b86d
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      arresting_agency:
                        example: null
                      charges:
                        type: array
                        items:
                          $ref: '#/components/schemas/Charge'
                      address:
                        $ref: '#/components/schemas/InternationalAddress'
            country:
              type: string
              description: ISO country code of the jurisdiction where the search was run
              example: FR
            pdf_url:
              type: string
              description: URL to PDF document containing screening result details
              example: >-
                https://eu-west-1-checkr-staging.s3.eu-west-1.amazonaws.com/document.pdf
    InternationalEducationVerification:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayloadInternational'
        - type: object
          properties:
            id:
              example: 41007cffefb435cf7d701f75d8b86c
            object:
              enum:
                - international_education_verification
            uri:
              example: >-
                /v1/international_education_verifications/41007cffefb435cf7d701f75d8b86c
            turnaround_time:
              example: 603216
            records:
              type: array
              description: Array of CandidateEducationHistory records.
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: 592311d2113adf7e9c9f66b8
                  result:
                    type: object
                    properties:
                      verified:
                        type: boolean
                        example: false
                  school:
                    allOf:
                      - $ref: '#/components/schemas/School'
                      - properties:
                          address:
                            $ref: '#/components/schemas/InternationalAddress'
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                          example: started
                        created_at:
                          type: string
                          example: '2017-06-29T14:42:47Z'
                        type:
                          type: string
                          example: verification_start
                  status:
                    type: string
                    enum:
                      - pending
                      - clear
                      - consider
                    example: consider
                  country:
                    type: string
                    description: >-
                      ISO country code of the jurisdiction where the search was
                      run
                    example: FR
                  pdf_url:
                    type: string
                    description: URL to PDF document containing screening result details
                    example: >-
                      https://eu-west-1-checkr-staging.s3.eu-west-1.amazonaws.com/document.pdf
    InternationalEmploymentVerification:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayloadInternational'
        - type: object
          properties:
            id:
              example: 41007cffefb435cf7d701f75d8b86f
            object:
              enum:
                - international_employment_verification
            uri:
              example: >-
                /v1/international_employment_verifications/41007cffefb435cf7d701f75d8b86f
            turnaround_time:
              example: 603216
            records:
              type: array
              description: Array of CandidateEmploymentHistory objects.
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: 592311d2113adf7e9c9f66b8
                  result:
                    type: object
                    properties:
                      start_date:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              comments:
                                example: '2016-06-01'
                      end_date:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              comments:
                                example: '2017-05-01'
                      position:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              verified:
                                example: true
                              comments:
                                example: Software Development Engineer
                              ignored:
                                example: manual
                      contract_type:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              comments:
                                example: Full Time
                              ignored:
                                example: package
                      salary:
                        allOf:
                          - $ref: '#/components/schemas/ResultPayload'
                          - type: object
                            properties:
                              verified:
                                example: true
                              comments:
                                example: '100000'
                      questions:
                        type: array
                        description: List of questions for the candidate's employer.
                        items:
                          type: object
                          properties:
                            sort_number:
                              description: The position of the question within the list.
                              type: integer
                              example: 1
                            text:
                              description: The question that was asked.
                              type: string
                              example: >-
                                What is the documented reason for the employee's
                                departure?
                            response:
                              description: The answer received in response to the question.
                              type: string
                              example: They resigned.
                  employer:
                    allOf:
                      - $ref: '#/components/schemas/Employer'
                      - properties:
                          address:
                            $ref: '#/components/schemas/InternationalAddress'
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                          example: started
                        created_at:
                          type: string
                          example: '2017-06-29T14:42:44Z'
                        type:
                          type: string
                          example: verification_start
                  status:
                    type: string
                    enum:
                      - pending
                      - clear
                      - consider
                    example: consider
                  country:
                    type: string
                    description: >-
                      ISO country code of the jurisdiction where the search was
                      run
                    example: FR
                  pdf_url:
                    type: string
                    description: URL to PDF document containing screening result details
                    example: >-
                      https://eu-west-1-checkr-staging.s3.eu-west-1.amazonaws.com/document.pdf
    InternationalGlobalWatchlistSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayloadInternational'
        - type: object
          properties:
            id:
              example: 41007cffefb435cf7d701f75d8b87a
            object:
              enum:
                - international_global_watchlist_search
            uri:
              example: >-
                /v1/international_global_watchlist_searches/41007cffefb435cf7d701f75d8b87a
            country:
              type: string
              description: ISO country code of the jurisdiction where the search was run
              example: FR
            pdf_url:
              type: string
              description: URL to PDF document containing screening result details
              example: >-
                https://eu-west-1-checkr-staging.s3.eu-west-1.amazonaws.com/document.pdf
    InternationalIdentityDocumentValidation:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayloadInternational'
        - type: object
          properties:
            id:
              example: 41007cffefb435cf7d701f75d8b87b
            object:
              enum:
                - international_identity_document_validation
            uri:
              example: >-
                /v1/international_identity_document_validations/41007cffefb435cf7d701f75d8b87b
            pdf_url:
              type: string
              description: URL to PDF document containing screening result details
              example: >-
                https://eu-west-1-checkr-staging.s3.eu-west-1.amazonaws.com/document.pdf
    LicenseInfo:
      type: object
      properties:
        license_number:
          type: string
          description: >-
            Candidate’s driver license number; Format varies by subdivision
            (i.e. province)
          example: ABC12345
        country:
          type: string
          description: >-
            Candidate’s driver license country of issue. **Format:** ISO 3166-2
            2 letter alpha2 country code. **Example:** `CA`
          example: CA
        subdivision:
          type: string
          description: >-
            Candidate's driver license subdivision of issue country. **Format:**
            ISO 3166-2 subdivision code. **Example:** `CA-AB`
          example: CA-AB
        license_class:
          type: string
          description: Candidate’s driver license class
          example: G1
        expiration_date:
          type: string
          description: >-
            Candidate’s driver license expiration date. **Date format:**
            "YYYY-MM-DD”
          format: date
          example: 2030-01-01T00:00:00.000Z
        is_current:
          type: boolean
          description: >-
            Boolean that represents if it is the candidate’s current driver
            license
          example: true
    Violation:
      type: object
      properties:
        issued_date:
          type: string
          description: 'Violation issuance date. <b>Date format:</b> "YYYY-MM-DD”'
          format: date
          example: 2050-01-01T00:00:00.000Z
        description:
          type: string
          description: Description of the violation
          example: HIT AND RUN
    LicenseReport:
      type: object
      properties:
        license_status:
          type: string
          description: Final result of the search
          example: VALID
        actual_license_class:
          type: string
          description: >-
            The actual, verified license class this driver is eligible for.
            **Example:** G, G1, G2
          example: 1
        is_valid_license_class:
          type: boolean
          description: Boolean check to confirm if the License Classes match
          example: true
        license_infos:
          type: array
          description: Array of LicenseInfo objects
          items:
            $ref: '#/components/schemas/LicenseInfo'
        violations:
          type: array
          description: >
            Array of Violation objects.


            **Note:** The violations, if any, will show up only if
            `include_driver_history` is set to `true`. Otherwise, it will return
            an empty violation array.
          items:
            $ref: '#/components/schemas/Violation'
    InternationalMotorVehicleReport:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayloadInternational'
        - type: object
          properties:
            id:
              example: 41007cffefb435cf7d701f75d8b86d
            object:
              enum:
                - international_motor_vehicle_report
            uri:
              example: >-
                /v1/international_motor_vehicle_reports/41007cffefb435cf7d701f75d8b86d
            country:
              type: string
              description: >-
                ISO 3166-2 country code of the jurisdiction where the search was
                run
              example: CA
            pdf_url:
              type: string
              description: URL to PDF document containing screening result details
              example: >-
                https://eu-west-1-checkr-staging.s3.eu-west-1.amazonaws.com/document.pdf
            license_reports:
              type: array
              description: Array of LicenseReport objects
              items:
                allOf:
                  - $ref: '#/components/schemas/LicenseReport'
    MotorVehicleReport:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - motor_vehicle_report
            uri:
              example: /v1/motor_vehicle_reports/539fd88c101897f7cd000007
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: consider
            turnaround_time:
              example: 90
            full_name:
              type: string
              description: 'Candidate’s full name, as listed with the DMV.'
              example: John Alfred Smith
            license_number:
              type: string
              description: Candidate’s driver’s license number.
              example: F2111132
            license_state:
              type: string
              description: Candidate’s driver’s license state of issue.
              example: CA
            previous_license_number:
              type: string
              description: Candidate’s previous driver’s license number.
              example: F2111132
            previous_license_state:
              type: string
              description: Candidate’s previous driver’s license state of issue.
              example: CA
            license_status:
              type: string
              description: >-
                Status of the license as returned by the DMV if found, or status
                indicating the license is not found or not available.
              example: 'valid, expired, not_found'
            license_type:
              type: string
              description: Type of the license as returned by the DMV.
              example: 'personal, commercial, or non-commercial'
            license_class:
              type: string
              description: Class of the license as returned by the DMV.
              example: C
            dob:
              type: string
              format: date
              description: >-
                Date of Birth of the individual the license was issued to as
                returned by the DMV.
              example: '1980-01-01'
            expiration_date:
              type: string
              format: date
              description: Date on which the license expires.
              example: '2016-07-24'
            covid_extension:
              type: boolean
              description: >-
                Returns `true` when the MVR report has been automatically
                adjusted for DMV license expiration date extension. This field
                will be returned in the response data for impacted reports only.
            issued_date:
              type: string
              format: date
              description: Date on which the license was issued.
              example: '2006-12-03'
            first_issued_date:
              type: string
              format: date
              description: >-
                Date on which the license was first issued. Used to determine if
                the candidate meets minimum experience requirements.
              example: '2000-01-14'
            inferred_issued_date:
              type: string
              format: date
              description: >-
                Checkr-inferred license issued date based on data returned by
                the DMV.
              nullable: true
              example: null
            restrictions:
              type: array
              description: >-
                Array of restrictions, as returned by the individual states'
                DMV.
              items:
                type: string
            custom_rules:
              type: object
              description: Object with custom rules applied to generate this MVR.
              properties:
                rule_key_1:
                  type: object
                  properties:
                    description:
                      type: string
                      example: rule description 1
                    satisfied:
                      type: boolean
                      example: true
                rule_key_2:
                  type: object
                  properties:
                    description:
                      type: string
                      example: rule description 2
                    satisfied:
                      type: boolean
                      example: false
            not_found:
              type: boolean
              description: >-
                No license found by the DMV matching the candidate's license
                number/state and PII.
              default: false
            experience_failed:
              type: boolean
              description: 'If true, the MVR has an unsatisfied StrictExperience rule.'
              default: false
            privilege_to_drive:
              type: string
              enum:
                - valid
                - invalid
              description: >-
                Displays the validity of the license, as determined by the
                returned `license_status`, `license_class`, and
                `expiration_date`. If one or more of these three fields
                indicates that the license is not valid, `privilege_to_drive` is
                `invalid`.
              example: valid
            accidents:
              type: array
              description: Array of Accident objects.
              items:
                type: object
                properties:
                  accident_date:
                    type: string
                    example: '2009-04-12'
                  description:
                    type: string
                    example: property damage
                  city:
                    type: string
                    nullable: true
                    example: null
                  county:
                    type: string
                    example: SAN FRANCISCO
                  state:
                    type: string
                    description: |
                      State.
                      Format: `ISO 3166-2:US`
                    nullable: true
                    example: null
                  order_number:
                    type: string
                    example: 33-435932
                  points:
                    nullable: true
                    example: null
                  vehicle_speed:
                    type: number
                    nullable: true
                    example: null
                  reinstatement_date:
                    type: string
                    format: date
                    nullable: true
                    example: null
                  action_taken:
                    type: string
                    example: police report filed
                  ticket_number:
                    type: string
                    nullable: true
                    example: null
                  enforcing_agency:
                    type: string
                    example: San Francisco PD
                  jurisdiction:
                    type: string
                    nullable: true
                    example: null
                  severity:
                    type: string
                    nullable: true
                    example: null
                  violation_number:
                    type: string
                    nullable: true
                    example: null
                  license_plate:
                    type: string
                    example: 6UM6938
                  fine_amount:
                    type: number
                    nullable: true
                    example: null
                  state_code:
                    type: string
                    nullable: true
                    example: null
                  acd_code:
                    type: string
                    nullable: true
                    example: null
                  injury_accident:
                    type: boolean
                    default: false
                  fatality_accident:
                    type: boolean
                    default: false
                  fatality_count:
                    type: integer
                    example: 0
                  injury_count:
                    type: integer
                    example: 0
                  vehicles_involved_count:
                    type: integer
                    example: 3
                  report_number:
                    type: string
                    nullable: true
                    example: null
                  policy_number:
                    type: string
                    nullable: true
                    example: null
                  group:
                    type: string
                    nullable: true
                    enum:
                      - unspecified
                      - property damage
                      - personal injury
                      - fatality
                    description: Displays category type for an accident.
                    example: property damage
                  note:
                    type: string
                    description: >-
                      A note that is added if an accident appears on a
                      candidate’s MVR.
                    example: >-
                      Unless fault is indicated, only the fact of an accident is
                      being reported.
            violations:
              type: array
              description: Array of Violation objects.
              items:
                type: object
                properties:
                  type:
                    type: string
                    example: conviction
                  issued_date:
                    type: string
                    example: '2011-11-14'
                  conviction_date:
                    type: string
                    example: '2010-04-11'
                  description:
                    type: string
                    example: speeding 15-19 mph
                  points:
                    type: integer
                    example: 0
                  city:
                    type: string
                    nullable: true
                    example: null
                  county:
                    type: string
                    example: SANTA CLARA
                  state:
                    type: string
                    example: California
                  ticket_number:
                    type: string
                    example: 2D55555
                  disposition:
                    type: string
                    nullable: true
                    example: null
                  category:
                    type: string
                    nullable: true
                    example: null
                  court_name:
                    type: string
                    nullable: true
                    example: null
                  acd_code:
                    type: string
                    nullable: true
                    example: null
                  state_code:
                    type: string
                    nullable: true
                    example: null
                  docket:
                    type: string
                    nullable: true
                    example: null
            suspensions:
              type: array
              description: Array of Suspension objects.
              items:
                type: object
                properties:
                  description:
                    type: string
                    example: ACCUMULATION OF CONVICTIONS OR POINTS
                  start_date:
                    type: string
                    example: '2011-11-14'
                  end_date:
                    type: string
                    example: '2012-03-21'
                  state:
                    type: string
                    example: CA
    ScreeningStatusNonReportable:
      type: string
      description: >-
        Status of the screening.  Screenings completed before April 2021 may
        return `"clear"` or `"consider"`.
      enum:
        - pending
        - complete
    NationalCriminalSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsWithNullResult'
        - type: object
          properties:
            object:
              enum:
                - national_criminal_search
            uri:
              example: /v1/national_criminal_searches/539fd88c101897f7cd000006
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatusNonReportable'
                - example: complete
            result:
              type: string
              description: >-
                Outcome of the screening.  Screenings completed before April
                2021 may return `"clear"` or `"consider"`.
              nullable: true
              example: null
            turnaround_time:
              example: 90
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      arresting_agency:
                        example: null
                      charges:
                        type: array
                        items:
                          $ref: '#/components/schemas/Charge'
    Node:
      type: object
      required:
        - name
        - custom_id
      properties:
        name:
          type: string
          description: >-
            The name for the node. This name will be displayed in the Checkr
            Dashboard.
          example: Acme Staffing
          minLength: 1
          maxLength: 255
        custom_id:
          type: string
          description: >-
            Customer-defined unique ID for the node. Must be unique within your
            account. <b>Note: </b>Custom IDs will contain only letters, numbers,
            spaces, hyphens, colons, ampersands, and/or underscores.
          example: zpy8orej4r614ize
          minLength: 1
          maxLength: 255
        tier:
          type: string
          description: >-
            Customer-defined label for this level of the hierarchy. (For example
            "Department" or "Division".)
          example: department
          maxLength: 255
        parent_custom_id:
          type: string
          description: >-
            The `custom_id` for the parent of this node. If not provided, this
            node will be placed at the top level of the hierarchy.
          example: 2tpiycfpbw5o3xat
          maxLength: 255
        packages:
          type: array
          description: >-
            List of slugs for packages that are visible to this node (through
            either direct assignment to the node, or assignment to one of the
            node's ancestors). Only provided if "include=packages" is included
            in the query.
          items:
            type: string
          example:
            - driver_pro
            - tasker_pro
    Package:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - package
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/packages/e44aa283528e6fde7d542194
        apply_url:
          type: string
          description: >-
            URL at which candidates may apply for a background check with this
            Package.
          example: 'https://apply.checkr.com/apply/customer-services-inc/532c20ea819b'
        created_at:
          type: string
          description: Time at which the Package was created.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        deleted_at:
          type: string
          description: Time at which the Package was deleted.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        name:
          type: string
          description: Human-readable name of the Package.
          example: Criminal Pro
        slug:
          type: string
          description: Unique key identifier of the Package.
          example: criminal_pro
        price:
          type: integer
          description: Package price in USD cents.
          example: 6500
        screenings:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - ssn_trace
                  - sex_offender_search
                  - global_watchlist_search
                  - national_criminal_search
                  - municipal_criminal_search
                  - county_criminal_search
                  - state_criminal_search
                  - federal_criminal_search
                  - county_civil_search
                  - federal_civil_search
                  - personal_reference_verification
                  - professional_license_verification
                  - professional_reference_verification
                  - education_verification
                  - employment_verification
                  - drug_screening
                  - international_criminal_search
                  - motor_vehicle_report
                  - eviction_search
                  - credit_report
                  - facis_search
                example: ssn_trace
              subtype:
                type: string
                nullable: true
                example: null
    ProfessionalLicenseVerification:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - professional_license_verification
            uri:
              example: /v1/professional_license_verifications/5ee1b0c080c74df951ce6a59
            status:
              type: string
              description: >-
                if `clear` a valid active license was found matching the
                candidate's PII.
              enum:
                - pending
                - clear
                - consider
              example: consider
            result:
              type: string
              description: >-
                if `clear`, a valid active license was found matching the
                candidate's PII.
              enum:
                - clear
                - consider
              nullable: true
              example: consider
            turnaround_time:
              example: 603216
            documents:
              type: array
              description: >-
                An array of documents captured for the Professional License
                Verification.
              items:
                $ref: '#/components/schemas/Document'
            certifications:
              type: array
              description: >-
                An array of candidate input objects and license verification
                results objects.
              items:
                allOf:
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Certification result.
                        properties:
                          certification_issued_to:
                            type: string
                            description: Certification Holder.
                            example: Jersey John Smith
                          certification_issuer:
                            type: string
                            description: >-
                              Certifying organization that issued the license.
                              For example: "California: General".
                            example: 'California: Care Providers'
                          certification_issuer_region:
                            type: string
                            description: Certifying organization's region or state.
                            example: CA
                          certification_expiration:
                            type: string
                            description: >-
                              Certification's expiration date in MM/DD/YYYY
                              format. Present only if certification is found.
                            example: 01/10/2019
                          verified_by:
                            type: string
                            description: >
                              Entity that verified the license.


                              `partner`: Verified by one of Checkr's
                              Professional License partners (most common).<br>

                              `none`: Candidate's license was manually entered,
                              and has not been verified.<br>
                            enum:
                              - partner
                              - none
                          sub_results:
                            type: array
                            description: >-
                              An array of objects describing the results of
                              verification data.
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    name:
                                      type: string
                                      description: >-
                                        Certifying organization's name for the
                                        data returned.
                                    value:
                                      type: string
                                      description: >-
                                        Certifying organization specific data
                                        value.
                            example:
                              - name: license_number
                                value: B1234567
                          sub_checks:
                            type: array
                            description: >-
                              An array of objects describing the results of
                              specific verification criteria.
                            items:
                              allOf:
                                - type: object
                                  properties:
                                    name:
                                      type: string
                                      description: >
                                        `not_expired`: Certification active.<br>

                                        `data_consistency`: Certification
                                        matches candidate PII.<br>

                                        `in_good_standing`: Certification not
                                        revoked.<br>

                                        `found`: Certification found given
                                        license identifier.<br>
                                      enum:
                                        - not_expired
                                        - data_consistency
                                        - in_good_standing
                                        - found
                                    status:
                                      type: string
                                      enum:
                                        - clear
                                        - consider
                            example:
                              - name: not_expired
                                status: consider
                              - name: data_consistency
                                status: clear
                              - name: in_good_standing
                                status: clear
                              - name: found
                                status: clear
                      input:
                        type: object
                        description: Candidate input for license verification.
                        properties:
                          certification_issued_to:
                            type: string
                            description: >-
                              Candidate name used in application for
                              professional license verification.
                            example: Jersey John Smith
                          certification_issuer:
                            type: string
                            description: >-
                              Certifying organization that issued the license.
                              For example: "California: General".
                            example: 'California: Care Providers'
                          license_number:
                            type: string
                            description: Professional License Number.
                            example: B1234567
                          license_type:
                            type: string
                            description: >-
                              Professional License type, as provided by the
                              certification's issuer.
                            example: Nurse
                          certification_issuer_website:
                            type: string
                            description: Certifying organization's website.
                            example: 'https://www.bpelsg.ca.gov/'
                          additional_text:
                            type: string
                            description: >-
                              Additional information provided by the candidate
                              for their manually entered license.
                            example: License expires on 01-01-2050
                      candidate_documents:
                        type: array
                        description: An array of documents uploaded by the candidate
                        items:
                          $ref: '#/components/schemas/Document'
    Program:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - program
          readOnly: true
        name:
          type: string
          description: Human-readable name of the Program.
          example: Program A
        created_at:
          type: string
          description: Time at which the resource was created.
          format: date-time
          example: '2017-08-07T16:51:09Z'
        deleted_at:
          type: string
          description: Time at which the resource was deleted.
          format: date-time
          nullable: true
          example: null
        package_ids:
          type: array
          items:
            type: string
            example: a57a0cd15965a585ff7d5d35
          description: Array of associated Package IDs.
        geo_ids:
          type: array
          items:
            type: string
            example: cbc37748bc6a45b41af5c3f5
          description: Array of associated Geo IDs.
    SelfDisclosure:
      type: object
      required:
        - description
        - date
        - location
      properties:
        description:
          type: string
          description: Candidate-provided description of their criminal history.
          example: I made a mistake and grew from this experience.
        offense_level:
          type: string
          description: The level of the offense.
          example: Misdemeanor
        offense_category:
          type: string
          description: The criminal charge
          example: Insurance Fraud
        sentence:
          type: string
          description: The sentence imposed.
          example: 24 months probation
        time_served:
          type: string
          description: The time served.
          example: 20 months probation
        date:
          type: string
          description: Date of the conviction.
          format: date
          example: '2019-11-01'
        location:
          type: object
          description: The location of the incident.
          required:
            - state
            - county
          properties:
            county:
              type: string
              description: >
                Name of the county in which the conviction occurred. (Use the
                [/counties](#tag/Counties) resource to obtain a list of counties
                in each state.)
              example: BOULDER
            state:
              type: string
              description: |
                State where the county is located. Format: `ISO 3166-2:US`.
              example: CO
            country:
              type: string
              description: >
                2 letter country code. Format: `ISO 3166-1 alpha-2` (`US` by
                default.)
              example: US
    Report:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          description: |
            Defines the object type: `report`.
          enum:
            - report
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/reports/4722c07dd9a10c3985ae432a
        status:
          type: string
          description: >
            Status of the report.


            `canceled` if and only if all screenings, including SSN Trace,
            within the report were canceled.

            `complete` if at least one screening was completed.
          enum:
            - pending
            - complete
            - suspended
            - dispute
            - canceled
          example: complete
        result:
          type: string
          description: |
            Outcome of the report.
          enum:
            - clear
            - consider
          nullable: true
          example: clear
        includes_canceled:
          type: boolean
          description: Returns `true` if the report includes a canceled screening.
          example: false
        created_at:
          type: string
          description: |
            Time at which the report was created.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        completed_at:
          type: string
          description: |
            Time at which the report was completed.
          format: date-time
          example: '2014-01-18T12:35:30Z'
        revised_at:
          type: string
          description: |
            Time at which the report was revised.
          format: date-time
          nullable: true
          example: null
        upgraded_at:
          type: string
          description: |
            Time at which the report was upgraded.
          format: date-time
          nullable: true
          example: null
        turnaround_time:
          type: integer
          description: >-
            Number of seconds the report took to complete, calculated from
            `created_at` to `completed_at`.
          example: 90
        package:
          type: string
          description: |
            Human-readable name of the Package.
          example: driver_pro
        adjudication:
          type: string
          description: >
            The adjudication for the candidate. `Null` if no adjudication has
            been made.
          nullable: true
          enum:
            - engaged
            - pre_adverse_action
            - post_adverse_action
          example: engaged
        assessment:
          type: string
          description: >
            The assessment for the report. This field will be non-null only for
            Assess-enabled accounts. For accounts with Assess enabled, it will
            be null for reports completed before Assess was enabled, and null
            for a short time after report completion while the account's Assess
            rules are applied.
          nullable: true
          enum:
            - eligible
            - review
            - escalated
          example: eligible
        source:
          type: string
          enum:
            - api
            - continuous_check
            - form
            - manual_order
            - recurrence
            - web
          description: >-
            The method used to create the report. <br>`api` created from the
            Checkr API. <br>`continuous_check` created automatically from a
            Continuous Check return. <br>`form` created from the Checkr Hosted
            Invite/Apply flow. <br>`manual_order` created from a manual order
            (customer enters candidate's PII) originating in the Checkr
            Dashboard. <br>`recurrence` created from a Subscription. <br>`web`
            created from <b>Candidates > Order new Report </b> in the Checkr
            Dashboard.
          example: api
        segment_stamps:
          type: array
          description: >
            Tier and name of the node the report was ordered with and tier|name
            information for all its parent nodes.
          items:
            type: string
            example:
              - unit|Anvil Charlotte
              - company|Acme Corporation
              - division|Anvil Sales
              - region|Anvil South East
        work_locations:
          type: array
          description: |
            Array of work locations set while ordering this report.
          items:
            $ref: '#/components/schemas/WorkLocation'
        estimated_completion_time:
          type: string
          description: >
            Date at which the report is predicted to be finished. Despite the
            date-time format, we only estimate to the date. The time is not
            relevant.
          format: date-time
          example: '2019-07-31T00:00:00Z'
        candidate_story_ids:
          type: array
          description: Array of Candidate Story IDs linked to the Report.
          items:
            type: string
            example: 989b4c2d83dd8a81547f2dae
        candidate_id:
          type: string
          description: ID of the candidate being screened.
          example: e44aa283528e6fde7d542194
        drug_screening:
          type: object
          description: Embedded Drug Screening object
          properties:
            id:
              type: string
              description: ID of the Drug Screening linked to the Report.
              example: 539fd88c101897f7cd000001
            status:
              type: string
              description: |
                Status of the Drug Screening.
              enum:
                - pending
                - clear
                - consider
                - suspended
                - complete
              example: clear
            result:
              type: string
              description: |
                Outcome of the Drug Screening.
              enum:
                - clear
                - consider
              example: clear
            disposition:
              type: string
              description: Medical evaluation for entire screening
              enum:
                - negative
                - positive
                - canceled
              example: negative
            mro_notes:
              type: string
              description: Notes from Medical Review Officer
              example: Diluted Sample
            analytes:
              type: array
              description: Array of result analytes from the Drug Screening Panel
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of drug that was tested
                    example: Marijuana
                  disposition:
                    type: string
                    description: Medical evaluation for specific drug
                    enum:
                      - negative
                      - positive
                    example: negative
                  specimen_type:
                    type: string
                    description: Type of specimen that was tested
                    enum:
                      - urine
                      - breath
                      - saliva
                    example: urine
            events:
              type: array
              description: Array of drug screening events
              items:
                type: object
                properties:
                  type:
                    type: string
                    description: Type of event
                    enum:
                      - completed
                      - screening_invitation_sent
                      - screening_scheduled
                      - status_update
                    example: status_update
                  text:
                    type: string
                    description: Additional note for event type
                    example: Specimen Sent to Lab
                  created_at:
                    type: string
                    description: Time the event was created
                    format: date-time
                    example: '2014-01-19T11:28:31Z'
            screening_pass_expires_at:
              type: string
              description: Time the Candidate has to complete the drug screening
              format: date-time
              example: '2014-01-19T11:28:31Z'
            appointment_id:
              type: string
              description: ID of the Appointment linked to the Drug Screening.
              example: 539fd88c101897f7cd000001
        ssn_trace_id:
          type: string
          description: ID of the SSN Trace linked to the Report.
          example: 539fd88c101897f7cd000001
        arrest_search_id:
          type: string
          description: ID of the Arrest Search linked to the report.
          example: 539fd88c101897f7cd000001
        drug_screening_id:
          type: string
          description: ID of the Drug Screening linked to the report.
          example: 539fd88c101897f7cd000001
        facis_search_id:
          type: string
          description: ID of the FACIS Search linked to the Report.
          example: 539fd88c101897f7cd000001
        federal_criminal_search_id:
          type: string
          description: ID of the Federal Criminal Search linked to the Report.
          example: 539fd88c101897f7cd000001
        federal_district_criminal_search_id:
          type: string
          description: ID of the Federal District Criminal Search linked to the Report.
          example: 539fd88c101897f7cd000001
        federal_civil_search_id:
          type: string
          description: ID of the Federal Civil Search linked to the Report.
          example: 539fd88c101897f7cd000001
        federal_district_civil_search_id:
          type: string
          description: ID of the Federal District Civil Search linked to the Report.
          example: 539fd88c101897f7cd000001
        global_watchlist_search_id:
          type: string
          description: ID of the Global Watchlist Search linked to the Report.
          example: 539fd88c101897f7cd000001
        sex_offender_search_id:
          type: string
          description: ID of the Sex Offender Registry Search linked to the Report.
          example: 539fd88c101897f7cd000008
        national_criminal_search_id:
          type: string
          description: ID of the National Criminal Search linked to the Report.
          example: 539fd88c101897f7cd000006
        county_criminal_search_ids:
          type: array
          description: Array of County Criminal Search IDs linked to the Report.
          items:
            type: string
            example: 539fdcf335644a0ef4000003
        personal_reference_verification_ids:
          type: array
          description: Array of Personal Reference Verification IDs linked to the Report.
          items:
            type: string
            example: 539fdcf335644a0ef4000003
        professional_reference_verification_ids:
          type: array
          description: >-
            Array of Professional Reference Verification IDs linked to the
            Report.
          items:
            type: string
            example: 539fdcf335644a0ef4000003
        motor_vehicle_report_id:
          type: string
          description: ID of the Motor Vehicle Record Search linked to the Report.
          example: 539fd88c101897f7cd000007
        professional_license_verification_ids:
          type: array
          description: Array of Professional License Verification IDs linked to the Report.
          items:
            type: string
            example: 5ee1b0c080c74df951ce6a59
        state_criminal_searches:
          type: array
          description: Array of State Criminal Search IDs linked to the Report.
          items:
            type: string
            example: 539fdcf335644a0ef4000003
        international_criminal_searches_v2_ids:
          type: array
          description: >-
            Array of International Criminal Search IDs linked to the Report. If
            no searches exist, this field is omitted.
          items:
            type: string
            example: 41007c751c9a15c892c0981a0400d1
        international_adverse_media_search_ids:
          type: array
          description: >-
            Array of International Adverse Media Search IDs linked to the
            Report. If no searches exists, this field is omitted.
          items:
            type: string
            example: 41007c751c9a15c892c0981a0400e2
        international_global_watchlist_search_id:
          type: string
          description: >-
            ID of an International Global Watchlist Search linked to the Report.
            If no search exists, this field is omitted.
          example: 41007c751c9a15c892c0981a0400f3
        international_education_verification_id:
          type: string
          description: >-
            ID of an International Education Verification linked to the Report.
            If no verification exists, this field is omitted.
          example: 41007c751c9a15c892c0981a040004
        international_employment_verification_id:
          type: string
          description: >-
            ID of an International Employment Verification linked to the Report.
            If no verification exists, this field is omitted.
          example: 41007c751c9a15c892c0981a040015
        international_identity_document_validation_id:
          type: string
          description: >-
            ID of an International Identity Document Validation linked to the
            Report. If no validation exists, this field is omitted.
          example: 41007c751c9a15c892c0981a040026
        document_ids:
          type: array
          description: Array of Document IDs.
          items:
            example: 539fdcf335496a0ef4000003
            type: string
        geo_ids:
          type: array
          description: Array of Geo IDs.
          items:
            type: string
            example: 87f5bb4983eade22c55f4731
        program_id:
          type: string
          description: |
            ID of the Program linked to the Report.
          example: 00166f9ff39ec7b453adfaec
    PreExistingAdverseActionError:
      type: object
      properties:
        error:
          type: string
          example: >-
            Report has a pre-existing adverse action. See
            https://docs.checkr.com/#operation/updateReport
    ReportETA:
      type: object
      properties:
        estimate_generated_at:
          type: string
          description: |
            Time at which the prediction was created.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        estimated_completion_time:
          type: string
          description: >
            Date at which the report is predicted to be finished. Despite the
            date-time format, we only estimate to the date. The time is not
            relevant.
          format: date-time
          example: '2019-07-31T00:00:00Z'
    PredictionUnavailable:
      type: object
      properties:
        error:
          type: string
          example: Report ETA prediction unavailable
    ReportTags:
      type: object
      properties:
        count:
          type: number
          format: integer
          example: 2
        object:
          type: string
          example: list
          enum:
            - list
        data:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
          example:
            - name: EIN-234234234
            - name: api-generated
    ReportAddresses:
      type: object
      properties:
        name:
          type: string
          description: Name of location.
          example: UCSF
        city:
          type: string
          example: San Francisco
        state:
          type: string
          example: CA
        start_date:
          type: string
          format: date-time
          example: '2018-07-22T17:41:20Z'
        end_date:
          type: string
          format: date-time
          example: '2018-01-24T17:41:20Z'
    RulesetVersion:
      type: object
      description: >
        Information about a RulesetVersion. RulesetVersions are complete,
        distinct 

        versions of Rulesets. New RulesetVersions are generated each time a
        Ruleset 

        is published. The most recent 'live' RulesetVersion is used (by default)
        when 

        assessing new Reports.


        RulesetVersions also include metadata about the creator and publisher of
        the 

        version, and timestamps for these events.
      properties:
        number:
          type: integer
          description: The version number
          example: 5
    Ruleset:
      type: object
      description: |
        Information about a Ruleset.
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        name:
          type: string
          description: The name of the Ruleset
          example: Ruleset for employees in Arizona
        version:
          $ref: '#/components/schemas/RulesetVersion'
    AssessedObject:
      type: object
      description: |
        TODO
      properties:
        object_id:
          $ref: '#/components/schemas/ResourceId'
        object_type:
          type: string
          enum:
            - child_abuse_search
            - criminal_charge
            - drug_screening
            - drug_screening_v2
            - employment_verification
            - education_verification
            - global_watchlist_charge
            - motor_vehicle_report
            - occupational_health_screening
            - sex_offender_search
          example: criminal_charge
    AssessmentResult:
      type: object
      description: |
        The result of assessing one or more items on the report.
      properties:
        value:
          $ref: '#/components/schemas/AssessmentValue'
        assessed_objects:
          type: array
          items:
            $ref: '#/components/schemas/AssessedObject'
        rule:
          $ref: '#/components/schemas/Rule'
    Assessment:
      type: object
      description: |
        Information about an Assessment of the Report.
      properties:
        value:
          $ref: '#/components/schemas/AssessmentValue'
        created_at:
          type: string
          description: |
            Time at which the Assessment was created.

            <b>Note: </b>This timestame is accurate to the millisecond.
          format: date-time
          example: '2014-01-18T12:34:015Z'
        ruleset:
          $ref: '#/components/schemas/Ruleset'
        results:
          type: array
          items:
            $ref: '#/components/schemas/AssessmentResult'
    CandidateStoriesLimitError:
      type: object
      properties:
        error:
          type: string
          example: Candidate stories limit exceeded
    CandidateStoryDocumentsLimitError:
      type: object
      properties:
        error:
          type: string
          example: Candidate story documents limit exceeded
    Verification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - verification
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/verifications/db313e73383710d4fa2f18fd
        created_at:
          type: string
          format: date-time
          example: '2014-01-18T12:34:00Z'
        completed_at:
          type: string
          format: date-time
          description: >-
            Value will be null if the candidate has not uploaded the required
            documents, otherwise will contain the date and time that the
            documents were provided.
          nullable: true
          example: null
        processed_at:
          type: string
          format: date-time
          description: >-
            Value will be null if the candidate has not uploaded the required
            documents, otherwise will contain the date and time that the
            documents were processed.
          nullable: true
          example: null
        verification_type:
          type: string
          enum:
            - id
            - education
          example: id
        verification_url:
          type: string
          description: URL to direct the candidate to upload documents.
          example: 'http://verifications.checkr.com/db313e73383710d4fa2f18fd'
        report_id:
          type: string
          description: Value include the report_id
          example: 4722c07dd9a10c3985ae432a
    SexOffenderSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              example: sex_offender_search
            uri:
              example: /v1/sex_offender_searches/539fd88c101897f7cd000008
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: consider
            turnaround_time:
              example: 90
            records:
              type: array
              description: Array of SexRecord objects.
              items:
                type: object
                properties:
                  registry:
                    type: string
                    description: State in which the record was registered.
                    example: California
                  full_name:
                    type: string
                    description: Name listed on the record.
                    example: John Alfred Smith
                  age:
                    type: integer
                    description: Age listed on the record.
                    example: 44
                  dob:
                    type: string
                    format: date
                    description: Date of birth listed on the record.
                    example: '1975-02-01'
                  registration_start:
                    type: string
                    format: date
                    description: Start date for the registration.
                    example: '2011-02-12'
                  registration_end:
                    type: string
                    format: date
                    description: End date for the registration.
                    example: '2012-02-12'
                  state:
                    type: string
                    description: State listed for the record.
                    example: CA
    SsnTrace:
      allOf:
        - $ref: '#/components/schemas/ScreeningsWithNullResult'
        - type: object
          properties:
            object:
              enum:
                - ssn_trace
            uri:
              example: /v1/ssn_traces/539fd88c101897f7cd000001
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatusNonReportable'
                - example: complete
            result:
              type: string
              description: >-
                Outcome of the screening.  Screenings completed before April
                2021 may return `"clear"` or `"consider"`.
              nullable: true
              example: null
            turnaround_time:
              example: 90
            ssn:
              type: string
              description: >-
                Candidate’s social security number. This value will be redacted
                in all return calls, except for the last four digits.
              example: XXX-XX-4645
            no_data:
              type: boolean
              description: No data was returned for the input Candidate PII.
              default: false
            dob_mismatch:
              type: boolean
              description: >-
                If true, the name on the SSN Trace matches the candidate's
                provided information, but the DOB does not.
              default: false
            name_mismatch:
              type: boolean
              description: >-
                If true, the DOB associated with the addresses returned from the
                SSN Trace matches the candidate's input DOB, but the name does
                not.
              default: false
            data_mismatch:
              type: boolean
              description: >-
                If true, information returned from the SSN Trace does not match
                any of the candidate’s provided information.
              default: false
            thin_file:
              type: boolean
              description: No information found.
              default: false
            invalid_issuance_year:
              type: boolean
              description: >-
                If true, the input SSN has a year of issuance that precedes the
                candidate's reported year of birth.
              default: false
            death_index:
              type: boolean
              description: >-
                If true, the input SSN is listed on the Social Security
                Administration's “Death Master File”.
              default: false
            ssn_already_taken:
              type: boolean
              description: >-
                If true, another Candidate with same SSN already exists in our
                system.
              default: false
            issued_year:
              type: integer
              description: The year the ID was issued.
              example: 1993
            issued_state:
              type: string
              description: The US state where the ID was issued.
              example: CA
            addresses:
              type: array
              description: List of address objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Address'
                  - type: object
                    properties:
                      street:
                        description: Returned street address.
                        example: 123 S Folsom St
                      city:
                        description: Returned city.
                        example: San Francisco
                      unit:
                        type: string
                        description: Returned apartment or unit number.
                        example: Apt 54B
                      from_date:
                        type: string
                        description: Returned start date of residency.
                        example: '2010-05-01'
                      to_date:
                        type: string
                        description: Returned end date of residency.
                        example: '2010-06-01'
            aliases:
              type: array
              description: Array of name objects.
              items:
                type: object
                properties:
                  first_name:
                    type: string
                    description: First name.
                    example: Jack
                  middle_name:
                    type: string
                    description: Middle name.
                    example: B
                  last_name:
                    type: string
                    description: Last name.
                    example: Fieldman
    StateCriminalSearch:
      allOf:
        - $ref: '#/components/schemas/ScreeningsGenericPayload'
        - type: object
          properties:
            object:
              enum:
                - state_criminal_search
            uri:
              example: /v1/state_criminal_searches/539fdcf335644a0ef4000001
            status:
              allOf:
                - $ref: '#/components/schemas/ScreeningStatus'
                - example: complete
            result:
              allOf:
                - $ref: '#/components/schemas/ScreeningResult'
                - example: consider
            created_at:
              type: string
              format: date-time
              example: '2014-01-18T12:34:00Z'
            completed_at:
              type: string
              format: date-time
              example: '2014-01-18T12:35:30Z'
            turnaround_time:
              example: 100800
            estimated_completion_time:
              type: string
              format: date-time
              description: >-
                Estimated time of completion for the Screening. This estimate
                will be based on the maximum turnaround time across all states
                searched.
              example: '2014-01-18T12:34:00Z'
            state:
              type: string
              description: State searched for these records.
              example: CA
            records:
              type: array
              description: Array of CriminalRecord objects.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
                  - type: object
                    properties:
                      file_date:
                        example: '2010-02-18'
                      arresting_agency:
                        example: San Francisco Police Department
                      court_jurisdiction:
                        example: San Francisco
                      charges:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Charge'
                            - type: object
                              properties:
                                charge:
                                  example: Sell Cocaine
                                defendant:
                                  example: John Alfred Smith
                                arrest_date:
                                  example: '2011-04-22'
                                sentence_date:
                                  example: '2011-06-02'
            filtered_by_positive_adjudication_records:
              type: array
              description: >-
                Array of CriminalRecord objects filtered out by your account’s
                Positive Adjudication Matrix or by your account’s Assess
                configuration.
              items:
                allOf:
                  - $ref: '#/components/schemas/Record'
            screening_pointers:
              type: array
              description: Array of `screening_pointers` associated with the screening.
              items:
                allOf:
                  - $ref: '#/components/schemas/ScreeningPointer'
                  - type: string
                    example:
                      - 'Denver, CO County Search'
                      - Kentucky State Search
                      - Widgets-R-Us Employment Address
                      - Harvard University Education Address
    Subscription:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - subscription
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          description: URI of the Subscription.
          example: /v1/subscriptions/e44aa283528e6fde7d542194
        status:
          type: string
          description: Status of the Subscription.
          enum:
            - active
            - inactive
          example: active
        created_at:
          type: string
          description: Time at which the Subscription was created.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        canceled_at:
          type: string
          description: Time at which the Subscription was canceled.
          format: date-time
          nullable: true
          example: null
        package:
          type: string
          description: Package to run for the Subscription.
          example: driver_pro
        interval_count:
          type: integer
          description: The number of intervals between each recurrent background check.
          example: 1
        interval_unit:
          type: string
          description: Interval at which the Subscription will repeat.
          enum:
            - day
            - week
            - month
            - year
          example: month
        start_date:
          type: string
          description: >-
            Start date for the Subscription. This is the date on which the
            Subscription will begin, and the first time the report will be run.
          format: date
          example: '2014-06-10'
        next_occurrence_date:
          type: string
          description: >-
            The next date on which the Subscription will be run. This date is
            determined based on the `start_date`, `interval_unit`,
            `interval_count`, and the last date the subscription was run.
          format: date
          example: '2014-07-10'
        candidate_id:
          type: string
          description: ID of the candidate screened.
          example: 4722c07dd9a10c3985ae432a
        node:
          type: string
          description: Node to be used when generating a report for this Subscription.
          example: zpy8orej4r614ize
        work_locations:
          type: array
          description: >-
            Array of work locations to be used when generating a report for this
            Subscription.
          items:
            $ref: '#/components/schemas/WorkLocation'
    SubscriptionCanceled:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - subscription
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          description: URI of the Subscription.
          example: /v1/subscriptions/4722c07dd9a10c3985ae432a
        status:
          type: string
          description: Status of the Subscription.
          enum:
            - active
            - inactive
          example: active
        created_at:
          type: string
          description: Time at which the Subscription was created.
          format: date-time
          example: '2014-01-18T12:34:00Z'
        canceled_at:
          type: string
          description: Time at which the Subscription was canceled.
          format: date-time
          nullable: true
          example: '2014-01-30T12:34:00Z'
        package:
          type: string
          description: Package to run for the Subscription.
          example: driver_pro
        interval_count:
          type: integer
          description: The number of intervals between each recurrent background check.
          example: 1
        interval_unit:
          type: string
          description: Interval at which the Subscription will repeat.
          enum:
            - day
            - week
            - month
            - year
          example: month
        start_date:
          type: string
          description: >-
            Start date for the Subscription. This is the date on which the
            Subscription will begin, and the first time the report will be run.
          format: date
          example: '2014-06-10'
        candidate_id:
          type: string
          description: ID of the candidate screened.
          example: e44aa283528e6fde7d542194
    ContinuousCheck:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - continuous_check
          readOnly: true
        type:
          type: string
          description: Type of Continuous Check.
          enum:
            - criminal
            - mvr
          example: criminal
        created_at:
          type: string
          description: Time at which the Continuous Check was created.
          format: date-time
          example: '2015-05-14T17:45:34Z'
        candidate_id:
          type: string
          description: ID of the Candidate enrolled in Continuous Check.
          example: 551564b7865af96a28b13f36
        node:
          type: string
          description: Custom ID of the Node associated with the Continuous Check.
          example: zpy8orej4r614ize
        work_locations:
          type: array
          description: Array of work locations associated with the Continuous Check.
          items:
            $ref: '#/components/schemas/WorkLocation'
    BadContinuousCheckRequestError:
      type: object
      properties:
        error:
          type: string
          example: type does not have a valid value
    ContinuousCheckMissingSSNTraceError:
      type: object
      properties:
        error:
          type: string
          example: Candidate must have a completed SSN trace
    ContinuousCheckNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: Continuous Check not found
    BadContinuousCheckUpdateRequestError:
      type: object
      properties:
        error:
          type: string
          example: Node cannot be found on your account
    Webhook:
      type: object
      required:
        - webhook_url
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - webhook
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/webhooks/e44aa283528e6fde7d542194
        account_id:
          type: string
          example: 8e122cc56b8fa82d33c6118a
          readOnly: true
          description: The account associated with the webhook.
        application_id:
          type: string
          example: null
          readOnly: true
          description: The application associated with the webhook.
        include_object:
          type: boolean
          description: >-
            When `true`, the webhook event payload will include the related
            object.
        webhook_url:
          type: string
          description: >-
            The URL which receives the webhook event payload. This must be an
            HTTPS or an AWS SNS URL.
          example: 'https://example.com'
        created_at:
          type: string
          description: Time at which the webhook was created.
          format: date-time
          example: '1939-09-01T12:21:00Z'
          readOnly: true
        deleted_at:
          type: string
          description: Time at which the webhook was deleted.
          format: date-time
          nullable: true
          example: null
          readOnly: true
    WebhookDelete:
      type: object
      required:
        - webhook_url
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        object:
          type: string
          enum:
            - webhook
          readOnly: true
        uri:
          allOf:
            - $ref: '#/components/schemas/ResourceURI'
          example: /v1/webhooks/e44aa283528e6fde7d542194
        account_id:
          type: string
          example: 8e122cc56b8fa82d33c6118a
          readOnly: true
          description: The account associated with the webhook.
        application_id:
          type: string
          example: null
          readOnly: true
          description: The application associated with the webhook.
        include_object:
          type: boolean
          description: >-
            When `true`, the webhook event payload will include the related
            object.
        webhook_url:
          type: string
          description: >-
            The URL which receives the webhook event payload. This must be an
            HTTPS or an AWS SNS URL.
          example: 'https://example.com'
        created_at:
          type: string
          description: Time at which the webhook was created.
          format: date-time
          example: '1939-09-01T12:21:00Z'
          readOnly: true
        deleted_at:
          type: string
          description: Time at which the webhook was deleted.
          format: date-time
          nullable: true
          example: '1945-09-02T04:40:00Z'
          readOnly: true
  responses:
    Account:
      description: Account details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    AdverseAction:
      description: Adverse Action details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdverseAction'
    AdverseActionCanceled:
      description: Adverse Action was successfully canceled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdverseAction'
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    CandidateStory:
      description: Candidate Story details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateStory'
    CandidateStoryDeleted:
      description: Candidate Story was successfully deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateStory'
    ListOfCandidates:
      description: List of Candidates
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
              previous_href:
                type: string
                format: uri
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
    CandidateCreated:
      description: Candidate was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Candidate'
    DocumentsList:
      description: List of Documents
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
              object:
                type: string
                description: A list
                enum:
                  - list
              count:
                type: integer
                example: 1
    DocumentUploaded:
      description: Document was successfully uploaded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'
    DriverLicenseList:
      description: List of Driver Licenses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/DriverLicense'
              object:
                type: string
                description: A list
                enum:
                  - list
              count:
                type: integer
                example: 1
    CandidateNotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateNotFoundError'
    DriverLicenseCreated:
      description: Driver License was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DriverLicense'
    DriverLicense:
      description: Driver License details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DriverLicense'
    DriverLicenseUpdated:
      description: Driver License was successfully updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DriverLicense'
    DriverLicenseDeleted:
      description: Driver License was successfully deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DriverLicense'
    EmployersList:
      description: List of Employers
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Employer'
              object:
                type: string
                description: A list
                enum:
                  - list
              count:
                type: integer
                example: 2
    EmployerCreated:
      description: Employer was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employer'
    Employer:
      description: Employer details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employer'
    EmployerDeleted:
      description: Employer was successfully deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employer'
    SchoolsList:
      description: List of Schools
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/School'
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
    SchoolCreated:
      description: School was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/School'
    School:
      description: School details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/School'
    SchoolDeleted:
      description: School was successfully deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/School'
    Ssn:
      description: Candidate's encrypted SSN
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ssn'
    EncryptionKeyError:
      description: Encryption key required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EncryptionKeyError'
    ProfessionalLicensesList:
      description: List of Professional Licenses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ProfessionalLicense'
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
    Candidate:
      description: Candidate details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Candidate'
    CandidateUpdated:
      description: Candidate was successfully updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Candidate'
    BadPiiRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadPiiRequestError'
    Counties:
      description: Counties by State
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              x-additionalPropertiesName: state_abbreviation
              type: object
              description: An array of counties
              properties:
                counties:
                  type: array
                  items:
                    $ref: '#/components/schemas/County'
            example:
              HI:
                counties:
                  - name: HAWAII
                    fips_code: '15001'
                  - name: HONOLULU
                    fips_code: '15003'
                  - name: KALAWAO
                    fips_code: '15005'
                  - name: KAUAI
                    fips_code: '15007'
                  - name: MAUI
                    fips_code: '15009'
    CountyCriminalSearch:
      description: County Criminal Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CountyCriminalSearch'
    Document:
      description: Document details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'
    EducationVerification:
      description: Education Verification details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EducationVerification'
    EmploymentVerification:
      description: Employment Verification details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmploymentVerification'
    FederalCriminalSearch:
      description: Federal Criminal Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FederalCriminalSearch'
    FederalDistrictCriminalSearch:
      description: Federal District Criminal Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FederalDistrictCriminalSearch'
    FederalCivilSearch:
      description: Federal Civil Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FederalCivilSearch'
    FederalDistrictCivilSearch:
      description: Federal District Civil Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FederalDistrictCivilSearch'
    GeosList:
      description: List of Geos
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
              previous_href:
                type: string
                format: uri
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Geo'
    GeoCreated:
      description: Geo was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Geo'
    DuplicateGeoError:
      description: Duplicate geo
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DuplicateGeoError'
    Geo:
      description: Geo details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Geo'
    GeoUpdated:
      description: Geo was successfully updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Geo'
    GeoCityUpdatedError:
      description: Geo city updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeoCityUpdatedError'
    GeoDeleted:
      description: Geo was successfully deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Geo'
    UsedGeoError:
      description: Geo used
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsedGeoError'
    GlobalWatchlistSearch:
      description: Global Watchlist Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GlobalWatchlistSearch'
    AccountHierarchy:
      description: The hierarchy for the account.
      content:
        application/json:
          schema:
            type: object
            properties:
              sync_id:
                type: string
                description: >-
                  The `uri_name` of the Account, plus a randomly generated
                  hexadecimal ID, linked with a hyphen.
                example: account-da78fa2cd1e6ebee4b5975aa
              time:
                type: string
                format: date-time
                description: The date and time at which the ingestion job began.
                example: '2020-01-01T08:00:00Z'
              nodes:
                type: array
                items:
                  $ref: '#/components/schemas/HierarchyTree'
    HierarchyNotEnabledError:
      description: Hierarchy not enabled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HierarchyNotEnabledError'
    HierarchyNotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HierarchyNotFoundError'
    HierarchyUpdated:
      description: Ingestion successfully initiated
      content:
        application/json:
          schema:
            type: object
            properties:
              sync_id:
                type: string
                description: >-
                  The `uri_name` of the Account, plus a randomly generated
                  hexadecimal ID, linked with a hyphen.
                example: account-da78fa2cd1e6ebee4b5975aa
              time:
                type: string
                format: date-time
                description: The date and time at which the ingestion job began.
                example: '2020-02-11T00:27:14Z'
    BadHierarchyRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadHierarchyRequestError'
    IngestionInProgressError:
      description: Ingestion already in progress
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IngestionInProgressError'
    HierarchyNodes:
      description: Nodes were successfully added to the hierarchy
      content:
        application/json:
          schema:
            type: string
            example: null
    HierarchyStatus:
      description: The current status of hierarchy ingestion.
      content:
        application/json:
          schema:
            type: object
            properties:
              hierarchy_present:
                type: boolean
                description: 'If `true`, a valid hierarchy exists for the account.'
                example: true
              hierarchy_pending:
                type: boolean
                description: >-
                  If `true`, a hierarchy ingestion request is currently
                  processing.
                example: false
              latest_ingestion:
                type: object
                properties:
                  sync_id:
                    type: string
                    description: >-
                      The `sync_id` of the last fully-processed ingestion
                      request. `null` if no requests have processed.
                    example: account-da78fa2cd1e6ebee4b5975aa
                  time:
                    type: string
                    format: date-time
                    description: >-
                      The date and time of the start of the last fully-processed
                      ingestion request. `null` if no requests have processed.
                    example: '2020-01-01T08:00:00Z'
                  successful:
                    type: boolean
                    description: >-
                      If `true`, the last hierarchy ingestion request contained
                      no errors.
                    example: false
                  errors:
                    type: array
                    items:
                      type: string
                    description: >-
                      All error messages produced by the last hierarchy
                      ingestion request.
                    example:
                      - 'Row 1: Validation failed: Name required'
    InvitationsList:
      description: List of Invitations
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
              previous_href:
                type: string
                format: uri
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Invitation'
    InvitationCreated:
      description: Invitation was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invitation'
    PackageNotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PackageNotFoundError'
    Invitation:
      description: Invitation details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invitation'
    InvitationCanceled:
      description: Invitation was successfully canceled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invitation'
    InternationalAdverseMediaSearch:
      description: International Adverse Media Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternationalAdverseMediaSearch'
    InternationalCriminalSearch:
      description: International Criminal Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternationalCriminalSearch'
    InternationalEducationVerification:
      description: International Education Verification details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternationalEducationVerification'
    InternationalEmploymentVerification:
      description: International Employment Verification details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternationalEmploymentVerification'
    InternationalGlobalWatchlistSearch:
      description: International Global Watchlist Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternationalGlobalWatchlistSearch'
    InternationalIdentityDocumentValidation:
      description: International Identity Document Validation details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternationalIdentityDocumentValidation'
    InternationalMotorVehicleReport:
      description: International Motor Vehicle Report details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternationalMotorVehicleReport'
    MotorVehicleReport:
      description: Motor Vehicle Report details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MotorVehicleReport'
    NationalCriminalSearch:
      description: National Criminal Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NationalCriminalSearch'
    NodesList:
      description: List of Nodes
      content:
        application/json:
          schema:
            properties:
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
              previous_href:
                type: string
                format: uri
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
    PackagesList:
      description: List of Packages
      content:
        application/json:
          schema:
            properties:
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
              previous_href:
                type: string
                format: uri
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Package'
    Package:
      description: Package details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Package'
    PackageDeleted:
      description: Package was successfully deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Package'
    ProfessionalLicenseVerification:
      description: Professional License Verification details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProfessionalLicenseVerification'
    ProgramsList:
      description: List of Programs
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
              previous_href:
                type: string
                format: uri
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Program'
    Program:
      description: Program details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Program'
    AdverseActionCreated:
      description: Adverse Action was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdverseAction'
    ReportCreated:
      description: Report was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Report'
    Report:
      description: Report details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Report'
    ReportUpdated:
      description: Report was successfully updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Report'
    PreExistingAdverseActionError:
      description: Pre-existing Adverse Action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PreExistingAdverseActionError'
    ReportEtaAvailable:
      description: Report ETA
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReportETA'
    PredictionUnavailable:
      description: Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PredictionUnavailable'
    ReportTags:
      description: List of report tags.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReportTags'
    ReportTagsUpdated:
      description: Report tags were successfully updated
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: number
                format: integer
                example: 2
              object:
                type: string
                example: list
                enum:
                  - list
              data:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                example:
                  - name: West Coast
                  - name: To Review
    ReportTagsAdded:
      description: Report tag was successfully created
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: number
                format: integer
                example: 3
              object:
                type: string
                example: list
                enum:
                  - list
              data:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                example:
                  - name: EIN-234234234
                  - name: api-generated
                  - name: In Progress
    ReportTagsDeleted:
      description: Report tags were successfully deleted
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: number
                format: integer
                example: 1
              object:
                type: string
                example: list
                enum:
                  - list
              data:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                example:
                  - name: To Review
    ReportAddressesList:
      description: List of Report addresses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ReportAddresses'
              object:
                type: string
                description: A list
                enum:
                  - list
              count:
                type: integer
                example: 1
    AdverseItemsList:
      description: List of Adverse Items
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AdverseItem'
              object:
                type: string
                description: A list
                enum:
                  - list
              count:
                type: integer
                example: 1
    AssessmentsList:
      description: List of Assessments
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Assessment'
              object:
                type: string
                enum:
                  - list
              count:
                type: integer
                description: |
                  The total number of assessments for the specified Report.
                example: 1
    CandidateStoryCreated:
      description: Candidate Story was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateStory'
    EntityConfigurationLimitExceeded:
      description: Limit exceeded
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/CandidateStoriesLimitError'
              - $ref: '#/components/schemas/CandidateStoryDocumentsLimitError'
    VerificationsList:
      description: List of Report Verifications
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Verification'
              object:
                type: string
                description: A list
                enum:
                  - list
              count:
                type: integer
                example: 2
    SexOffenderSearch:
      description: Sex Offender Registry Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SexOffenderSearch'
    SsnTrace:
      description: SSN Trace details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SsnTrace'
    StateCriminalSearch:
      description: State Criminal Search details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StateCriminalSearch'
    SubscriptionsList:
      description: List of Subscriptions
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
              previous_href:
                type: string
                format: uri
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
    BadSubscriptionsListRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: status does not have a valid value
    SubscriptionCreated:
      description: Subscription was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subscription'
    Subscription:
      description: Subscription details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subscription'
    SubscriptionCanceled:
      description: Subscription was successfully canceled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionCanceled'
    ContinuousChecksList:
      description: List of Continuous Checks
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ContinuousCheck'
              object:
                type: string
                description: A list
                enum:
                  - list
              count:
                type: integer
                example: 1
    ContinuousCheckCreated:
      description: Continuous Check was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContinuousCheck'
    BadContinuousCheckRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadContinuousCheckRequestError'
    ContinuousCheckMissingSSNTraceError:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContinuousCheckMissingSSNTraceError'
    ContinuousCheck:
      description: Continuous Check details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContinuousCheck'
    ContinuousCheckNotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContinuousCheckNotFoundError'
    ContinuousCheckUpdated:
      description: Continuous Check was successfully updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContinuousCheck'
    BadContinuousCheckUpdateRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadContinuousCheckUpdateRequestError'
    ContinuousCheckCanceled:
      description: Continuous Check was successfully canceled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContinuousCheck'
    Verification:
      description: Verification details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Verification'
    WebhooksList:
      description: List of Webhooks
      content:
        application/json:
          schema:
            type: object
            properties:
              object:
                type: string
                description: A list
                enum:
                  - list
              next_href:
                type: string
                format: uri
              previous_href:
                type: string
                format: uri
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
    WebhookCreated:
      description: Webhook details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Webhook'
    BadWebhookCreateRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: >
                  Examples: <br> • webhook_url is missing. <br> • Url has
                  already been taken. <br> • Allowed webhook API limit exceeded.
                  <br> • Url is not valid. Please use a publicly available host
                  and the HTTPS or SNS protocol. <br>
    Webhook:
      description: Webhook details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Webhook'
    WebhookDeleted:
      description: Webhook was successfully deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookDelete'
  requestBodies:
    AccountCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - client_id
              - name
              - purpose
              - user
              - company
            properties:
              client_id:
                type: string
                description: >-
                  Client credentials provided as part of your Partner
                  Application.
                example: 56269e3411a549fd07ed8d92
              oauth_authorize:
                type: boolean
                description: Allows skipping of the /oauth/authorize call
                default: false
              name:
                type: string
                description: Name of Account displayed in the Dashboard.
                example: Acme Corporation
              default_compliance_city:
                type: string
                description: >
                  Fallback compliance city if candidate location is not
                  provided.
                example: San Francisco
                nullable: true
              default_compliance_state:
                type: string
                description: >
                  Fallback compliance state if candidate location is not
                  provided. Format: `ISO 3166-2:US`.
                example: CA
                nullable: true
              purpose:
                type: string
                description: >
                  Permissible purpose to run background checks. Determines which
                  background checks the Account is credentialed for.
                enum:
                  - employment
                  - business
                  - insurance
                  - tenant
                example: employment
              user:
                type: object
                properties:
                  full_name:
                    type: string
                    description: Full name of the initial Admin user for the Account.
                    example: Jeanette Hughes
                  email:
                    type: string
                    description: Email of the initial Admin user for the Account.
                    example: user@example.com
              company:
                type: object
                properties:
                  city:
                    type: string
                    description: City where company is headquartered.
                    example: San Francisco
                  dba_name:
                    type: string
                    nullable: true
                    description: >-
                      Name of Company displayed in Checkr emails and branded web
                      pages.
                    example: Acme
                  industry:
                    type: string
                    nullable: true
                    description: >
                      Industry that company operates in. Format: `NAICS 2017
                      Code`.
                    example: '72'
                  state:
                    type: string
                    description: >
                      State where company is headquartered. Format: `ISO
                      3166-2:US`.
                    example: CA
                  street:
                    type: string
                    description: Street address where company is headquartered.
                    example: 123 Main Street
                  tax_id:
                    type: string
                    description: Company Tax ID number.
                    example: '123456789'
                  zipcode:
                    type: string
                    description: Zipcode where company is headquartered.
                    example: '94107'
                  incorporation_state:
                    type: string
                    description: >
                      State where company is incorporated. Format: `ISO
                      3166-2:US`.
                    example: CA
                    nullable: true
                  incorporation_type:
                    type: string
                    description: Type of incorporation.
                    enum:
                      - association
                      - co-ownership
                      - corporation
                      - joint-venture
                      - limited-partnership
                      - llc
                      - llp
                      - non-profit
                      - partnership
                      - s-corporation
                      - sp
                      - trusteeship
                  phone:
                    type: string
                    description: Company phone number.
                    example: 206-555-0100
                    nullable: true
                  website:
                    type: string
                    description: Company website.
                    example: 'https://www.example.com'
                    nullable: true
      required: true
    CandidateCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              object:
                type: string
                enum:
                  - candidate
                readOnly: true
              first_name:
                type: string
                pattern: '[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-''., ]*'
                description: |
                  Candidate’s first name.
                example: John
              middle_name:
                type: string
                pattern: '[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-''., ]*'
                description: >
                  Candidate’s middle name. This field is required if
                  `no_middle_name` is `false`.
                example: Alfred
              no_middle_name:
                type: boolean
                description: >
                  Required if no `middle_name` is provided. `true` if the
                  candidate has no middle name.
                default: false
              last_name:
                type: string
                pattern: '[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-''., ]{2,}'
                description: Candidate’s last name.
                example: Smith
              mother_maiden_name:
                type: string
                pattern: '[a-zA-Z0-9ªµºÀ-ÖØ-öø-ÿ\-''., ]*'
                description: |
                  Candidate’s mother’s maiden name.
                example: Jones
              email:
                type: string
                description: |
                  Candidate’s email address.
                format: email
                example: john.smith@gmail.com
              phone:
                type: string
                description: Candidate’s phone number.
                example: 5555555555
                nullable: true
              zipcode:
                type: string
                description: Candidate’s 5-digit zip code.
                example: 90401
              dob:
                type: string
                description: Candidate’s date of birth.
                format: date
                example: '1970-01-22'
              ssn:
                type: string
                description: >-
                  Candidate’s Social Security Number. This value will be
                  redacted in all return calls, except for the last four digits.
                example: XXX-XX-4645
              driver_license_number:
                type: string
                description: Candidate’s driver license number.
                example: F2111655
              driver_license_state:
                type: string
                description: |
                  Candidate’s driver license state of issue.
                  Format: `ISO 3166-2:US`.
                example: CA
              previous_driver_license_number:
                type: string
                description: Candidate’s previous driver license number.
                example: F1501739
              previous_driver_license_state:
                type: string
                description: |
                  State that issued the candidate’s previous driver license.
                  Format: `ISO 3166-2:US`.
                example: MD
              copy_requested:
                type: boolean
                description: >-
                  If `true`, the candidate has asked to receive a copy of their
                  report.
                default: false
              custom_id:
                type: string
                description: >-
                  Client-assigned unique ID for the Candidate. Can be used to
                  map Checkr Candidate IDs to your internal tracking system, and
                  to search for Candidates through both the Dashboard and the
                  API.
                example: HRIS-27
              report_ids:
                type: array
                description: Array of Report IDs.
                readOnly: true
                items:
                  type: string
                  example: 532e71cfe88a1d4e8d00000d
              geo_ids:
                type: array
                description: Array of Geo IDs.
                items:
                  type: string
                  example: 79f943e212cce7de21c054a8
              metadata:
                $ref: '#/components/schemas/Metadata'
              work_locations:
                type: array
                description: >
                  <font color="red">Required</font> for non-US candidates.


                  Array of locations described using country, state, and city.
                  When country is not specified defaults to US. State is
                  required for US candidates. Country is required for non-US
                  candidates.
                items:
                  $ref: '#/components/schemas/WorkLocation'
      required: true
    DocumentUpload:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - file
              - type
            properties:
              type:
                type: string
                enum:
                  - alien_id
                  - consent
                  - citizenship_certificate
                  - credit_report_consent_form
                  - driver_license
                  - driver_license_back
                  - driver_license_history
                  - education_proof
                  - electronic_consent_form
                  - employment_proof
                  - government_id
                  - international_consent_form
                  - military_id
                  - national_id
                  - national_id_back
                  - passport
                  - passport_signature_page
                  - previous_driver_license
                  - professional_license_certification_image
                  - selfie
                  - ssn_card
                  - state_id_card
                  - state_id_card_back
                  - student_id
                  - taxpayer_id
              file:
                type: string
                format: binary
                description: >
                  Path to the document on your local file system.


                  Valid MIME types: `image/gif`, `image/jpg`, `image/jpeg`,
                  `image/png`, `image/bmp`, `image/tiff`, `application/pdf`,
                  `image/heic`.
          encoding:
            file:
              contentType: >-
                image/gif, image/jpg, image/jpeg, image/png, image/bmp,
                image/tiff, application/pdf, image/heic
    DriverLicenseCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - number
              - state
              - current
            properties:
              number:
                type: string
                description: The driver license number.
                example: F2222222
              state:
                type: string
                description: The state that issued the driver license.
                example: CA
              issued_date:
                type: string
                format: date
                description: The issued date of the driver license.
                example: '2010-01-30'
              current:
                type: boolean
                description: >-
                  Defines whether the driver license is the candidate's current
                  license. `true` if the license is the candidate's current
                  license, `false` otherwise.
      required: true
    DriverLicenseUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              number:
                type: string
                description: The updated number of the driver license.
                example: F1111111
              state:
                type: string
                description: The updated state that issued the driver license.
                example: CA
              issued_date:
                type: string
                format: date
                description: The updated issued date of the driver license.
                example: '2010-01-30'
              current:
                type: boolean
                description: >-
                  The updated current status of the driver license. `true` if
                  the license is the candidate's current license, `false`
                  otherwise.
      required: true
    EmployerCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - position
              - contract_type
              - start_date
              - address
            properties:
              id:
                $ref: '#/components/schemas/ResourceId'
              object:
                type: string
                enum:
                  - employer
                readOnly: true
              candidate_id:
                type: string
                description: ID of the Candidate being screened.
                pattern: '[a-zA-Z0-9 -''.,]*'
                example: xxx
                minLength: 1
              type:
                type: string
                description: >
                  Type of employment history to be created.


                  If type is set to `gap` only `start_date` is required, and
                  only `start_date`, `end_date`, and `note` will be recorded.
                enum:
                  - employer
                  - gap
                default: employer
              name:
                type: string
                pattern: '[a-zA-Z0-9 -''.,]*'
                description: Candidate’s employer’s name.
                example: Checkr
                minLength: 1
              position:
                type: string
                description: Candidate’s position or title.
                example: Software Engineer
              salary:
                type: integer
                description: Candidate’s gross salary in dollars annually.
                example: 10000
              contract_type:
                type: string
                description: Candidate’s contract type.
                enum:
                  - full_time
                  - part_time
                  - contract
                  - internship
                example: full_time
              do_not_contact:
                type: boolean
                default: false
                description: >-
                  If `true`, the employer will not be contacted about the
                  Candidate.
                example: false
              start_date:
                type: string
                description: Candidate’s start date with the employer.
                format: date
                example: '2016-06-01'
              end_date:
                type: string
                description: Candidate’s end date with the employer.
                format: date
                example: '2017-05-01'
              employer_url:
                type: string
                description: Employer’s website.
                example: www.employer.com
              address:
                $ref: '#/components/schemas/Address'
              manager:
                type: object
                properties:
                  name:
                    type: string
                    description: Candidate's manager's name.
                    example: Joe Smith
                  title:
                    type: string
                    description: Candidate's manager's title.
                    example: Engineering Manager
                  email:
                    type: string
                    description: Candidate's manager's email address.
                    example: joesmith@checkr.co
                  phone:
                    type: string
                    description: Candidate's manager's phone number.
                    example: 212-555-1234
              note:
                type: string
                description: A text note used to add context for an employment gap.
                example: Took time off to travel abroad.
                maxLength: 65535
      required: true
    SchoolCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - degree
              - major
              - address
            properties:
              id:
                $ref: '#/components/schemas/ResourceId'
              object:
                type: string
                enum:
                  - school
                readOnly: true
              candidate_id:
                type: string
                pattern: '[a-zA-Z0-9 -''.,]*'
                description: Candidate linked to this School resource.
                example: 83ebeagdec0948690863766f792ead24d61fe3f9
                minLength: 1
              name:
                type: string
                pattern: '[a-zA-Z0-9 -''.,]*'
                description: Name of the School.
                example: College University
                minLength: 1
              degree:
                type: string
                description: Degree awarded to the Candidate.
                example: BA
              year_awarded:
                type: integer
                description: Year in which the degree was awarded.
                example: 2017
                minLength: 1
              major:
                type: string
                pattern: '[a-zA-Z0-9 -''.,]*'
                description: Candidate’s major.
                example: Russian Literature
              phone:
                type: string
                description: School's phone number.
                example: 415-111-1111
                nullable: true
              minor:
                type: string
                description: Candidate’s minor.
                example: Background Checks
              start_date:
                type: string
                description: Candidate’s start date with the School.
                format: date
                example: '2012-09-22'
              end_date:
                type: string
                description: Candidate’s end date with the School.
                format: date
                example: '2017-05-10'
              current:
                type: boolean
                description: Defines whether the Candidate is currently enrolled.
                default: false
              school_url:
                type: string
                description: School’s website.
                example: www.collegeuniversity.com
              address:
                $ref: '#/components/schemas/Address'
      required: true
    ProfessionalLicenseDelete:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ResourceId'
              object:
                type: string
                enum:
                  - professional_license
                readOnly: true
              certification_organization_id:
                type: string
                description: >
                  The Certification Organization's Professional Licenses to
                  remove from the input Candidate. If omitted, all Professional
                  Licenses will be removed from this Candidate.
                example: 295DB417-A9D7-41DD-BE4A-64F014DF1D49
                minLength: 1
      required: true
    CandidatePatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Candidate'
      required: true
    CandidatePiiRemoval:
      content:
        application/json:
          schema:
            type: object
            required:
              - deletion_contact_email_address
            properties:
              deletion_contact_email_address:
                type: string
                description: Email address of person requesting candidate's PII removal.
                example: john.smith@gmail.com
              deletion_contact_first_name:
                type: string
                description: First name of person requesting candidate's PII removal.
                example: John
              deletion_contact_last_name:
                type: string
                description: Last name of person requesting candidate's PII removal.
                example: Smith
      required: true
    GeoCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - state
            properties:
              name:
                type: string
                description: Human-readable name of the Geo.
                example: San Francisco
              state:
                type: string
                description: US state for the Geo.
                example: CA
              city:
                type: string
                description: A major city within the input state.
                example: San Francisco
      required: true
    GeoUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              city:
                type: string
                description: Updates the Geo with the input city.
                example: San Francisco
                nullable: true
      required: true
    HierarchyUpdate:
      content:
        application/json:
          schema:
            type: object
            required:
              - nodes
            properties:
              nodes:
                type: array
                items:
                  $ref: '#/components/schemas/HierarchyNode'
      required: true
    InvitationCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - package
              - candidate_id
            properties:
              package:
                type: string
                description: |
                  `slug` of the associated package.
                example: driver_pro
              candidate_id:
                type: string
                description: ID of the Candidate for whom the Invitation is created.
                example: 551564b7865af96a28b13f36
              node:
                type: string
                description: >
                  <font color="red">Required</font> for hierarchy-enabled
                  accounts.


                  `custom_id` of the associated node.
              work_locations:
                type: array
                description: >
                  <font color="red">Required</font> for hierarchy-enabled
                  accounts.


                  Array of locations described using country, state, and city.
                  When country is not specified defaults to US. State is
                  required for US candidates. Country is required for non-US
                  candidates.
                items:
                  $ref: '#/components/schemas/WorkLocation'
              tags:
                type: array
                description: Array of tags for the Report.
                items:
                  type: string
      required: true
    AdverseActionCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - adverse_item_ids
            properties:
              post_notice_scheduled_at:
                type: string
                format: date-time
                description: >-
                  Time at which the Post-Adverse Action notification will be
                  sent. Default is 7 days after creation.
                example: '2016-10-07T12:34:00Z'
              adverse_item_ids:
                type: array
                items:
                  type: string
                description: IDs of Adverse Items selected for the Adverse Action.
      required: true
    ReportCreate:
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  candidate_id:
                    type: string
                    description: ID of the Candidate screened.
                    example: e44aa283528e6fde7d542194
                  package:
                    type: string
                    description: |
                      `slug` of the associated package.
                      Example: `driver_pro`
                  node:
                    type: string
                    description: >
                      <font color="red">Required</font> for hierarchy-enabled
                      accounts.


                      `custom_id` of the associated node.
                  self_disclosures:
                    type: array
                    description: >
                      Array of SelfDisclosures


                      **Note:** Self Disclosures may not be added, updated, or
                      deleted after a Report has been created. The information
                      provided in a Self Disclosure will not be included in the
                      completed Report, and may be retrieved using
                      [GET](#operation/getReport)
                      `/v1/reports/{id}?include=documents`. See the
                      [Documents](#tag/Documents) resource for more information.


                      Removing the requirement for the description, date, and
                      location parameters greatly reduces the value of Self
                      Disclosures. If your system mandates that these parameters
                      be optional, work with your Checkr Customer Success
                      Manager to disable the requirement.
                    items:
                      $ref: '#/components/schemas/SelfDisclosure'
                  work_locations:
                    type: array
                    description: >
                      <font color="red">Required</font> for hierarchy-enabled
                      accounts.


                      Array of locations described using country, state, and
                      city. When country is not specified defaults to US. State
                      is required for US candidates. Country is required for
                      non-US candidates.
                    items:
                      $ref: '#/components/schemas/WorkLocation'
                  tags:
                    type: array
                    description: Array of tags for the Report.
                    items:
                      type: string
              - required:
                  - package
                  - candidate_id
      required: true
    CandidateStoryCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - content
              - documents
            properties:
              content:
                type: string
                description: Additional information provided by Candidate.
                example: >-
                  Since my case, I have received the following certifications
                  (see attachments)
              record_id:
                type: string
                description: >
                  ID of the Record existing on a Screening to which the
                  Candidate Story is linked.

                  When no record ID is provided, the Candidate Story is
                  considered General Information.
                example: af3393b7d751206c7c67b6e5
              documents:
                type: array
                description: >-
                  An array of documents to attach to the Candidate Story. Can be
                  empty.
                items:
                  type: object
                  properties:
                    filename:
                      type: string
                      description: File name
                      example: evidence_of_rehab.pdf
                    tempfile:
                      type: string
                      description: >-
                        Accessible resource from which the document will be
                        copied.
                      example: 'https://tempfilebucket.aws.example.com/abYwtudnakfnafl'
                    type:
                      type: string
                      description: Document MIME type
                      enum:
                        - application/pdf
                        - image/bmp
                        - image/gif
                        - image/heic
                        - image/jpeg
                        - image/jpg
                        - image/png
                        - image/tiff
                      example: application/pdf
      required: true
    SubscriptionCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - package
              - candidate_id
              - start_date
            properties:
              package:
                type: string
                description: |
                  `slug` of the associated package.
              candidate_id:
                type: string
                description: ID of the candidate being screened.
              start_date:
                type: string
                format: date
                description: >-
                  Start date for the subscription. This is the date on which the
                  subscription will begin, and the first time the report will be
                  run.
              interval_count:
                type: integer
                description: >-
                  The number of intervals between each recurrent background
                  check.
              interval_unit:
                type: string
                description: Interval at which the subscription will repeat.
                enum:
                  - day
                  - week
                  - month
                  - year
              node:
                type: string
                description: >
                  <font color="red">Required</font> for hierarchy-enabled
                  accounts.


                  `custom_id` of the associated node.
              work_locations:
                type: array
                description: >
                  <font color="red">Required</font> for hierarchy-enabled
                  accounts.

                  Array of locations described using country, state, and city.
                  When country is not specified defaults to US. State is
                  required for US candidates. Country is required for non-US
                  candidates.
                items:
                  $ref: '#/components/schemas/WorkLocation'
      required: true
    SubscriptionUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              package:
                type: string
                description: Package to run for the Report.
              candidate_id:
                type: string
                description: ID of the candidate being screened.
              start_date:
                type: string
                format: date
                description: >-
                  Start date for the subscription. This is the date on which the
                  subscription will begin, and the first time the report will be
                  run.
              interval_count:
                type: integer
                description: >-
                  The number of intervals between each recurrent background
                  check.
              interval_unit:
                type: string
                description: Interval at which the subscription will repeat.
                enum:
                  - day
                  - week
                  - month
                  - year
              node:
                type: string
                description: |
                  `custom_id` of the associated node.
              work_locations:
                type: array
                description: >
                  Array of locations described using country, state, and city.
                  When country is not specified defaults to US. State is
                  required for US candidates. Country is required for non-US
                  candidates.
                items:
                  $ref: '#/components/schemas/WorkLocation'
      required: true
    ContinuousCheckCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - type
            properties:
              type:
                type: string
                description: Defines the screening type(s) for this Continuous Check.
                example: criminal
                enum:
                  - criminal
                  - mvr
              node:
                type: string
                description: >
                  <font color="red">Required</font> for hierarchy-enabled
                  accounts with Nodes.


                  `custom_id` of the associated node.
              work_locations:
                type: array
                description: >
                  <font color="red">Required</font> for hierarchy-enabled
                  accounts.


                  Array of locations described using country, state, and city.
                  When country is not specified defaults to US. State is
                  required for US candidates. Country is required for non-US
                  candidates.
                items:
                  $ref: '#/components/schemas/WorkLocation'
      required: true
    ContinuousCheckUpdate:
      content:
        application/json:
          schema:
            type: object
            required:
              - type
            properties:
              node:
                type: string
                description: |
                  `custom_id` of the associated node.
              work_locations:
                type: array
                description: >
                  Array of locations described using country, state, and city.
                  When country is not specified defaults to US. State is
                  required for US candidates. Country is required for non-US
                  candidates.
                items:
                  $ref: '#/components/schemas/WorkLocation'
      required: true
    WebhookCreate:
      content:
        application/json:
          schema:
            type: object
            required:
              - webhook_url
            properties:
              include_object:
                type: boolean
                description: >-
                  When `true`, the webhook event payload will include the
                  related object.
              webhook_url:
                type: string
                description: >-
                  The URL which receives the webhook event payload. This must be
                  an HTTPS or an AWS SNS URL. For more information, see
                  [Supported Webhook
                  URLs](#section/Webhooks/Supported-webhook-URLs) section.
                example: 'https://example.com'
              live:
                type: boolean
                description: 'When ''true'', the webhook is for the live environment.'
                example: true
      required: true
